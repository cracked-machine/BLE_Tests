
L476_BLE_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000583c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005acc  08005acc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005acc  08005acc  00015acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ad4  08005ad4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ad4  08005ad4  00015ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ad8  08005ad8  00015ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  20000070  08005b4c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  08005b4c  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c629  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031dd  00000000  00000000  0003c6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001188  00000000  00000000  0003f8a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001030  00000000  00000000  00040a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002aba9  00000000  00000000  00041a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010928  00000000  00000000  0006c609  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f54e3  00000000  00000000  0007cf31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00172414  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e24  00000000  00000000  00172490  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059b4 	.word	0x080059b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080059b4 	.word	0x080059b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <HCI_TL_SPI_Init+0x80>)
 800057a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057c:	4a1c      	ldr	r2, [pc, #112]	; (80005f0 <HCI_TL_SPI_Init+0x80>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000584:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <HCI_TL_SPI_Init+0x80>)
 8000586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000588:	f003 0301 	and.w	r3, r3, #1
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000590:	2301      	movs	r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <HCI_TL_SPI_Init+0x84>)
 8000596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	4619      	mov	r1, r3
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f000 ff93 	bl	80014d0 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005aa:	2320      	movs	r3, #32
 80005ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	4619      	mov	r1, r3
 80005c0:	480d      	ldr	r0, [pc, #52]	; (80005f8 <HCI_TL_SPI_Init+0x88>)
 80005c2:	f000 ff85 	bl	80014d0 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80005c6:	2310      	movs	r3, #16
 80005c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4619      	mov	r1, r3
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <HCI_TL_SPI_Init+0x88>)
 80005de:	f000 ff77 	bl	80014d0 <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 80005e2:	f000 fa1b 	bl	8000a1c <BSP_SPI1_Init>
 80005e6:	4603      	mov	r3, r0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40021000 	.word	0x40021000
 80005f4:	10110000 	.word	0x10110000
 80005f8:	48000800 	.word	0x48000800

080005fc <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000600:	2101      	movs	r1, #1
 8000602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000606:	f001 f90b 	bl	8001820 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 800060a:	2110      	movs	r1, #16
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <HCI_TL_SPI_DeInit+0x24>)
 800060e:	f001 f907 	bl	8001820 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000612:	2120      	movs	r1, #32
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <HCI_TL_SPI_DeInit+0x24>)
 8000616:	f001 f903 	bl	8001820 <HAL_GPIO_DeInit>
  return 0;
 800061a:	2300      	movs	r3, #0
}
 800061c:	4618      	mov	r0, r3
 800061e:	bd80      	pop	{r7, pc}
 8000620:	48000800 	.word	0x48000800

08000624 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2110      	movs	r1, #16
 800062c:	480a      	ldr	r0, [pc, #40]	; (8000658 <HCI_TL_SPI_Reset+0x34>)
 800062e:	f001 fa03 	bl	8001a38 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2120      	movs	r1, #32
 8000636:	4808      	ldr	r0, [pc, #32]	; (8000658 <HCI_TL_SPI_Reset+0x34>)
 8000638:	f001 f9fe 	bl	8001a38 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800063c:	2005      	movs	r0, #5
 800063e:	f000 fde5 	bl	800120c <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000642:	2201      	movs	r2, #1
 8000644:	2120      	movs	r1, #32
 8000646:	4804      	ldr	r0, [pc, #16]	; (8000658 <HCI_TL_SPI_Reset+0x34>)
 8000648:	f001 f9f6 	bl	8001a38 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800064c:	2005      	movs	r0, #5
 800064e:	f000 fddd 	bl	800120c <HAL_Delay>
  return 0;
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	bd80      	pop	{r7, pc}
 8000658:	48000800 	.word	0x48000800

0800065c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 800066c:	23ff      	movs	r3, #255	; 0xff
 800066e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000670:	230b      	movs	r3, #11
 8000672:	753b      	strb	r3, [r7, #20]
 8000674:	2300      	movs	r3, #0
 8000676:	757b      	strb	r3, [r7, #21]
 8000678:	2300      	movs	r3, #0
 800067a:	75bb      	strb	r3, [r7, #22]
 800067c:	2300      	movs	r3, #0
 800067e:	75fb      	strb	r3, [r7, #23]
 8000680:	2300      	movs	r3, #0
 8000682:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2110      	movs	r1, #16
 8000688:	4820      	ldr	r0, [pc, #128]	; (800070c <HCI_TL_SPI_Receive+0xb0>)
 800068a:	f001 f9d5 	bl	8001a38 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800068e:	f107 010c 	add.w	r1, r7, #12
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	2205      	movs	r2, #5
 8000698:	4618      	mov	r0, r3
 800069a:	f000 f9ef 	bl	8000a7c <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 800069e:	7b3b      	ldrb	r3, [r7, #12]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d129      	bne.n	80006f8 <HCI_TL_SPI_Receive+0x9c>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80006a4:	7c3b      	ldrb	r3, [r7, #16]
 80006a6:	021b      	lsls	r3, r3, #8
 80006a8:	b21a      	sxth	r2, r3
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	b21b      	sxth	r3, r3
 80006b2:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 80006b4:	8bfb      	ldrh	r3, [r7, #30]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d01e      	beq.n	80006f8 <HCI_TL_SPI_Receive+0x9c>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 80006ba:	8bfa      	ldrh	r2, [r7, #30]
 80006bc:	887b      	ldrh	r3, [r7, #2]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d901      	bls.n	80006c6 <HCI_TL_SPI_Receive+0x6a>
        byte_count = size;
 80006c2:	887b      	ldrh	r3, [r7, #2]
 80006c4:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	777b      	strb	r3, [r7, #29]
 80006ca:	e010      	b.n	80006ee <HCI_TL_SPI_Receive+0x92>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80006cc:	f107 011b 	add.w	r1, r7, #27
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	2201      	movs	r2, #1
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f9d0 	bl	8000a7c <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 80006dc:	7f7b      	ldrb	r3, [r7, #29]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	7efa      	ldrb	r2, [r7, #27]
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 80006e8:	7f7b      	ldrb	r3, [r7, #29]
 80006ea:	3301      	adds	r3, #1
 80006ec:	777b      	strb	r3, [r7, #29]
 80006ee:	7f7b      	ldrb	r3, [r7, #29]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	8bfa      	ldrh	r2, [r7, #30]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d8e9      	bhi.n	80006cc <HCI_TL_SPI_Receive+0x70>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2110      	movs	r1, #16
 80006fc:	4803      	ldr	r0, [pc, #12]	; (800070c <HCI_TL_SPI_Receive+0xb0>)
 80006fe:	f001 f99b 	bl	8001a38 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8000702:	7f7b      	ldrb	r3, [r7, #29]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	48000800 	.word	0x48000800

08000710 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800071c:	230a      	movs	r3, #10
 800071e:	743b      	strb	r3, [r7, #16]
 8000720:	2300      	movs	r3, #0
 8000722:	747b      	strb	r3, [r7, #17]
 8000724:	2300      	movs	r3, #0
 8000726:	74bb      	strb	r3, [r7, #18]
 8000728:	2300      	movs	r3, #0
 800072a:	74fb      	strb	r3, [r7, #19]
 800072c:	2300      	movs	r3, #0
 800072e:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000730:	f000 fd60 	bl	80011f4 <HAL_GetTick>
 8000734:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2110      	movs	r1, #16
 800073e:	481c      	ldr	r0, [pc, #112]	; (80007b0 <HCI_TL_SPI_Send+0xa0>)
 8000740:	f001 f97a 	bl	8001a38 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000744:	f107 0108 	add.w	r1, r7, #8
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	2205      	movs	r2, #5
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f994 	bl	8000a7c <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 8000754:	7a3b      	ldrb	r3, [r7, #8]
 8000756:	2b02      	cmp	r3, #2
 8000758:	d10f      	bne.n	800077a <HCI_TL_SPI_Send+0x6a>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 800075a:	7a7b      	ldrb	r3, [r7, #9]
 800075c:	b29b      	uxth	r3, r3
 800075e:	887a      	ldrh	r2, [r7, #2]
 8000760:	429a      	cmp	r2, r3
 8000762:	d806      	bhi.n	8000772 <HCI_TL_SPI_Send+0x62>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8000764:	887b      	ldrh	r3, [r7, #2]
 8000766:	461a      	mov	r2, r3
 8000768:	4912      	ldr	r1, [pc, #72]	; (80007b4 <HCI_TL_SPI_Send+0xa4>)
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f000 f986 	bl	8000a7c <BSP_SPI1_SendRecv>
 8000770:	e006      	b.n	8000780 <HCI_TL_SPI_Send+0x70>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8000772:	f06f 0301 	mvn.w	r3, #1
 8000776:	61fb      	str	r3, [r7, #28]
 8000778:	e002      	b.n	8000780 <HCI_TL_SPI_Send+0x70>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 800077a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800077e:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000780:	2201      	movs	r2, #1
 8000782:	2110      	movs	r1, #16
 8000784:	480a      	ldr	r0, [pc, #40]	; (80007b0 <HCI_TL_SPI_Send+0xa0>)
 8000786:	f001 f957 	bl	8001a38 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800078a:	f000 fd33 	bl	80011f4 <HAL_GetTick>
 800078e:	4602      	mov	r2, r0
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	2b0f      	cmp	r3, #15
 8000796:	d903      	bls.n	80007a0 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8000798:	f06f 0302 	mvn.w	r3, #2
 800079c:	61fb      	str	r3, [r7, #28]
      break;
 800079e:	e002      	b.n	80007a6 <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	dbc7      	blt.n	8000736 <HCI_TL_SPI_Send+0x26>

  return result;
 80007a6:	69fb      	ldr	r3, [r7, #28]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	48000800 	.word	0x48000800
 80007b4:	2000008c 	.word	0x2000008c

080007b8 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80007bc:	2101      	movs	r1, #1
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c2:	f001 f921 	bl	8001a08 <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	bf0c      	ite	eq
 80007cc:	2301      	moveq	r3, #1
 80007ce:	2300      	movne	r3, #0
 80007d0:	b2db      	uxtb	r3, r3
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <hci_tl_lowlevel_init+0x54>)
 80007e0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <hci_tl_lowlevel_init+0x58>)
 80007e4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <hci_tl_lowlevel_init+0x5c>)
 80007e8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <hci_tl_lowlevel_init+0x60>)
 80007ec:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <hci_tl_lowlevel_init+0x64>)
 80007f0:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <hci_tl_lowlevel_init+0x68>)
 80007f4:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4618      	mov	r0, r3
 80007fa:	f003 ff01 	bl	8004600 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80007fe:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 8000802:	4810      	ldr	r0, [pc, #64]	; (8000844 <hci_tl_lowlevel_init+0x6c>)
 8000804:	f000 fe4f 	bl	80014a6 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000808:	4a0f      	ldr	r2, [pc, #60]	; (8000848 <hci_tl_lowlevel_init+0x70>)
 800080a:	2100      	movs	r1, #0
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <hci_tl_lowlevel_init+0x6c>)
 800080e:	f000 fe30 	bl	8001472 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	2006      	movs	r0, #6
 8000818:	f000 fdf5 	bl	8001406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800081c:	2006      	movs	r0, #6
 800081e:	f000 fe0e 	bl	800143e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000822:	bf00      	nop
 8000824:	3720      	adds	r7, #32
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	08000571 	.word	0x08000571
 8000830:	080005fd 	.word	0x080005fd
 8000834:	08000711 	.word	0x08000711
 8000838:	0800065d 	.word	0x0800065d
 800083c:	08000625 	.word	0x08000625
 8000840:	08000abd 	.word	0x08000abd
 8000844:	20000478 	.word	0x20000478
 8000848:	0800084d 	.word	0x0800084d

0800084c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8000850:	e005      	b.n	800085e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8000852:	2000      	movs	r0, #0
 8000854:	f004 f836 	bl	80048c4 <hci_notify_asynch_evt>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d105      	bne.n	800086a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800085e:	f7ff ffab 	bl	80007b8 <IsDataAvailable>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1f4      	bne.n	8000852 <hci_tl_lowlevel_isr+0x6>
 8000868:	e000      	b.n	800086c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800086a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <MX_BlueNRG_MS_Init>:

uint8_t rcv_data[30];
uint8_t RSSI[30];

void MX_BlueNRG_MS_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af04      	add	r7, sp, #16
  //uint8_t CLIENT_BDADDR[] = {0X01,0X02,0X03,0X04,0X05,0X06};
  uint8_t bdaddr[BDADDR_SIZE];

  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;

  hci_init(user_notify,NULL);
 8000876:	2100      	movs	r1, #0
 8000878:	481b      	ldr	r0, [pc, #108]	; (80008e8 <MX_BlueNRG_MS_Init+0x78>)
 800087a:	f003 fe7f 	bl	800457c <hci_init>
  hci_reset();
 800087e:	f003 fdc2 	bl	8004406 <hci_reset>
  HAL_Delay(100);
 8000882:	2064      	movs	r0, #100	; 0x64
 8000884:	f000 fcc2 	bl	800120c <HAL_Delay>
  
  //BLUENRG_memcpy(bdaddr,CLIENT_BDADDR,sizeof(CLIENT_BDADDR));
  
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	461a      	mov	r2, r3
 800088e:	2106      	movs	r1, #6
 8000890:	2000      	movs	r0, #0
 8000892:	f003 fd50 	bl	8004336 <aci_hal_write_config_data>
 8000896:	4603      	mov	r3, r0
 8000898:	617b      	str	r3, [r7, #20]
                                  CONFIG_DATA_PUBADDR_LEN,
                                 bdaddr);
  
  //IDB05A1
  ret = aci_gatt_init();
 800089a:	f003 fd29 	bl	80042f0 <aci_gatt_init>
 800089e:	4603      	mov	r3, r0
 80008a0:	617b      	str	r3, [r7, #20]
  ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1|GAP_CENTRAL_ROLE_IDB05A1|GAP_OBSERVER_ROLE_IDB05A1,0,0x07,&service_handle,&dev_name_char_handle,&appearance_char_handle);
 80008a2:	f107 020a 	add.w	r2, r7, #10
 80008a6:	1dbb      	adds	r3, r7, #6
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	4613      	mov	r3, r2
 80008b2:	2207      	movs	r2, #7
 80008b4:	2100      	movs	r1, #0
 80008b6:	200d      	movs	r0, #13
 80008b8:	f003 fc38 	bl	800412c <aci_gap_init_IDB05A1>
 80008bc:	4603      	mov	r3, r0
 80008be:	617b      	str	r3, [r7, #20]
  ret = aci_gap_set_auth_requirement(  0x00,
 80008c0:	2300      	movs	r3, #0
 80008c2:	9303      	str	r3, [sp, #12]
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_BlueNRG_MS_Init+0x7c>)
 80008c6:	9302      	str	r3, [sp, #8]
 80008c8:	2300      	movs	r3, #0
 80008ca:	9301      	str	r3, [sp, #4]
 80008cc:	2310      	movs	r3, #16
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2307      	movs	r3, #7
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	2000      	movs	r0, #0
 80008d8:	f003 fc78 	bl	80041cc <aci_gap_set_auth_requirement>
 80008dc:	4603      	mov	r3, r0
 80008de:	617b      	str	r3, [r7, #20]
                                       7,
                                       16,
                                       0x00,
                                       123456,
                                       0x00);
}
 80008e0:	bf00      	nop
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	080009c1 	.word	0x080009c1
 80008ec:	0001e240 	.word	0x0001e240

080008f0 <MX_BlueNRG_MS_Process>:

void MX_BlueNRG_MS_Process(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  aci_gap_start_general_discovery_proc(0x4000, 0x4000,0x00,0x00);
 80008f4:	2300      	movs	r3, #0
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000900:	f003 fcb8 	bl	8004274 <aci_gap_start_general_discovery_proc>
  HAL_Delay(95);
 8000904:	205f      	movs	r0, #95	; 0x5f
 8000906:	f000 fc81 	bl	800120c <HAL_Delay>
  hci_user_evt_proc();
 800090a:	f003 ffb1 	bl	8004870 <hci_user_evt_proc>

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <receiveData>:


void receiveData(uint8_t * data_buffer, uint8_t * rssi_data, uint8_t no_bytes)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	4613      	mov	r3, r2
 8000920:	71fb      	strb	r3, [r7, #7]

	int rssi;
	printf("DEVICE:");
 8000922:	481f      	ldr	r0, [pc, #124]	; (80009a0 <receiveData+0x8c>)
 8000924:	f004 f962 	bl	8004bec <iprintf>

        for(int i =0;i<no_bytes;i++)
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	e01c      	b.n	8000968 <receiveData+0x54>
        {
          rcv_data[i] = data_buffer[i];
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	4413      	add	r3, r2
 8000934:	7819      	ldrb	r1, [r3, #0]
 8000936:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <receiveData+0x90>)
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	4413      	add	r3, r2
 800093c:	460a      	mov	r2, r1
 800093e:	701a      	strb	r2, [r3, #0]
          RSSI[30] = rssi_data[30];
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	7f9a      	ldrb	r2, [r3, #30]
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <receiveData+0x94>)
 8000946:	779a      	strb	r2, [r3, #30]
          rssi = (0xff - RSSI[30])+1;
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <receiveData+0x94>)
 800094a:	7f9b      	ldrb	r3, [r3, #30]
 800094c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000950:	617b      	str	r3, [r7, #20]
          printf("%i", rcv_data[i]);
 8000952:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <receiveData+0x90>)
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4619      	mov	r1, r3
 800095c:	4813      	ldr	r0, [pc, #76]	; (80009ac <receiveData+0x98>)
 800095e:	f004 f945 	bl	8004bec <iprintf>
        for(int i =0;i<no_bytes;i++)
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	3301      	adds	r3, #1
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	429a      	cmp	r2, r3
 800096e:	dbde      	blt.n	800092e <receiveData+0x1a>
        }

    printf("   ");
 8000970:	480f      	ldr	r0, [pc, #60]	; (80009b0 <receiveData+0x9c>)
 8000972:	f004 f93b 	bl	8004bec <iprintf>
    printf("RSSI:");
 8000976:	480f      	ldr	r0, [pc, #60]	; (80009b4 <receiveData+0xa0>)
 8000978:	f004 f938 	bl	8004bec <iprintf>
    printf("%d",rssi);
 800097c:	6979      	ldr	r1, [r7, #20]
 800097e:	480e      	ldr	r0, [pc, #56]	; (80009b8 <receiveData+0xa4>)
 8000980:	f004 f934 	bl	8004bec <iprintf>
    printf("   ");
 8000984:	480a      	ldr	r0, [pc, #40]	; (80009b0 <receiveData+0x9c>)
 8000986:	f004 f931 	bl	8004bec <iprintf>
    printf("\n\r");
 800098a:	480c      	ldr	r0, [pc, #48]	; (80009bc <receiveData+0xa8>)
 800098c:	f004 f92e 	bl	8004bec <iprintf>
    printf("\n\r");
 8000990:	480a      	ldr	r0, [pc, #40]	; (80009bc <receiveData+0xa8>)
 8000992:	f004 f92b 	bl	8004bec <iprintf>
}
 8000996:	bf00      	nop
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	080059cc 	.word	0x080059cc
 80009a4:	200004a0 	.word	0x200004a0
 80009a8:	20000480 	.word	0x20000480
 80009ac:	080059d4 	.word	0x080059d4
 80009b0:	080059d8 	.word	0x080059d8
 80009b4:	080059dc 	.word	0x080059dc
 80009b8:	080059e4 	.word	0x080059e4
 80009bc:	080059e8 	.word	0x080059e8

080009c0 <user_notify>:

void user_notify(void *pData)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
                hci_uart_pckt *hci_pckt = pData;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	617b      	str	r3, [r7, #20]

                hci_event_pckt *event_pckt = (hci_event_pckt *)hci_pckt->data;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	3301      	adds	r3, #1
 80009d0:	613b      	str	r3, [r7, #16]

               if(hci_pckt->type != HCI_EVENT_PKT)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	d11c      	bne.n	8000a14 <user_notify+0x54>
                             return;

               switch(event_pckt->evt)
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b3e      	cmp	r3, #62	; 0x3e
 80009e0:	d119      	bne.n	8000a16 <user_notify+0x56>
              {
                             case EVT_LE_META_EVENT:
                             {
                                           evt_le_meta_event *evt = (void *)event_pckt->data;
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	3302      	adds	r3, #2
 80009e6:	60fb      	str	r3, [r7, #12]
                                           switch(evt->subevent)
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d000      	beq.n	80009f2 <user_notify+0x32>
                                        receiveData(pr->bdaddr,pr->data_RSSI, pr->data_length);
                                 }
                                 break;
                                           }
                                           }
                             break;
 80009f0:	e011      	b.n	8000a16 <user_notify+0x56>
                                        le_advertising_info *pr = (le_advertising_info *)(((uint8_t*)evt->data)+1); /* evt->data[0] is number of reports (On BlueNRG-MS is always 1) */
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3301      	adds	r3, #1
 80009f6:	3301      	adds	r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
                                        receiveData(pr->bdaddr,pr->data_RSSI, pr->data_length);
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	1c98      	adds	r0, r3, #2
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	f103 0109 	add.w	r1, r3, #9
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	7a1b      	ldrb	r3, [r3, #8]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	f7ff ff83 	bl	8000914 <receiveData>
                                 break;
 8000a0e:	bf00      	nop
                             break;
 8000a10:	bf00      	nop
 8000a12:	e000      	b.n	8000a16 <user_notify+0x56>
                             return;
 8000a14:	bf00      	nop

              }
}
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <BSP_SPI1_Init+0x54>)
 8000a28:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <BSP_SPI1_Init+0x58>)
 8000a2a:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <BSP_SPI1_Init+0x5c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	1c5a      	adds	r2, r3, #1
 8000a32:	4911      	ldr	r1, [pc, #68]	; (8000a78 <BSP_SPI1_Init+0x5c>)
 8000a34:	600a      	str	r2, [r1, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d114      	bne.n	8000a64 <BSP_SPI1_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000a3a:	480d      	ldr	r0, [pc, #52]	; (8000a70 <BSP_SPI1_Init+0x54>)
 8000a3c:	f002 fdd2 	bl	80035e4 <HAL_SPI_GetState>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d10e      	bne.n	8000a64 <BSP_SPI1_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 8000a46:	480a      	ldr	r0, [pc, #40]	; (8000a70 <BSP_SPI1_Init+0x54>)
 8000a48:	f000 f882 	bl	8000b50 <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d108      	bne.n	8000a64 <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000a52:	4807      	ldr	r0, [pc, #28]	; (8000a70 <BSP_SPI1_Init+0x54>)
 8000a54:	f000 f83a 	bl	8000acc <MX_SPI1_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d002      	beq.n	8000a64 <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 8000a5e:	f06f 0307 	mvn.w	r3, #7
 8000a62:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200004c0 	.word	0x200004c0
 8000a74:	40013000 	.word	0x40013000
 8000a78:	2000018c 	.word	0x2000018c

08000a7c <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af02      	add	r7, sp, #8
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	4613      	mov	r3, r2
 8000a88:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000a8e:	88fa      	ldrh	r2, [r7, #6]
 8000a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	4613      	mov	r3, r2
 8000a98:	68ba      	ldr	r2, [r7, #8]
 8000a9a:	68f9      	ldr	r1, [r7, #12]
 8000a9c:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <BSP_SPI1_SendRecv+0x3c>)
 8000a9e:	f002 fb8e 	bl	80031be <HAL_SPI_TransmitReceive>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000aa8:	f06f 0305 	mvn.w	r3, #5
 8000aac:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8000aae:	697b      	ldr	r3, [r7, #20]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200004c0 	.word	0x200004c0

08000abc <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000ac0:	f000 fb98 	bl	80011f4 <HAL_GetTick>
 8000ac4:	4603      	mov	r3, r0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <MX_SPI1_Init+0x80>)
 8000adc:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ae4:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_4BIT;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000af2:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b06:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2207      	movs	r2, #7
 8000b24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2208      	movs	r2, #8
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f002 fa96 	bl	8003064 <HAL_SPI_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40013000 	.word	0x40013000

08000b50 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b58:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <SPI1_MspInit+0xa8>)
 8000b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5c:	4a26      	ldr	r2, [pc, #152]	; (8000bf8 <SPI1_MspInit+0xa8>)
 8000b5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b62:	6613      	str	r3, [r2, #96]	; 0x60
 8000b64:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <SPI1_MspInit+0xa8>)
 8000b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <SPI1_MspInit+0xa8>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b74:	4a20      	ldr	r2, [pc, #128]	; (8000bf8 <SPI1_MspInit+0xa8>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <SPI1_MspInit+0xa8>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000b88:	2320      	movs	r3, #32
 8000b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000b98:	2305      	movs	r3, #5
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba6:	f000 fc93 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000baa:	2340      	movs	r3, #64	; 0x40
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000bba:	2305      	movs	r3, #5
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc8:	f000 fc82 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000bcc:	2380      	movs	r3, #128	; 0x80
 8000bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000bdc:	2305      	movs	r3, #5
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bea:	f000 fc71 	bl	80014d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000

08000bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c00:	f000 fa8f 	bl	8001122 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c04:	f000 f809 	bl	8000c1a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c08:	f000 f89c 	bl	8000d44 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c0c:	f000 f86a 	bl	8000ce4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_BlueNRG_MS_Init();
 8000c10:	f7ff fe2e 	bl	8000870 <MX_BlueNRG_MS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_BlueNRG_MS_Process();
 8000c14:	f7ff fe6c 	bl	80008f0 <MX_BlueNRG_MS_Process>
 8000c18:	e7fc      	b.n	8000c14 <main+0x18>

08000c1a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b0b8      	sub	sp, #224	; 0xe0
 8000c1e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c24:	2244      	movs	r2, #68	; 0x44
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f003 ffd6 	bl	8004bda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c3e:	463b      	mov	r3, r7
 8000c40:	2288      	movs	r2, #136	; 0x88
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 ffc8 	bl	8004bda <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c4a:	2310      	movs	r3, #16
 8000c4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c50:	2301      	movs	r3, #1
 8000c52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000c5c:	23b0      	movs	r3, #176	; 0xb0
 8000c5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 ff5f 	bl	8001b30 <HAL_RCC_OscConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c78:	f000 f8b2 	bl	8000de0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c9a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 fb2b 	bl	80022fc <HAL_RCC_ClockConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cac:	f000 f898 	bl	8000de0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fd22 	bl	8002704 <HAL_RCCEx_PeriphCLKConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000cc6:	f000 f88b 	bl	8000de0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cce:	f000 fed9 	bl	8001a84 <HAL_PWREx_ControlVoltageScaling>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cd8:	f000 f882 	bl	8000de0 <Error_Handler>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	37e0      	adds	r7, #224	; 0xe0
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_USART1_UART_Init+0x58>)
 8000cea:	4a15      	ldr	r2, [pc, #84]	; (8000d40 <MX_USART1_UART_Init+0x5c>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_USART1_UART_Init+0x58>)
 8000cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_USART1_UART_Init+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_USART1_UART_Init+0x58>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_USART1_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_USART1_UART_Init+0x58>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_USART1_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_USART1_UART_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_USART1_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_USART1_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_USART1_UART_Init+0x58>)
 8000d28:	f002 fdc6 	bl	80038b8 <HAL_UART_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d32:	f000 f855 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000524 	.word	0x20000524
 8000d40:	40013800 	.word	0x40013800

08000d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <MX_GPIO_Init+0x90>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <MX_GPIO_Init+0x90>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <MX_GPIO_Init+0x90>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_GPIO_Init+0x90>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <MX_GPIO_Init+0x90>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_GPIO_Init+0x90>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2130      	movs	r1, #48	; 0x30
 8000d8e:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <MX_GPIO_Init+0x94>)
 8000d90:	f000 fe52 	bl	8001a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d94:	2301      	movs	r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d98:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_GPIO_Init+0x98>)
 8000d9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	4619      	mov	r1, r3
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f000 fb91 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dae:	2330      	movs	r3, #48	; 0x30
 8000db0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_GPIO_Init+0x94>)
 8000dc6:	f000 fb83 	bl	80014d0 <HAL_GPIO_Init>

}
 8000dca:	bf00      	nop
 8000dcc:	3720      	adds	r7, #32
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	48000800 	.word	0x48000800
 8000ddc:	10110000 	.word	0x10110000

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_MspInit+0x44>)
 8000df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_MspInit+0x44>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6613      	str	r3, [r2, #96]	; 0x60
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <HAL_MspInit+0x44>)
 8000e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_MspInit+0x44>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <HAL_MspInit+0x44>)
 8000e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e18:	6593      	str	r3, [r2, #88]	; 0x58
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_MspInit+0x44>)
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000

08000e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <HAL_UART_MspInit+0x80>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d129      	bne.n	8000eae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_UART_MspInit+0x84>)
 8000e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5e:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <HAL_UART_MspInit+0x84>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e64:	6613      	str	r3, [r2, #96]	; 0x60
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_UART_MspInit+0x84>)
 8000e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_UART_MspInit+0x84>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <HAL_UART_MspInit+0x84>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <HAL_UART_MspInit+0x84>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eaa:	f000 fb11 	bl	80014d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40013800 	.word	0x40013800
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 f95a 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	e00a      	b.n	8000f44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f2e:	f3af 8000 	nop.w
 8000f32:	4601      	mov	r1, r0
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	60ba      	str	r2, [r7, #8]
 8000f3a:	b2ca      	uxtb	r2, r1
 8000f3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbf0      	blt.n	8000f2e <_read+0x12>
	}

return len;
 8000f4c:	687b      	ldr	r3, [r7, #4]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	e009      	b.n	8000f7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	60ba      	str	r2, [r7, #8]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dbf1      	blt.n	8000f68 <_write+0x12>
	}
	return len;
 8000f84:	687b      	ldr	r3, [r7, #4]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <_close>:

int _close(int file)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
	return -1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb6:	605a      	str	r2, [r3, #4]
	return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <_isatty>:

int _isatty(int file)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	return 1;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
	return 0;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <_sbrk+0x5c>)
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <_sbrk+0x60>)
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <_sbrk+0x64>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <_sbrk+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	429a      	cmp	r2, r3
 8001026:	d207      	bcs.n	8001038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001028:	f003 fda2 	bl	8004b70 <__errno>
 800102c:	4602      	mov	r2, r0
 800102e:	230c      	movs	r3, #12
 8001030:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001036:	e009      	b.n	800104c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <_sbrk+0x64>)
 8001048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20018000 	.word	0x20018000
 8001058:	00000400 	.word	0x00000400
 800105c:	20000190 	.word	0x20000190
 8001060:	200005c0 	.word	0x200005c0

08001064 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <SystemInit+0x64>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106e:	4a16      	ldr	r2, [pc, #88]	; (80010c8 <SystemInit+0x64>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <SystemInit+0x68>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a13      	ldr	r2, [pc, #76]	; (80010cc <SystemInit+0x68>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <SystemInit+0x68>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <SystemInit+0x68>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <SystemInit+0x68>)
 8001090:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001094:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001098:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <SystemInit+0x68>)
 800109c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <SystemInit+0x68>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a09      	ldr	r2, [pc, #36]	; (80010cc <SystemInit+0x68>)
 80010a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <SystemInit+0x68>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SystemInit+0x64>)
 80010b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ba:	609a      	str	r2, [r3, #8]
#endif
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00
 80010cc:	40021000 	.word	0x40021000

080010d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001108 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010d4:	f7ff ffc6 	bl	8001064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010da:	e003      	b.n	80010e4 <LoopCopyDataInit>

080010dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010e2:	3104      	adds	r1, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010e4:	480a      	ldr	r0, [pc, #40]	; (8001110 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010ec:	d3f6      	bcc.n	80010dc <CopyDataInit>
	ldr	r2, =_sbss
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010f0:	e002      	b.n	80010f8 <LoopFillZerobss>

080010f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010f4:	f842 3b04 	str.w	r3, [r2], #4

080010f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <LoopForever+0x16>)
	cmp	r2, r3
 80010fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010fc:	d3f9      	bcc.n	80010f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010fe:	f003 fd3d 	bl	8004b7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001102:	f7ff fd7b 	bl	8000bfc <main>

08001106 <LoopForever>:

LoopForever:
    b LoopForever
 8001106:	e7fe      	b.n	8001106 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001108:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800110c:	08005adc 	.word	0x08005adc
	ldr	r0, =_sdata
 8001110:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001114:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001118:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800111c:	200005bc 	.word	0x200005bc

08001120 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC1_2_IRQHandler>

08001122 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f95f 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f80e 	bl	8001154 <HAL_InitTick>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	e001      	b.n	8001148 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001144:	f7ff fe54 	bl	8000df0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001148:	79fb      	ldrb	r3, [r7, #7]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_InitTick+0x6c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d023      	beq.n	80011b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <HAL_InitTick+0x70>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_InitTick+0x6c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	fbb3 f3f1 	udiv	r3, r3, r1
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f000 f96b 	bl	800145a <HAL_SYSTICK_Config>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10f      	bne.n	80011aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b0f      	cmp	r3, #15
 800118e:	d809      	bhi.n	80011a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001190:	2200      	movs	r2, #0
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001198:	f000 f935 	bl	8001406 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800119c:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_InitTick+0x74>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e007      	b.n	80011b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e004      	b.n	80011b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	73fb      	strb	r3, [r7, #15]
 80011ae:	e001      	b.n	80011b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000004 	.word	0x20000004

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000008 	.word	0x20000008
 80011f0:	200005a4 	.word	0x200005a4

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	200005a4 	.word	0x200005a4

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff ffee 	bl	80011f4 <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001224:	d005      	beq.n	8001232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_Delay+0x40>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001232:	bf00      	nop
 8001234:	f7ff ffde 	bl	80011f4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8f7      	bhi.n	8001234 <HAL_Delay+0x28>
  {
  }
}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000008 	.word	0x20000008

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4907      	ldr	r1, [pc, #28]	; (80012ec <__NVIC_EnableIRQ+0x38>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff29 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001418:	f7ff ff3e 	bl	8001298 <__NVIC_GetPriorityGrouping>
 800141c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff8e 	bl	8001344 <NVIC_EncodePriority>
 8001428:	4602      	mov	r2, r0
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <__NVIC_SetPriority>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff31 	bl	80012b4 <__NVIC_EnableIRQ>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffa2 	bl	80013ac <SysTick_Config>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001472:	b480      	push	{r7}
 8001474:	b087      	sub	sp, #28
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	460b      	mov	r3, r1
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001484:	7afb      	ldrb	r3, [r7, #11]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d103      	bne.n	8001492 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	605a      	str	r2, [r3, #4]
      break;
 8001490:	e002      	b.n	8001498 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	75fb      	strb	r3, [r7, #23]
      break;
 8001496:	bf00      	nop
  }

  return status;
 8001498:	7dfb      	ldrb	r3, [r7, #23]
}
 800149a:	4618      	mov	r0, r3
 800149c:	371c      	adds	r7, #28
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e003      	b.n	80014c2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80014c0:	2300      	movs	r3, #0
  }
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014de:	e17f      	b.n	80017e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	2101      	movs	r1, #1
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	4013      	ands	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 8171 	beq.w	80017da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d00b      	beq.n	8001518 <HAL_GPIO_Init+0x48>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d007      	beq.n	8001518 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800150c:	2b11      	cmp	r3, #17
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b12      	cmp	r3, #18
 8001516:	d130      	bne.n	800157a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800154e:	2201      	movs	r2, #1
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	f003 0201 	and.w	r2, r3, #1
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b03      	cmp	r3, #3
 8001584:	d118      	bne.n	80015b8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800158c:	2201      	movs	r2, #1
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	08db      	lsrs	r3, r3, #3
 80015a2:	f003 0201 	and.w	r2, r3, #1
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x128>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b12      	cmp	r3, #18
 80015f6:	d123      	bne.n	8001640 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	08da      	lsrs	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	220f      	movs	r2, #15
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	08da      	lsrs	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	6939      	ldr	r1, [r7, #16]
 800163c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0203 	and.w	r2, r3, #3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80ac 	beq.w	80017da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	4b5e      	ldr	r3, [pc, #376]	; (80017fc <HAL_GPIO_Init+0x32c>)
 8001684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001686:	4a5d      	ldr	r2, [pc, #372]	; (80017fc <HAL_GPIO_Init+0x32c>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6613      	str	r3, [r2, #96]	; 0x60
 800168e:	4b5b      	ldr	r3, [pc, #364]	; (80017fc <HAL_GPIO_Init+0x32c>)
 8001690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800169a:	4a59      	ldr	r2, [pc, #356]	; (8001800 <HAL_GPIO_Init+0x330>)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	220f      	movs	r2, #15
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016c4:	d025      	beq.n	8001712 <HAL_GPIO_Init+0x242>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4e      	ldr	r2, [pc, #312]	; (8001804 <HAL_GPIO_Init+0x334>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d01f      	beq.n	800170e <HAL_GPIO_Init+0x23e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4d      	ldr	r2, [pc, #308]	; (8001808 <HAL_GPIO_Init+0x338>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d019      	beq.n	800170a <HAL_GPIO_Init+0x23a>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4c      	ldr	r2, [pc, #304]	; (800180c <HAL_GPIO_Init+0x33c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d013      	beq.n	8001706 <HAL_GPIO_Init+0x236>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4b      	ldr	r2, [pc, #300]	; (8001810 <HAL_GPIO_Init+0x340>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d00d      	beq.n	8001702 <HAL_GPIO_Init+0x232>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4a      	ldr	r2, [pc, #296]	; (8001814 <HAL_GPIO_Init+0x344>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d007      	beq.n	80016fe <HAL_GPIO_Init+0x22e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a49      	ldr	r2, [pc, #292]	; (8001818 <HAL_GPIO_Init+0x348>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d101      	bne.n	80016fa <HAL_GPIO_Init+0x22a>
 80016f6:	2306      	movs	r3, #6
 80016f8:	e00c      	b.n	8001714 <HAL_GPIO_Init+0x244>
 80016fa:	2307      	movs	r3, #7
 80016fc:	e00a      	b.n	8001714 <HAL_GPIO_Init+0x244>
 80016fe:	2305      	movs	r3, #5
 8001700:	e008      	b.n	8001714 <HAL_GPIO_Init+0x244>
 8001702:	2304      	movs	r3, #4
 8001704:	e006      	b.n	8001714 <HAL_GPIO_Init+0x244>
 8001706:	2303      	movs	r3, #3
 8001708:	e004      	b.n	8001714 <HAL_GPIO_Init+0x244>
 800170a:	2302      	movs	r3, #2
 800170c:	e002      	b.n	8001714 <HAL_GPIO_Init+0x244>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <HAL_GPIO_Init+0x244>
 8001712:	2300      	movs	r3, #0
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	f002 0203 	and.w	r2, r2, #3
 800171a:	0092      	lsls	r2, r2, #2
 800171c:	4093      	lsls	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001724:	4936      	ldr	r1, [pc, #216]	; (8001800 <HAL_GPIO_Init+0x330>)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001732:	4b3a      	ldr	r3, [pc, #232]	; (800181c <HAL_GPIO_Init+0x34c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	43db      	mvns	r3, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001756:	4a31      	ldr	r2, [pc, #196]	; (800181c <HAL_GPIO_Init+0x34c>)
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800175c:	4b2f      	ldr	r3, [pc, #188]	; (800181c <HAL_GPIO_Init+0x34c>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	43db      	mvns	r3, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001780:	4a26      	ldr	r2, [pc, #152]	; (800181c <HAL_GPIO_Init+0x34c>)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001786:	4b25      	ldr	r3, [pc, #148]	; (800181c <HAL_GPIO_Init+0x34c>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	43db      	mvns	r3, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017aa:	4a1c      	ldr	r2, [pc, #112]	; (800181c <HAL_GPIO_Init+0x34c>)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017b0:	4b1a      	ldr	r3, [pc, #104]	; (800181c <HAL_GPIO_Init+0x34c>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017d4:	4a11      	ldr	r2, [pc, #68]	; (800181c <HAL_GPIO_Init+0x34c>)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f47f ae78 	bne.w	80014e0 <HAL_GPIO_Init+0x10>
  }
}
 80017f0:	bf00      	nop
 80017f2:	371c      	adds	r7, #28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010000 	.word	0x40010000
 8001804:	48000400 	.word	0x48000400
 8001808:	48000800 	.word	0x48000800
 800180c:	48000c00 	.word	0x48000c00
 8001810:	48001000 	.word	0x48001000
 8001814:	48001400 	.word	0x48001400
 8001818:	48001800 	.word	0x48001800
 800181c:	40010400 	.word	0x40010400

08001820 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800182e:	e0cd      	b.n	80019cc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001830:	2201      	movs	r2, #1
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80c0 	beq.w	80019c6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001846:	4a68      	ldr	r2, [pc, #416]	; (80019e8 <HAL_GPIO_DeInit+0x1c8>)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	089b      	lsrs	r3, r3, #2
 800184c:	3302      	adds	r3, #2
 800184e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001852:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	220f      	movs	r2, #15
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	4013      	ands	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800186e:	d025      	beq.n	80018bc <HAL_GPIO_DeInit+0x9c>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a5e      	ldr	r2, [pc, #376]	; (80019ec <HAL_GPIO_DeInit+0x1cc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d01f      	beq.n	80018b8 <HAL_GPIO_DeInit+0x98>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a5d      	ldr	r2, [pc, #372]	; (80019f0 <HAL_GPIO_DeInit+0x1d0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d019      	beq.n	80018b4 <HAL_GPIO_DeInit+0x94>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a5c      	ldr	r2, [pc, #368]	; (80019f4 <HAL_GPIO_DeInit+0x1d4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d013      	beq.n	80018b0 <HAL_GPIO_DeInit+0x90>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a5b      	ldr	r2, [pc, #364]	; (80019f8 <HAL_GPIO_DeInit+0x1d8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d00d      	beq.n	80018ac <HAL_GPIO_DeInit+0x8c>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a5a      	ldr	r2, [pc, #360]	; (80019fc <HAL_GPIO_DeInit+0x1dc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d007      	beq.n	80018a8 <HAL_GPIO_DeInit+0x88>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a59      	ldr	r2, [pc, #356]	; (8001a00 <HAL_GPIO_DeInit+0x1e0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d101      	bne.n	80018a4 <HAL_GPIO_DeInit+0x84>
 80018a0:	2306      	movs	r3, #6
 80018a2:	e00c      	b.n	80018be <HAL_GPIO_DeInit+0x9e>
 80018a4:	2307      	movs	r3, #7
 80018a6:	e00a      	b.n	80018be <HAL_GPIO_DeInit+0x9e>
 80018a8:	2305      	movs	r3, #5
 80018aa:	e008      	b.n	80018be <HAL_GPIO_DeInit+0x9e>
 80018ac:	2304      	movs	r3, #4
 80018ae:	e006      	b.n	80018be <HAL_GPIO_DeInit+0x9e>
 80018b0:	2303      	movs	r3, #3
 80018b2:	e004      	b.n	80018be <HAL_GPIO_DeInit+0x9e>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e002      	b.n	80018be <HAL_GPIO_DeInit+0x9e>
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <HAL_GPIO_DeInit+0x9e>
 80018bc:	2300      	movs	r3, #0
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	f002 0203 	and.w	r2, r2, #3
 80018c4:	0092      	lsls	r2, r2, #2
 80018c6:	4093      	lsls	r3, r2
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d132      	bne.n	8001934 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80018ce:	4b4d      	ldr	r3, [pc, #308]	; (8001a04 <HAL_GPIO_DeInit+0x1e4>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	494b      	ldr	r1, [pc, #300]	; (8001a04 <HAL_GPIO_DeInit+0x1e4>)
 80018d8:	4013      	ands	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80018dc:	4b49      	ldr	r3, [pc, #292]	; (8001a04 <HAL_GPIO_DeInit+0x1e4>)
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	4947      	ldr	r1, [pc, #284]	; (8001a04 <HAL_GPIO_DeInit+0x1e4>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80018ea:	4b46      	ldr	r3, [pc, #280]	; (8001a04 <HAL_GPIO_DeInit+0x1e4>)
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	4944      	ldr	r1, [pc, #272]	; (8001a04 <HAL_GPIO_DeInit+0x1e4>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80018f8:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <HAL_GPIO_DeInit+0x1e4>)
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	43db      	mvns	r3, r3
 8001900:	4940      	ldr	r1, [pc, #256]	; (8001a04 <HAL_GPIO_DeInit+0x1e4>)
 8001902:	4013      	ands	r3, r2
 8001904:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001916:	4a34      	ldr	r2, [pc, #208]	; (80019e8 <HAL_GPIO_DeInit+0x1c8>)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	3302      	adds	r3, #2
 800191e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	43da      	mvns	r2, r3
 8001926:	4830      	ldr	r0, [pc, #192]	; (80019e8 <HAL_GPIO_DeInit+0x1c8>)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	400a      	ands	r2, r1
 800192e:	3302      	adds	r3, #2
 8001930:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2103      	movs	r1, #3
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	08da      	lsrs	r2, r3, #3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3208      	adds	r2, #8
 8001950:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	220f      	movs	r2, #15
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	08d2      	lsrs	r2, r2, #3
 8001968:	4019      	ands	r1, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3208      	adds	r2, #8
 800196e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2103      	movs	r1, #3
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	401a      	ands	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	2101      	movs	r1, #1
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2103      	movs	r1, #3
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	401a      	ands	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b6:	2101      	movs	r1, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	401a      	ands	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3301      	adds	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f47f af2b 	bne.w	8001830 <HAL_GPIO_DeInit+0x10>
  }
}
 80019da:	bf00      	nop
 80019dc:	371c      	adds	r7, #28
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40010000 	.word	0x40010000
 80019ec:	48000400 	.word	0x48000400
 80019f0:	48000800 	.word	0x48000800
 80019f4:	48000c00 	.word	0x48000c00
 80019f8:	48001000 	.word	0x48001000
 80019fc:	48001400 	.word	0x48001400
 8001a00:	48001800 	.word	0x48001800
 8001a04:	40010400 	.word	0x40010400

08001a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	887b      	ldrh	r3, [r7, #2]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	e001      	b.n	8001a2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
 8001a44:	4613      	mov	r3, r2
 8001a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a48:	787b      	ldrb	r3, [r7, #1]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a4e:	887a      	ldrh	r2, [r7, #2]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a54:	e002      	b.n	8001a5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40007000 	.word	0x40007000

08001a84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a92:	d130      	bne.n	8001af6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a94:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa0:	d038      	beq.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aaa:	4a1e      	ldr	r2, [pc, #120]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2232      	movs	r2, #50	; 0x32
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	4a1b      	ldr	r2, [pc, #108]	; (8001b2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	0c9b      	lsrs	r3, r3, #18
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ac8:	e002      	b.n	8001ad0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001adc:	d102      	bne.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f2      	bne.n	8001aca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af0:	d110      	bne.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e00f      	b.n	8001b16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b02:	d007      	beq.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b0c:	4a05      	ldr	r2, [pc, #20]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40007000 	.word	0x40007000
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	431bde83 	.word	0x431bde83

08001b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e3d4      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b42:	4ba1      	ldr	r3, [pc, #644]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b4c:	4b9e      	ldr	r3, [pc, #632]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 80e4 	beq.w	8001d2c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <HAL_RCC_OscConfig+0x4a>
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	2b0c      	cmp	r3, #12
 8001b6e:	f040 808b 	bne.w	8001c88 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	f040 8087 	bne.w	8001c88 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b7a:	4b93      	ldr	r3, [pc, #588]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <HAL_RCC_OscConfig+0x62>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e3ac      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1a      	ldr	r2, [r3, #32]
 8001b96:	4b8c      	ldr	r3, [pc, #560]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <HAL_RCC_OscConfig+0x7c>
 8001ba2:	4b89      	ldr	r3, [pc, #548]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001baa:	e005      	b.n	8001bb8 <HAL_RCC_OscConfig+0x88>
 8001bac:	4b86      	ldr	r3, [pc, #536]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d223      	bcs.n	8001c04 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 fd3f 	bl	8002644 <RCC_SetFlashLatencyFromMSIRange>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e38d      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bd0:	4b7d      	ldr	r3, [pc, #500]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a7c      	ldr	r2, [pc, #496]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001bd6:	f043 0308 	orr.w	r3, r3, #8
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	4b7a      	ldr	r3, [pc, #488]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	4977      	ldr	r1, [pc, #476]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bee:	4b76      	ldr	r3, [pc, #472]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	4972      	ldr	r1, [pc, #456]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	604b      	str	r3, [r1, #4]
 8001c02:	e025      	b.n	8001c50 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c04:	4b70      	ldr	r3, [pc, #448]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a6f      	ldr	r2, [pc, #444]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001c0a:	f043 0308 	orr.w	r3, r3, #8
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b6d      	ldr	r3, [pc, #436]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	496a      	ldr	r1, [pc, #424]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c22:	4b69      	ldr	r3, [pc, #420]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	4965      	ldr	r1, [pc, #404]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 fcff 	bl	8002644 <RCC_SetFlashLatencyFromMSIRange>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e34d      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c50:	f000 fc36 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 8001c54:	4601      	mov	r1, r0
 8001c56:	4b5c      	ldr	r3, [pc, #368]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	091b      	lsrs	r3, r3, #4
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	4a5a      	ldr	r2, [pc, #360]	; (8001dcc <HAL_RCC_OscConfig+0x29c>)
 8001c62:	5cd3      	ldrb	r3, [r2, r3]
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	fa21 f303 	lsr.w	r3, r1, r3
 8001c6c:	4a58      	ldr	r2, [pc, #352]	; (8001dd0 <HAL_RCC_OscConfig+0x2a0>)
 8001c6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c70:	4b58      	ldr	r3, [pc, #352]	; (8001dd4 <HAL_RCC_OscConfig+0x2a4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fa6d 	bl	8001154 <HAL_InitTick>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d052      	beq.n	8001d2a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	e331      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d032      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c90:	4b4d      	ldr	r3, [pc, #308]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a4c      	ldr	r2, [pc, #304]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff faaa 	bl	80011f4 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ca4:	f7ff faa6 	bl	80011f4 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e31a      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cb6:	4b44      	ldr	r3, [pc, #272]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc2:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a40      	ldr	r2, [pc, #256]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001cc8:	f043 0308 	orr.w	r3, r3, #8
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b3e      	ldr	r3, [pc, #248]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	493b      	ldr	r1, [pc, #236]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce0:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	4936      	ldr	r1, [pc, #216]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
 8001cf4:	e01a      	b.n	8001d2c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cf6:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a33      	ldr	r2, [pc, #204]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d02:	f7ff fa77 	bl	80011f4 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fa73 	bl	80011f4 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e2e7      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x1da>
 8001d28:	e000      	b.n	8001d2c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d074      	beq.n	8001e22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d005      	beq.n	8001d4a <HAL_RCC_OscConfig+0x21a>
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b0c      	cmp	r3, #12
 8001d42:	d10e      	bne.n	8001d62 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d10b      	bne.n	8001d62 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d064      	beq.n	8001e20 <HAL_RCC_OscConfig+0x2f0>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d160      	bne.n	8001e20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e2c4      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x24a>
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	e01d      	b.n	8001db6 <HAL_RCC_OscConfig+0x286>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d82:	d10c      	bne.n	8001d9e <HAL_RCC_OscConfig+0x26e>
 8001d84:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0f      	ldr	r2, [pc, #60]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001d8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0c      	ldr	r2, [pc, #48]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	e00b      	b.n	8001db6 <HAL_RCC_OscConfig+0x286>
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a06      	ldr	r2, [pc, #24]	; (8001dc8 <HAL_RCC_OscConfig+0x298>)
 8001db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d01c      	beq.n	8001df8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7ff fa19 	bl	80011f4 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dc4:	e011      	b.n	8001dea <HAL_RCC_OscConfig+0x2ba>
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	080059ec 	.word	0x080059ec
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff fa0c 	bl	80011f4 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e280      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dea:	4baf      	ldr	r3, [pc, #700]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x2a8>
 8001df6:	e014      	b.n	8001e22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff f9fc 	bl	80011f4 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff f9f8 	bl	80011f4 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e26c      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e12:	4ba5      	ldr	r3, [pc, #660]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x2d0>
 8001e1e:	e000      	b.n	8001e22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d060      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_OscConfig+0x310>
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2b0c      	cmp	r3, #12
 8001e38:	d119      	bne.n	8001e6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d116      	bne.n	8001e6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e40:	4b99      	ldr	r3, [pc, #612]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_OscConfig+0x328>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e249      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e58:	4b93      	ldr	r3, [pc, #588]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	061b      	lsls	r3, r3, #24
 8001e66:	4990      	ldr	r1, [pc, #576]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e6c:	e040      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d023      	beq.n	8001ebe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e76:	4b8c      	ldr	r3, [pc, #560]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a8b      	ldr	r2, [pc, #556]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e82:	f7ff f9b7 	bl	80011f4 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8a:	f7ff f9b3 	bl	80011f4 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e227      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e9c:	4b82      	ldr	r3, [pc, #520]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea8:	4b7f      	ldr	r3, [pc, #508]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	061b      	lsls	r3, r3, #24
 8001eb6:	497c      	ldr	r1, [pc, #496]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
 8001ebc:	e018      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ebe:	4b7a      	ldr	r3, [pc, #488]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a79      	ldr	r2, [pc, #484]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eca:	f7ff f993 	bl	80011f4 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed2:	f7ff f98f 	bl	80011f4 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e203      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ee4:	4b70      	ldr	r3, [pc, #448]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f0      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d03c      	beq.n	8001f76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01c      	beq.n	8001f3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f04:	4b68      	ldr	r3, [pc, #416]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0a:	4a67      	ldr	r2, [pc, #412]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f14:	f7ff f96e 	bl	80011f4 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1c:	f7ff f96a 	bl	80011f4 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e1de      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f2e:	4b5e      	ldr	r3, [pc, #376]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ef      	beq.n	8001f1c <HAL_RCC_OscConfig+0x3ec>
 8001f3c:	e01b      	b.n	8001f76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f3e:	4b5a      	ldr	r3, [pc, #360]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f44:	4a58      	ldr	r2, [pc, #352]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001f46:	f023 0301 	bic.w	r3, r3, #1
 8001f4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4e:	f7ff f951 	bl	80011f4 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f56:	f7ff f94d 	bl	80011f4 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e1c1      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f68:	4b4f      	ldr	r3, [pc, #316]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ef      	bne.n	8001f56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 80a6 	beq.w	80020d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f84:	2300      	movs	r3, #0
 8001f86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f88:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10d      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	4b44      	ldr	r3, [pc, #272]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	4a43      	ldr	r2, [pc, #268]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa0:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fac:	2301      	movs	r3, #1
 8001fae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb0:	4b3e      	ldr	r3, [pc, #248]	; (80020ac <HAL_RCC_OscConfig+0x57c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d118      	bne.n	8001fee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fbc:	4b3b      	ldr	r3, [pc, #236]	; (80020ac <HAL_RCC_OscConfig+0x57c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a3a      	ldr	r2, [pc, #232]	; (80020ac <HAL_RCC_OscConfig+0x57c>)
 8001fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc8:	f7ff f914 	bl	80011f4 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd0:	f7ff f910 	bl	80011f4 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e184      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe2:	4b32      	ldr	r3, [pc, #200]	; (80020ac <HAL_RCC_OscConfig+0x57c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d108      	bne.n	8002008 <HAL_RCC_OscConfig+0x4d8>
 8001ff6:	4b2c      	ldr	r3, [pc, #176]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffc:	4a2a      	ldr	r2, [pc, #168]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002006:	e024      	b.n	8002052 <HAL_RCC_OscConfig+0x522>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b05      	cmp	r3, #5
 800200e:	d110      	bne.n	8002032 <HAL_RCC_OscConfig+0x502>
 8002010:	4b25      	ldr	r3, [pc, #148]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	4a24      	ldr	r2, [pc, #144]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8002018:	f043 0304 	orr.w	r3, r3, #4
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002020:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	4a20      	ldr	r2, [pc, #128]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002030:	e00f      	b.n	8002052 <HAL_RCC_OscConfig+0x522>
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8002034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002038:	4a1b      	ldr	r2, [pc, #108]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002042:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 8002044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002048:	4a17      	ldr	r2, [pc, #92]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 800204a:	f023 0304 	bic.w	r3, r3, #4
 800204e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d016      	beq.n	8002088 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205a:	f7ff f8cb 	bl	80011f4 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7ff f8c7 	bl	80011f4 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e139      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCC_OscConfig+0x578>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0ed      	beq.n	8002062 <HAL_RCC_OscConfig+0x532>
 8002086:	e01a      	b.n	80020be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002088:	f7ff f8b4 	bl	80011f4 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800208e:	e00f      	b.n	80020b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002090:	f7ff f8b0 	bl	80011f4 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d906      	bls.n	80020b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e122      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020b0:	4b90      	ldr	r3, [pc, #576]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 80020b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1e8      	bne.n	8002090 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020be:	7ffb      	ldrb	r3, [r7, #31]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d105      	bne.n	80020d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c4:	4b8b      	ldr	r3, [pc, #556]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	4a8a      	ldr	r2, [pc, #552]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 80020ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 8108 	beq.w	80022ea <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	2b02      	cmp	r3, #2
 80020e0:	f040 80d0 	bne.w	8002284 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020e4:	4b83      	ldr	r3, [pc, #524]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f003 0203 	and.w	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d130      	bne.n	800215a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	3b01      	subs	r3, #1
 8002104:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d127      	bne.n	800215a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002114:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d11f      	bne.n	800215a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002124:	2a07      	cmp	r2, #7
 8002126:	bf14      	ite	ne
 8002128:	2201      	movne	r2, #1
 800212a:	2200      	moveq	r2, #0
 800212c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800212e:	4293      	cmp	r3, r2
 8002130:	d113      	bne.n	800215a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	3b01      	subs	r3, #1
 8002140:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d109      	bne.n	800215a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	3b01      	subs	r3, #1
 8002154:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d06e      	beq.n	8002238 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2b0c      	cmp	r3, #12
 800215e:	d069      	beq.n	8002234 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002160:	4b64      	ldr	r3, [pc, #400]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d105      	bne.n	8002178 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800216c:	4b61      	ldr	r3, [pc, #388]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0b7      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800217c:	4b5d      	ldr	r3, [pc, #372]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a5c      	ldr	r2, [pc, #368]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 8002182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002186:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002188:	f7ff f834 	bl	80011f4 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002190:	f7ff f830 	bl	80011f4 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e0a4      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a2:	4b54      	ldr	r3, [pc, #336]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ae:	4b51      	ldr	r3, [pc, #324]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	4b51      	ldr	r3, [pc, #324]	; (80022f8 <HAL_RCC_OscConfig+0x7c8>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021be:	3a01      	subs	r2, #1
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	4311      	orrs	r1, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021c8:	0212      	lsls	r2, r2, #8
 80021ca:	4311      	orrs	r1, r2
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021d0:	0852      	lsrs	r2, r2, #1
 80021d2:	3a01      	subs	r2, #1
 80021d4:	0552      	lsls	r2, r2, #21
 80021d6:	4311      	orrs	r1, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021dc:	0852      	lsrs	r2, r2, #1
 80021de:	3a01      	subs	r2, #1
 80021e0:	0652      	lsls	r2, r2, #25
 80021e2:	4311      	orrs	r1, r2
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021e8:	0912      	lsrs	r2, r2, #4
 80021ea:	0452      	lsls	r2, r2, #17
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4941      	ldr	r1, [pc, #260]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021f4:	4b3f      	ldr	r3, [pc, #252]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a3e      	ldr	r2, [pc, #248]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 80021fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002200:	4b3c      	ldr	r3, [pc, #240]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a3b      	ldr	r2, [pc, #236]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 8002206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800220c:	f7fe fff2 	bl	80011f4 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe ffee 	bl	80011f4 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e062      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002226:	4b33      	ldr	r3, [pc, #204]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002232:	e05a      	b.n	80022ea <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e059      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002238:	4b2e      	ldr	r3, [pc, #184]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d152      	bne.n	80022ea <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002244:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 800224a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 8002256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800225a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800225c:	f7fe ffca 	bl	80011f4 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002264:	f7fe ffc6 	bl	80011f4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e03a      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002276:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x734>
 8002282:	e032      	b.n	80022ea <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	2b0c      	cmp	r3, #12
 8002288:	d02d      	beq.n	80022e6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228a:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 8002290:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002294:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002296:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d105      	bne.n	80022ae <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022a2:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 80022a8:	f023 0303 	bic.w	r3, r3, #3
 80022ac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	4a10      	ldr	r2, [pc, #64]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 80022b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022be:	f7fe ff99 	bl	80011f4 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c6:	f7fe ff95 	bl	80011f4 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e009      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_OscConfig+0x7c4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f0      	bne.n	80022c6 <HAL_RCC_OscConfig+0x796>
 80022e4:	e001      	b.n	80022ea <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	f99d808c 	.word	0xf99d808c

080022fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0c8      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002310:	4b66      	ldr	r3, [pc, #408]	; (80024ac <HAL_RCC_ClockConfig+0x1b0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d910      	bls.n	8002340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b63      	ldr	r3, [pc, #396]	; (80024ac <HAL_RCC_ClockConfig+0x1b0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 0207 	bic.w	r2, r3, #7
 8002326:	4961      	ldr	r1, [pc, #388]	; (80024ac <HAL_RCC_ClockConfig+0x1b0>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b5f      	ldr	r3, [pc, #380]	; (80024ac <HAL_RCC_ClockConfig+0x1b0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0b0      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d04c      	beq.n	80023e6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d107      	bne.n	8002364 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002354:	4b56      	ldr	r3, [pc, #344]	; (80024b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d121      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e09e      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d107      	bne.n	800237c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800236c:	4b50      	ldr	r3, [pc, #320]	; (80024b0 <HAL_RCC_ClockConfig+0x1b4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d115      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e092      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d107      	bne.n	8002394 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002384:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d109      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e086      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002394:	4b46      	ldr	r3, [pc, #280]	; (80024b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e07e      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023a4:	4b42      	ldr	r3, [pc, #264]	; (80024b0 <HAL_RCC_ClockConfig+0x1b4>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f023 0203 	bic.w	r2, r3, #3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	493f      	ldr	r1, [pc, #252]	; (80024b0 <HAL_RCC_ClockConfig+0x1b4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b6:	f7fe ff1d 	bl	80011f4 <HAL_GetTick>
 80023ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023bc:	e00a      	b.n	80023d4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023be:	f7fe ff19 	bl	80011f4 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e066      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d4:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <HAL_RCC_ClockConfig+0x1b4>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 020c 	and.w	r2, r3, #12
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d1eb      	bne.n	80023be <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f2:	4b2f      	ldr	r3, [pc, #188]	; (80024b0 <HAL_RCC_ClockConfig+0x1b4>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	492c      	ldr	r1, [pc, #176]	; (80024b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002400:	4313      	orrs	r3, r2
 8002402:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002404:	4b29      	ldr	r3, [pc, #164]	; (80024ac <HAL_RCC_ClockConfig+0x1b0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d210      	bcs.n	8002434 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4b26      	ldr	r3, [pc, #152]	; (80024ac <HAL_RCC_ClockConfig+0x1b0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 0207 	bic.w	r2, r3, #7
 800241a:	4924      	ldr	r1, [pc, #144]	; (80024ac <HAL_RCC_ClockConfig+0x1b0>)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b22      	ldr	r3, [pc, #136]	; (80024ac <HAL_RCC_ClockConfig+0x1b0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e036      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4918      	ldr	r1, [pc, #96]	; (80024b0 <HAL_RCC_ClockConfig+0x1b4>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d009      	beq.n	8002472 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4910      	ldr	r1, [pc, #64]	; (80024b0 <HAL_RCC_ClockConfig+0x1b4>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002472:	f000 f825 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 8002476:	4601      	mov	r1, r0
 8002478:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <HAL_RCC_ClockConfig+0x1b4>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	4a0c      	ldr	r2, [pc, #48]	; (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002484:	5cd3      	ldrb	r3, [r2, r3]
 8002486:	f003 031f 	and.w	r3, r3, #31
 800248a:	fa21 f303 	lsr.w	r3, r1, r3
 800248e:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fe5c 	bl	8001154 <HAL_InitTick>
 800249c:	4603      	mov	r3, r0
 800249e:	72fb      	strb	r3, [r7, #11]

  return status;
 80024a0:	7afb      	ldrb	r3, [r7, #11]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40022000 	.word	0x40022000
 80024b0:	40021000 	.word	0x40021000
 80024b4:	080059ec 	.word	0x080059ec
 80024b8:	20000000 	.word	0x20000000
 80024bc:	20000004 	.word	0x20000004

080024c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ce:	4b3d      	ldr	r3, [pc, #244]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x104>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024d8:	4b3a      	ldr	r3, [pc, #232]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x104>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x34>
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	2b0c      	cmp	r3, #12
 80024ec:	d121      	bne.n	8002532 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d11e      	bne.n	8002532 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024f4:	4b33      	ldr	r3, [pc, #204]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x104>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d107      	bne.n	8002510 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002500:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	e005      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002510:	4b2c      	ldr	r3, [pc, #176]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800251c:	4a2a      	ldr	r2, [pc, #168]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002524:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10d      	bne.n	8002548 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002530:	e00a      	b.n	8002548 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	2b04      	cmp	r3, #4
 8002536:	d102      	bne.n	800253e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002538:	4b24      	ldr	r3, [pc, #144]	; (80025cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	e004      	b.n	8002548 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	2b08      	cmp	r3, #8
 8002542:	d101      	bne.n	8002548 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002544:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002546:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b0c      	cmp	r3, #12
 800254c:	d133      	bne.n	80025b6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800254e:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d002      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0xa4>
 800255e:	2b03      	cmp	r3, #3
 8002560:	d003      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0xaa>
 8002562:	e005      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002566:	617b      	str	r3, [r7, #20]
      break;
 8002568:	e005      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800256a:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800256c:	617b      	str	r3, [r7, #20]
      break;
 800256e:	e002      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	617b      	str	r3, [r7, #20]
      break;
 8002574:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	3301      	adds	r3, #1
 8002582:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	fb02 f203 	mul.w	r2, r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	fbb2 f3f3 	udiv	r3, r2, r3
 800259a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x104>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0e5b      	lsrs	r3, r3, #25
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	3301      	adds	r3, #1
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025b6:	69bb      	ldr	r3, [r7, #24]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3724      	adds	r7, #36	; 0x24
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08005a04 	.word	0x08005a04
 80025cc:	00f42400 	.word	0x00f42400
 80025d0:	007a1200 	.word	0x007a1200

080025d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000000 	.word	0x20000000

080025ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025f0:	f7ff fff0 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 80025f4:	4601      	mov	r1, r0
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002602:	5cd3      	ldrb	r3, [r2, r3]
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	fa21 f303 	lsr.w	r3, r1, r3
}
 800260c:	4618      	mov	r0, r3
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	080059fc 	.word	0x080059fc

08002618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800261c:	f7ff ffda 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 8002620:	4601      	mov	r1, r0
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0adb      	lsrs	r3, r3, #11
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4a04      	ldr	r2, [pc, #16]	; (8002640 <HAL_RCC_GetPCLK2Freq+0x28>)
 800262e:	5cd3      	ldrb	r3, [r2, r3]
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	080059fc 	.word	0x080059fc

08002644 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002650:	4b2a      	ldr	r3, [pc, #168]	; (80026fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800265c:	f7ff fa04 	bl	8001a68 <HAL_PWREx_GetVoltageRange>
 8002660:	6178      	str	r0, [r7, #20]
 8002662:	e014      	b.n	800268e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002664:	4b25      	ldr	r3, [pc, #148]	; (80026fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	4a24      	ldr	r2, [pc, #144]	; (80026fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800266a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266e:	6593      	str	r3, [r2, #88]	; 0x58
 8002670:	4b22      	ldr	r3, [pc, #136]	; (80026fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800267c:	f7ff f9f4 	bl	8001a68 <HAL_PWREx_GetVoltageRange>
 8002680:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002682:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800268c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002694:	d10b      	bne.n	80026ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b80      	cmp	r3, #128	; 0x80
 800269a:	d919      	bls.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2ba0      	cmp	r3, #160	; 0xa0
 80026a0:	d902      	bls.n	80026a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026a2:	2302      	movs	r3, #2
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	e013      	b.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026a8:	2301      	movs	r3, #1
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	e010      	b.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b80      	cmp	r3, #128	; 0x80
 80026b2:	d902      	bls.n	80026ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026b4:	2303      	movs	r3, #3
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	e00a      	b.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b80      	cmp	r3, #128	; 0x80
 80026be:	d102      	bne.n	80026c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026c0:	2302      	movs	r3, #2
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	e004      	b.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b70      	cmp	r3, #112	; 0x70
 80026ca:	d101      	bne.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026cc:	2301      	movs	r3, #1
 80026ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f023 0207 	bic.w	r2, r3, #7
 80026d8:	4909      	ldr	r1, [pc, #36]	; (8002700 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026e0:	4b07      	ldr	r3, [pc, #28]	; (8002700 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d001      	beq.n	80026f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000
 8002700:	40022000 	.word	0x40022000

08002704 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800270c:	2300      	movs	r3, #0
 800270e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002710:	2300      	movs	r3, #0
 8002712:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800271c:	2b00      	cmp	r3, #0
 800271e:	d03f      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002724:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002728:	d01c      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800272a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800272e:	d802      	bhi.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00e      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002734:	e01f      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002736:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800273a:	d003      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800273c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002740:	d01c      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002742:	e018      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002744:	4b85      	ldr	r3, [pc, #532]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4a84      	ldr	r2, [pc, #528]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800274a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002750:	e015      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3304      	adds	r3, #4
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fab9 	bl	8002cd0 <RCCEx_PLLSAI1_Config>
 800275e:	4603      	mov	r3, r0
 8002760:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002762:	e00c      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3320      	adds	r3, #32
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fba0 	bl	8002eb0 <RCCEx_PLLSAI2_Config>
 8002770:	4603      	mov	r3, r0
 8002772:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002774:	e003      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	74fb      	strb	r3, [r7, #19]
      break;
 800277a:	e000      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800277c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800277e:	7cfb      	ldrb	r3, [r7, #19]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10b      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002784:	4b75      	ldr	r3, [pc, #468]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002792:	4972      	ldr	r1, [pc, #456]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800279a:	e001      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d03f      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b4:	d01c      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80027b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ba:	d802      	bhi.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00e      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0xda>
 80027c0:	e01f      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80027c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027c6:	d003      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80027c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027cc:	d01c      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80027ce:	e018      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027d0:	4b62      	ldr	r3, [pc, #392]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4a61      	ldr	r2, [pc, #388]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027dc:	e015      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3304      	adds	r3, #4
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fa73 	bl	8002cd0 <RCCEx_PLLSAI1_Config>
 80027ea:	4603      	mov	r3, r0
 80027ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027ee:	e00c      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3320      	adds	r3, #32
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 fb5a 	bl	8002eb0 <RCCEx_PLLSAI2_Config>
 80027fc:	4603      	mov	r3, r0
 80027fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002800:	e003      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	74fb      	strb	r3, [r7, #19]
      break;
 8002806:	e000      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800280a:	7cfb      	ldrb	r3, [r7, #19]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10b      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002810:	4b52      	ldr	r3, [pc, #328]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002816:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800281e:	494f      	ldr	r1, [pc, #316]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002826:	e001      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a0 	beq.w	800297a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800283e:	4b47      	ldr	r3, [pc, #284]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800284e:	2300      	movs	r3, #0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00d      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002854:	4b41      	ldr	r3, [pc, #260]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002858:	4a40      	ldr	r2, [pc, #256]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800285a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285e:	6593      	str	r3, [r2, #88]	; 0x58
 8002860:	4b3e      	ldr	r3, [pc, #248]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800286c:	2301      	movs	r3, #1
 800286e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002870:	4b3b      	ldr	r3, [pc, #236]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a3a      	ldr	r2, [pc, #232]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800287c:	f7fe fcba 	bl	80011f4 <HAL_GetTick>
 8002880:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002882:	e009      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002884:	f7fe fcb6 	bl	80011f4 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d902      	bls.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	74fb      	strb	r3, [r7, #19]
        break;
 8002896:	e005      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002898:	4b31      	ldr	r3, [pc, #196]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0ef      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80028a4:	7cfb      	ldrb	r3, [r7, #19]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d15c      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028aa:	4b2c      	ldr	r3, [pc, #176]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01f      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d019      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028c8:	4b24      	ldr	r3, [pc, #144]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028d4:	4b21      	ldr	r3, [pc, #132]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	4a20      	ldr	r2, [pc, #128]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028e4:	4b1d      	ldr	r3, [pc, #116]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ea:	4a1c      	ldr	r2, [pc, #112]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028f4:	4a19      	ldr	r2, [pc, #100]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d016      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002906:	f7fe fc75 	bl	80011f4 <HAL_GetTick>
 800290a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800290c:	e00b      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290e:	f7fe fc71 	bl	80011f4 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	f241 3288 	movw	r2, #5000	; 0x1388
 800291c:	4293      	cmp	r3, r2
 800291e:	d902      	bls.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	74fb      	strb	r3, [r7, #19]
            break;
 8002924:	e006      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002926:	4b0d      	ldr	r3, [pc, #52]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ec      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002934:	7cfb      	ldrb	r3, [r7, #19]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10c      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002940:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800294a:	4904      	ldr	r1, [pc, #16]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002952:	e009      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002954:	7cfb      	ldrb	r3, [r7, #19]
 8002956:	74bb      	strb	r3, [r7, #18]
 8002958:	e006      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800295a:	bf00      	nop
 800295c:	40021000 	.word	0x40021000
 8002960:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002964:	7cfb      	ldrb	r3, [r7, #19]
 8002966:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002968:	7c7b      	ldrb	r3, [r7, #17]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d105      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800296e:	4b9e      	ldr	r3, [pc, #632]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002972:	4a9d      	ldr	r2, [pc, #628]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002978:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002986:	4b98      	ldr	r3, [pc, #608]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298c:	f023 0203 	bic.w	r2, r3, #3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002994:	4994      	ldr	r1, [pc, #592]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029a8:	4b8f      	ldr	r3, [pc, #572]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	f023 020c 	bic.w	r2, r3, #12
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b6:	498c      	ldr	r1, [pc, #560]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029ca:	4b87      	ldr	r3, [pc, #540]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	4983      	ldr	r1, [pc, #524]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029ec:	4b7e      	ldr	r3, [pc, #504]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	497b      	ldr	r1, [pc, #492]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a0e:	4b76      	ldr	r3, [pc, #472]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1c:	4972      	ldr	r1, [pc, #456]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a30:	4b6d      	ldr	r3, [pc, #436]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	496a      	ldr	r1, [pc, #424]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a52:	4b65      	ldr	r3, [pc, #404]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a60:	4961      	ldr	r1, [pc, #388]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a74:	4b5c      	ldr	r3, [pc, #368]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a82:	4959      	ldr	r1, [pc, #356]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a96:	4b54      	ldr	r3, [pc, #336]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa4:	4950      	ldr	r1, [pc, #320]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ab8:	4b4b      	ldr	r3, [pc, #300]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	4948      	ldr	r1, [pc, #288]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ada:	4b43      	ldr	r3, [pc, #268]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	493f      	ldr	r1, [pc, #252]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d028      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002afc:	4b3a      	ldr	r3, [pc, #232]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b0a:	4937      	ldr	r1, [pc, #220]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b1a:	d106      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b1c:	4b32      	ldr	r3, [pc, #200]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a31      	ldr	r2, [pc, #196]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b26:	60d3      	str	r3, [r2, #12]
 8002b28:	e011      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b32:	d10c      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3304      	adds	r3, #4
 8002b38:	2101      	movs	r1, #1
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f8c8 	bl	8002cd0 <RCCEx_PLLSAI1_Config>
 8002b40:	4603      	mov	r3, r0
 8002b42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002b4a:	7cfb      	ldrb	r3, [r7, #19]
 8002b4c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d028      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b5a:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	491f      	ldr	r1, [pc, #124]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b78:	d106      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b7a:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	4a1a      	ldr	r2, [pc, #104]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b84:	60d3      	str	r3, [r2, #12]
 8002b86:	e011      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b90:	d10c      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3304      	adds	r3, #4
 8002b96:	2101      	movs	r1, #1
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 f899 	bl	8002cd0 <RCCEx_PLLSAI1_Config>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ba2:	7cfb      	ldrb	r3, [r7, #19]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002ba8:	7cfb      	ldrb	r3, [r7, #19]
 8002baa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d02b      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc6:	4908      	ldr	r1, [pc, #32]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bd6:	d109      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4a02      	ldr	r2, [pc, #8]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002be2:	60d3      	str	r3, [r2, #12]
 8002be4:	e014      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 f867 	bl	8002cd0 <RCCEx_PLLSAI1_Config>
 8002c02:	4603      	mov	r3, r0
 8002c04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c06:	7cfb      	ldrb	r3, [r7, #19]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002c0c:	7cfb      	ldrb	r3, [r7, #19]
 8002c0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d02f      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c2a:	4928      	ldr	r1, [pc, #160]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c3a:	d10d      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	2102      	movs	r1, #2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f844 	bl	8002cd0 <RCCEx_PLLSAI1_Config>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d014      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002c52:	7cfb      	ldrb	r3, [r7, #19]
 8002c54:	74bb      	strb	r3, [r7, #18]
 8002c56:	e011      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3320      	adds	r3, #32
 8002c66:	2102      	movs	r1, #2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 f921 	bl	8002eb0 <RCCEx_PLLSAI2_Config>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c72:	7cfb      	ldrb	r3, [r7, #19]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002c78:	7cfb      	ldrb	r3, [r7, #19]
 8002c7a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c88:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c96:	490d      	ldr	r1, [pc, #52]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00b      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002caa:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cba:	4904      	ldr	r1, [pc, #16]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cc2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000

08002cd0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cde:	4b73      	ldr	r3, [pc, #460]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d018      	beq.n	8002d1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cea:	4b70      	ldr	r3, [pc, #448]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f003 0203 	and.w	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d10d      	bne.n	8002d16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
       ||
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d02:	4b6a      	ldr	r3, [pc, #424]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	091b      	lsrs	r3, r3, #4
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
       ||
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d044      	beq.n	8002da0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
 8002d1a:	e041      	b.n	8002da0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d00c      	beq.n	8002d3e <RCCEx_PLLSAI1_Config+0x6e>
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d013      	beq.n	8002d50 <RCCEx_PLLSAI1_Config+0x80>
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d120      	bne.n	8002d6e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d2c:	4b5f      	ldr	r3, [pc, #380]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d11d      	bne.n	8002d74 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d3c:	e01a      	b.n	8002d74 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d3e:	4b5b      	ldr	r3, [pc, #364]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d116      	bne.n	8002d78 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4e:	e013      	b.n	8002d78 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d50:	4b56      	ldr	r3, [pc, #344]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10f      	bne.n	8002d7c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d5c:	4b53      	ldr	r3, [pc, #332]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d6c:	e006      	b.n	8002d7c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
      break;
 8002d72:	e004      	b.n	8002d7e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d74:	bf00      	nop
 8002d76:	e002      	b.n	8002d7e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d78:	bf00      	nop
 8002d7a:	e000      	b.n	8002d7e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d7c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10d      	bne.n	8002da0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d84:	4b49      	ldr	r3, [pc, #292]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6819      	ldr	r1, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	4944      	ldr	r1, [pc, #272]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d17d      	bne.n	8002ea2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002da6:	4b41      	ldr	r3, [pc, #260]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a40      	ldr	r2, [pc, #256]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db2:	f7fe fa1f 	bl	80011f4 <HAL_GetTick>
 8002db6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002db8:	e009      	b.n	8002dce <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dba:	f7fe fa1b 	bl	80011f4 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d902      	bls.n	8002dce <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	73fb      	strb	r3, [r7, #15]
        break;
 8002dcc:	e005      	b.n	8002dda <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dce:	4b37      	ldr	r3, [pc, #220]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1ef      	bne.n	8002dba <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d160      	bne.n	8002ea2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d111      	bne.n	8002e0a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002de6:	4b31      	ldr	r3, [pc, #196]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6892      	ldr	r2, [r2, #8]
 8002df6:	0211      	lsls	r1, r2, #8
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	68d2      	ldr	r2, [r2, #12]
 8002dfc:	0912      	lsrs	r2, r2, #4
 8002dfe:	0452      	lsls	r2, r2, #17
 8002e00:	430a      	orrs	r2, r1
 8002e02:	492a      	ldr	r1, [pc, #168]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	610b      	str	r3, [r1, #16]
 8002e08:	e027      	b.n	8002e5a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d112      	bne.n	8002e36 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e10:	4b26      	ldr	r3, [pc, #152]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6892      	ldr	r2, [r2, #8]
 8002e20:	0211      	lsls	r1, r2, #8
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6912      	ldr	r2, [r2, #16]
 8002e26:	0852      	lsrs	r2, r2, #1
 8002e28:	3a01      	subs	r2, #1
 8002e2a:	0552      	lsls	r2, r2, #21
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	491f      	ldr	r1, [pc, #124]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	610b      	str	r3, [r1, #16]
 8002e34:	e011      	b.n	8002e5a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e36:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6892      	ldr	r2, [r2, #8]
 8002e46:	0211      	lsls	r1, r2, #8
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6952      	ldr	r2, [r2, #20]
 8002e4c:	0852      	lsrs	r2, r2, #1
 8002e4e:	3a01      	subs	r2, #1
 8002e50:	0652      	lsls	r2, r2, #25
 8002e52:	430a      	orrs	r2, r1
 8002e54:	4915      	ldr	r1, [pc, #84]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e5a:	4b14      	ldr	r3, [pc, #80]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a13      	ldr	r2, [pc, #76]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e66:	f7fe f9c5 	bl	80011f4 <HAL_GetTick>
 8002e6a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e6c:	e009      	b.n	8002e82 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e6e:	f7fe f9c1 	bl	80011f4 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d902      	bls.n	8002e82 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	73fb      	strb	r3, [r7, #15]
          break;
 8002e80:	e005      	b.n	8002e8e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0ef      	beq.n	8002e6e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d106      	bne.n	8002ea2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	4903      	ldr	r1, [pc, #12]	; (8002eac <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40021000 	.word	0x40021000

08002eb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ebe:	4b68      	ldr	r3, [pc, #416]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d018      	beq.n	8002efc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002eca:	4b65      	ldr	r3, [pc, #404]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f003 0203 	and.w	r2, r3, #3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d10d      	bne.n	8002ef6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
       ||
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ee2:	4b5f      	ldr	r3, [pc, #380]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	091b      	lsrs	r3, r3, #4
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d044      	beq.n	8002f80 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
 8002efa:	e041      	b.n	8002f80 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d00c      	beq.n	8002f1e <RCCEx_PLLSAI2_Config+0x6e>
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d013      	beq.n	8002f30 <RCCEx_PLLSAI2_Config+0x80>
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d120      	bne.n	8002f4e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f0c:	4b54      	ldr	r3, [pc, #336]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d11d      	bne.n	8002f54 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f1c:	e01a      	b.n	8002f54 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f1e:	4b50      	ldr	r3, [pc, #320]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d116      	bne.n	8002f58 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f2e:	e013      	b.n	8002f58 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f30:	4b4b      	ldr	r3, [pc, #300]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10f      	bne.n	8002f5c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f3c:	4b48      	ldr	r3, [pc, #288]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d109      	bne.n	8002f5c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f4c:	e006      	b.n	8002f5c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
      break;
 8002f52:	e004      	b.n	8002f5e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002f54:	bf00      	nop
 8002f56:	e002      	b.n	8002f5e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002f58:	bf00      	nop
 8002f5a:	e000      	b.n	8002f5e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002f5c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10d      	bne.n	8002f80 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f64:	4b3e      	ldr	r3, [pc, #248]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6819      	ldr	r1, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	3b01      	subs	r3, #1
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	4939      	ldr	r1, [pc, #228]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d167      	bne.n	8003056 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f86:	4b36      	ldr	r3, [pc, #216]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a35      	ldr	r2, [pc, #212]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f92:	f7fe f92f 	bl	80011f4 <HAL_GetTick>
 8002f96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f98:	e009      	b.n	8002fae <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f9a:	f7fe f92b 	bl	80011f4 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d902      	bls.n	8002fae <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	73fb      	strb	r3, [r7, #15]
        break;
 8002fac:	e005      	b.n	8002fba <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fae:	4b2c      	ldr	r3, [pc, #176]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1ef      	bne.n	8002f9a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d14a      	bne.n	8003056 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d111      	bne.n	8002fea <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fc6:	4b26      	ldr	r3, [pc, #152]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6892      	ldr	r2, [r2, #8]
 8002fd6:	0211      	lsls	r1, r2, #8
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	68d2      	ldr	r2, [r2, #12]
 8002fdc:	0912      	lsrs	r2, r2, #4
 8002fde:	0452      	lsls	r2, r2, #17
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	491f      	ldr	r1, [pc, #124]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	614b      	str	r3, [r1, #20]
 8002fe8:	e011      	b.n	800300e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ff2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6892      	ldr	r2, [r2, #8]
 8002ffa:	0211      	lsls	r1, r2, #8
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6912      	ldr	r2, [r2, #16]
 8003000:	0852      	lsrs	r2, r2, #1
 8003002:	3a01      	subs	r2, #1
 8003004:	0652      	lsls	r2, r2, #25
 8003006:	430a      	orrs	r2, r1
 8003008:	4915      	ldr	r1, [pc, #84]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 800300a:	4313      	orrs	r3, r2
 800300c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800300e:	4b14      	ldr	r3, [pc, #80]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a13      	ldr	r2, [pc, #76]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003018:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301a:	f7fe f8eb 	bl	80011f4 <HAL_GetTick>
 800301e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003020:	e009      	b.n	8003036 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003022:	f7fe f8e7 	bl	80011f4 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d902      	bls.n	8003036 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	73fb      	strb	r3, [r7, #15]
          break;
 8003034:	e005      	b.n	8003042 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0ef      	beq.n	8003022 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d106      	bne.n	8003056 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 800304a:	695a      	ldr	r2, [r3, #20]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	4903      	ldr	r1, [pc, #12]	; (8003060 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003052:	4313      	orrs	r3, r2
 8003054:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003056:	7bfb      	ldrb	r3, [r7, #15]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021000 	.word	0x40021000

08003064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e095      	b.n	80031a2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	2b00      	cmp	r3, #0
 800307c:	d108      	bne.n	8003090 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003086:	d009      	beq.n	800309c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	61da      	str	r2, [r3, #28]
 800308e:	e005      	b.n	800309c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f877 	bl	80031aa <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030dc:	d902      	bls.n	80030e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	e002      	b.n	80030ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030f2:	d007      	beq.n	8003104 <HAL_SPI_Init+0xa0>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030fc:	d002      	beq.n	8003104 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	ea42 0103 	orr.w	r1, r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	0c1b      	lsrs	r3, r3, #16
 8003160:	f003 0204 	and.w	r2, r3, #4
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003180:	ea42 0103 	orr.w	r1, r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b08a      	sub	sp, #40	; 0x28
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
 80031ca:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031cc:	2301      	movs	r3, #1
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_SPI_TransmitReceive+0x26>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e1fb      	b.n	80035dc <HAL_SPI_TransmitReceive+0x41e>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031ec:	f7fe f802 	bl	80011f4 <HAL_GetTick>
 80031f0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031f8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003200:	887b      	ldrh	r3, [r7, #2]
 8003202:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003204:	887b      	ldrh	r3, [r7, #2]
 8003206:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003208:	7efb      	ldrb	r3, [r7, #27]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d00e      	beq.n	800322c <HAL_SPI_TransmitReceive+0x6e>
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003214:	d106      	bne.n	8003224 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d102      	bne.n	8003224 <HAL_SPI_TransmitReceive+0x66>
 800321e:	7efb      	ldrb	r3, [r7, #27]
 8003220:	2b04      	cmp	r3, #4
 8003222:	d003      	beq.n	800322c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003224:	2302      	movs	r3, #2
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800322a:	e1cd      	b.n	80035c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d005      	beq.n	800323e <HAL_SPI_TransmitReceive+0x80>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_SPI_TransmitReceive+0x80>
 8003238:	887b      	ldrh	r3, [r7, #2]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d103      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003244:	e1c0      	b.n	80035c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b04      	cmp	r3, #4
 8003250:	d003      	beq.n	800325a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2205      	movs	r2, #5
 8003256:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	887a      	ldrh	r2, [r7, #2]
 800326a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	887a      	ldrh	r2, [r7, #2]
 8003272:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	887a      	ldrh	r2, [r7, #2]
 8003280:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	887a      	ldrh	r2, [r7, #2]
 8003286:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800329c:	d802      	bhi.n	80032a4 <HAL_SPI_TransmitReceive+0xe6>
 800329e:	8a3b      	ldrh	r3, [r7, #16]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d908      	bls.n	80032b6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032b2:	605a      	str	r2, [r3, #4]
 80032b4:	e007      	b.n	80032c6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032c4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d007      	beq.n	80032e4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032ec:	d97c      	bls.n	80033e8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <HAL_SPI_TransmitReceive+0x13e>
 80032f6:	8a7b      	ldrh	r3, [r7, #18]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d169      	bne.n	80033d0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	881a      	ldrh	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	1c9a      	adds	r2, r3, #2
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003320:	e056      	b.n	80033d0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b02      	cmp	r3, #2
 800332e:	d11b      	bne.n	8003368 <HAL_SPI_TransmitReceive+0x1aa>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d016      	beq.n	8003368 <HAL_SPI_TransmitReceive+0x1aa>
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	2b01      	cmp	r3, #1
 800333e:	d113      	bne.n	8003368 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	881a      	ldrh	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	1c9a      	adds	r2, r3, #2
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b01      	cmp	r3, #1
 8003374:	d11c      	bne.n	80033b0 <HAL_SPI_TransmitReceive+0x1f2>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d016      	beq.n	80033b0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	b292      	uxth	r2, r2
 800338e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	1c9a      	adds	r2, r3, #2
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033ac:	2301      	movs	r3, #1
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033b0:	f7fd ff20 	bl	80011f4 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033bc:	429a      	cmp	r2, r3
 80033be:	d807      	bhi.n	80033d0 <HAL_SPI_TransmitReceive+0x212>
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033c6:	d003      	beq.n	80033d0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80033ce:	e0fb      	b.n	80035c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1a3      	bne.n	8003322 <HAL_SPI_TransmitReceive+0x164>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d19d      	bne.n	8003322 <HAL_SPI_TransmitReceive+0x164>
 80033e6:	e0df      	b.n	80035a8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_SPI_TransmitReceive+0x23a>
 80033f0:	8a7b      	ldrh	r3, [r7, #18]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	f040 80cb 	bne.w	800358e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d912      	bls.n	8003428 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	881a      	ldrh	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	1c9a      	adds	r2, r3, #2
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b02      	subs	r3, #2
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003426:	e0b2      	b.n	800358e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	330c      	adds	r3, #12
 8003432:	7812      	ldrb	r2, [r2, #0]
 8003434:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800344e:	e09e      	b.n	800358e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b02      	cmp	r3, #2
 800345c:	d134      	bne.n	80034c8 <HAL_SPI_TransmitReceive+0x30a>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d02f      	beq.n	80034c8 <HAL_SPI_TransmitReceive+0x30a>
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	2b01      	cmp	r3, #1
 800346c:	d12c      	bne.n	80034c8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	d912      	bls.n	800349e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	881a      	ldrh	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003488:	1c9a      	adds	r2, r3, #2
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b02      	subs	r3, #2
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800349c:	e012      	b.n	80034c4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	330c      	adds	r3, #12
 80034a8:	7812      	ldrb	r2, [r2, #0]
 80034aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d148      	bne.n	8003568 <HAL_SPI_TransmitReceive+0x3aa>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d042      	beq.n	8003568 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d923      	bls.n	8003536 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	b292      	uxth	r2, r2
 80034fa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	1c9a      	adds	r2, r3, #2
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b02      	subs	r3, #2
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d81f      	bhi.n	8003564 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003532:	605a      	str	r2, [r3, #4]
 8003534:	e016      	b.n	8003564 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f103 020c 	add.w	r2, r3, #12
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	7812      	ldrb	r2, [r2, #0]
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003564:	2301      	movs	r3, #1
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003568:	f7fd fe44 	bl	80011f4 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003574:	429a      	cmp	r2, r3
 8003576:	d803      	bhi.n	8003580 <HAL_SPI_TransmitReceive+0x3c2>
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800357e:	d102      	bne.n	8003586 <HAL_SPI_TransmitReceive+0x3c8>
 8003580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003582:	2b00      	cmp	r3, #0
 8003584:	d103      	bne.n	800358e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800358c:	e01c      	b.n	80035c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	f47f af5b 	bne.w	8003450 <HAL_SPI_TransmitReceive+0x292>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f47f af54 	bne.w	8003450 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f93d 	bl	800382c <SPI_EndRxTxTransaction>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d006      	beq.n	80035c6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	661a      	str	r2, [r3, #96]	; 0x60
 80035c4:	e000      	b.n	80035c8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80035c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80035d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3728      	adds	r7, #40	; 0x28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035f2:	b2db      	uxtb	r3, r3
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	4613      	mov	r3, r2
 800360e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003610:	f7fd fdf0 	bl	80011f4 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	4413      	add	r3, r2
 800361e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003620:	f7fd fde8 	bl	80011f4 <HAL_GetTick>
 8003624:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	015b      	lsls	r3, r3, #5
 800362c:	0d1b      	lsrs	r3, r3, #20
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	fb02 f303 	mul.w	r3, r2, r3
 8003634:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003636:	e054      	b.n	80036e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800363e:	d050      	beq.n	80036e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003640:	f7fd fdd8 	bl	80011f4 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	429a      	cmp	r2, r3
 800364e:	d902      	bls.n	8003656 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d13d      	bne.n	80036d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003664:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800366e:	d111      	bne.n	8003694 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003678:	d004      	beq.n	8003684 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003682:	d107      	bne.n	8003694 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003692:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369c:	d10f      	bne.n	80036be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e017      	b.n	8003702 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	3b01      	subs	r3, #1
 80036e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4013      	ands	r3, r2
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	bf0c      	ite	eq
 80036f2:	2301      	moveq	r3, #1
 80036f4:	2300      	movne	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	461a      	mov	r2, r3
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d19b      	bne.n	8003638 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000000 	.word	0x20000000

08003710 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800371e:	f7fd fd69 	bl	80011f4 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	4413      	add	r3, r2
 800372c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800372e:	f7fd fd61 	bl	80011f4 <HAL_GetTick>
 8003732:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003734:	4b3c      	ldr	r3, [pc, #240]	; (8003828 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	00da      	lsls	r2, r3, #3
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	0d1b      	lsrs	r3, r3, #20
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800374c:	e05f      	b.n	800380e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003754:	d106      	bne.n	8003764 <SPI_WaitFifoStateUntilTimeout+0x54>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d103      	bne.n	8003764 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	330c      	adds	r3, #12
 8003762:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800376a:	d050      	beq.n	800380e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800376c:	f7fd fd42 	bl	80011f4 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	429a      	cmp	r2, r3
 800377a:	d902      	bls.n	8003782 <SPI_WaitFifoStateUntilTimeout+0x72>
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d13d      	bne.n	80037fe <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003790:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800379a:	d111      	bne.n	80037c0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037a4:	d004      	beq.n	80037b0 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ae:	d107      	bne.n	80037c0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c8:	d10f      	bne.n	80037ea <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e010      	b.n	8003820 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	3b01      	subs	r3, #1
 800380c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4013      	ands	r3, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	429a      	cmp	r2, r3
 800381c:	d197      	bne.n	800374e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3720      	adds	r7, #32
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	20000000 	.word	0x20000000

0800382c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af02      	add	r7, sp, #8
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2200      	movs	r2, #0
 8003840:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f7ff ff63 	bl	8003710 <SPI_WaitFifoStateUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d007      	beq.n	8003860 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003854:	f043 0220 	orr.w	r2, r3, #32
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e027      	b.n	80038b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2200      	movs	r2, #0
 8003868:	2180      	movs	r1, #128	; 0x80
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f7ff fec8 	bl	8003600 <SPI_WaitFlagStateUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387a:	f043 0220 	orr.w	r2, r3, #32
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e014      	b.n	80038b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2200      	movs	r2, #0
 800388e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f7ff ff3c 	bl	8003710 <SPI_WaitFifoStateUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a2:	f043 0220 	orr.w	r2, r3, #32
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e000      	b.n	80038b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e040      	b.n	800394c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd faac 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2224      	movs	r2, #36	; 0x24
 80038e4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f82c 	bl	8003954 <UART_SetConfig>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e022      	b.n	800394c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 faaa 	bl	8003e68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003922:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003932:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fb31 	bl	8003fac <UART_CheckIdleState>
 800394a:	4603      	mov	r3, r0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003954:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003958:	b088      	sub	sp, #32
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	4313      	orrs	r3, r2
 8003978:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	4bac      	ldr	r3, [pc, #688]	; (8003c34 <UART_SetConfig+0x2e0>)
 8003982:	4013      	ands	r3, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	69f9      	ldr	r1, [r7, #28]
 800398a:	430b      	orrs	r3, r1
 800398c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4aa2      	ldr	r2, [pc, #648]	; (8003c38 <UART_SetConfig+0x2e4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d004      	beq.n	80039be <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	69fa      	ldr	r2, [r7, #28]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a99      	ldr	r2, [pc, #612]	; (8003c3c <UART_SetConfig+0x2e8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d121      	bne.n	8003a20 <UART_SetConfig+0xcc>
 80039dc:	4b98      	ldr	r3, [pc, #608]	; (8003c40 <UART_SetConfig+0x2ec>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d816      	bhi.n	8003a18 <UART_SetConfig+0xc4>
 80039ea:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <UART_SetConfig+0x9c>)
 80039ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f0:	08003a01 	.word	0x08003a01
 80039f4:	08003a0d 	.word	0x08003a0d
 80039f8:	08003a07 	.word	0x08003a07
 80039fc:	08003a13 	.word	0x08003a13
 8003a00:	2301      	movs	r3, #1
 8003a02:	76fb      	strb	r3, [r7, #27]
 8003a04:	e0e8      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003a06:	2302      	movs	r3, #2
 8003a08:	76fb      	strb	r3, [r7, #27]
 8003a0a:	e0e5      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	76fb      	strb	r3, [r7, #27]
 8003a10:	e0e2      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003a12:	2308      	movs	r3, #8
 8003a14:	76fb      	strb	r3, [r7, #27]
 8003a16:	e0df      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003a18:	2310      	movs	r3, #16
 8003a1a:	76fb      	strb	r3, [r7, #27]
 8003a1c:	bf00      	nop
 8003a1e:	e0db      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a87      	ldr	r2, [pc, #540]	; (8003c44 <UART_SetConfig+0x2f0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d134      	bne.n	8003a94 <UART_SetConfig+0x140>
 8003a2a:	4b85      	ldr	r3, [pc, #532]	; (8003c40 <UART_SetConfig+0x2ec>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a30:	f003 030c 	and.w	r3, r3, #12
 8003a34:	2b0c      	cmp	r3, #12
 8003a36:	d829      	bhi.n	8003a8c <UART_SetConfig+0x138>
 8003a38:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <UART_SetConfig+0xec>)
 8003a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3e:	bf00      	nop
 8003a40:	08003a75 	.word	0x08003a75
 8003a44:	08003a8d 	.word	0x08003a8d
 8003a48:	08003a8d 	.word	0x08003a8d
 8003a4c:	08003a8d 	.word	0x08003a8d
 8003a50:	08003a81 	.word	0x08003a81
 8003a54:	08003a8d 	.word	0x08003a8d
 8003a58:	08003a8d 	.word	0x08003a8d
 8003a5c:	08003a8d 	.word	0x08003a8d
 8003a60:	08003a7b 	.word	0x08003a7b
 8003a64:	08003a8d 	.word	0x08003a8d
 8003a68:	08003a8d 	.word	0x08003a8d
 8003a6c:	08003a8d 	.word	0x08003a8d
 8003a70:	08003a87 	.word	0x08003a87
 8003a74:	2300      	movs	r3, #0
 8003a76:	76fb      	strb	r3, [r7, #27]
 8003a78:	e0ae      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	76fb      	strb	r3, [r7, #27]
 8003a7e:	e0ab      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003a80:	2304      	movs	r3, #4
 8003a82:	76fb      	strb	r3, [r7, #27]
 8003a84:	e0a8      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003a86:	2308      	movs	r3, #8
 8003a88:	76fb      	strb	r3, [r7, #27]
 8003a8a:	e0a5      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	76fb      	strb	r3, [r7, #27]
 8003a90:	bf00      	nop
 8003a92:	e0a1      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a6b      	ldr	r2, [pc, #428]	; (8003c48 <UART_SetConfig+0x2f4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d120      	bne.n	8003ae0 <UART_SetConfig+0x18c>
 8003a9e:	4b68      	ldr	r3, [pc, #416]	; (8003c40 <UART_SetConfig+0x2ec>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d00f      	beq.n	8003acc <UART_SetConfig+0x178>
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d802      	bhi.n	8003ab6 <UART_SetConfig+0x162>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <UART_SetConfig+0x16c>
 8003ab4:	e010      	b.n	8003ad8 <UART_SetConfig+0x184>
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d005      	beq.n	8003ac6 <UART_SetConfig+0x172>
 8003aba:	2b30      	cmp	r3, #48	; 0x30
 8003abc:	d009      	beq.n	8003ad2 <UART_SetConfig+0x17e>
 8003abe:	e00b      	b.n	8003ad8 <UART_SetConfig+0x184>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	76fb      	strb	r3, [r7, #27]
 8003ac4:	e088      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	76fb      	strb	r3, [r7, #27]
 8003aca:	e085      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003acc:	2304      	movs	r3, #4
 8003ace:	76fb      	strb	r3, [r7, #27]
 8003ad0:	e082      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003ad2:	2308      	movs	r3, #8
 8003ad4:	76fb      	strb	r3, [r7, #27]
 8003ad6:	e07f      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003ad8:	2310      	movs	r3, #16
 8003ada:	76fb      	strb	r3, [r7, #27]
 8003adc:	bf00      	nop
 8003ade:	e07b      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a59      	ldr	r2, [pc, #356]	; (8003c4c <UART_SetConfig+0x2f8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d120      	bne.n	8003b2c <UART_SetConfig+0x1d8>
 8003aea:	4b55      	ldr	r3, [pc, #340]	; (8003c40 <UART_SetConfig+0x2ec>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	d00f      	beq.n	8003b18 <UART_SetConfig+0x1c4>
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d802      	bhi.n	8003b02 <UART_SetConfig+0x1ae>
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <UART_SetConfig+0x1b8>
 8003b00:	e010      	b.n	8003b24 <UART_SetConfig+0x1d0>
 8003b02:	2b80      	cmp	r3, #128	; 0x80
 8003b04:	d005      	beq.n	8003b12 <UART_SetConfig+0x1be>
 8003b06:	2bc0      	cmp	r3, #192	; 0xc0
 8003b08:	d009      	beq.n	8003b1e <UART_SetConfig+0x1ca>
 8003b0a:	e00b      	b.n	8003b24 <UART_SetConfig+0x1d0>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	76fb      	strb	r3, [r7, #27]
 8003b10:	e062      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003b12:	2302      	movs	r3, #2
 8003b14:	76fb      	strb	r3, [r7, #27]
 8003b16:	e05f      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003b18:	2304      	movs	r3, #4
 8003b1a:	76fb      	strb	r3, [r7, #27]
 8003b1c:	e05c      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003b1e:	2308      	movs	r3, #8
 8003b20:	76fb      	strb	r3, [r7, #27]
 8003b22:	e059      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003b24:	2310      	movs	r3, #16
 8003b26:	76fb      	strb	r3, [r7, #27]
 8003b28:	bf00      	nop
 8003b2a:	e055      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a47      	ldr	r2, [pc, #284]	; (8003c50 <UART_SetConfig+0x2fc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d124      	bne.n	8003b80 <UART_SetConfig+0x22c>
 8003b36:	4b42      	ldr	r3, [pc, #264]	; (8003c40 <UART_SetConfig+0x2ec>)
 8003b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b44:	d012      	beq.n	8003b6c <UART_SetConfig+0x218>
 8003b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b4a:	d802      	bhi.n	8003b52 <UART_SetConfig+0x1fe>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d007      	beq.n	8003b60 <UART_SetConfig+0x20c>
 8003b50:	e012      	b.n	8003b78 <UART_SetConfig+0x224>
 8003b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b56:	d006      	beq.n	8003b66 <UART_SetConfig+0x212>
 8003b58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b5c:	d009      	beq.n	8003b72 <UART_SetConfig+0x21e>
 8003b5e:	e00b      	b.n	8003b78 <UART_SetConfig+0x224>
 8003b60:	2300      	movs	r3, #0
 8003b62:	76fb      	strb	r3, [r7, #27]
 8003b64:	e038      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003b66:	2302      	movs	r3, #2
 8003b68:	76fb      	strb	r3, [r7, #27]
 8003b6a:	e035      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	76fb      	strb	r3, [r7, #27]
 8003b70:	e032      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003b72:	2308      	movs	r3, #8
 8003b74:	76fb      	strb	r3, [r7, #27]
 8003b76:	e02f      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003b78:	2310      	movs	r3, #16
 8003b7a:	76fb      	strb	r3, [r7, #27]
 8003b7c:	bf00      	nop
 8003b7e:	e02b      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a2c      	ldr	r2, [pc, #176]	; (8003c38 <UART_SetConfig+0x2e4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d124      	bne.n	8003bd4 <UART_SetConfig+0x280>
 8003b8a:	4b2d      	ldr	r3, [pc, #180]	; (8003c40 <UART_SetConfig+0x2ec>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b98:	d012      	beq.n	8003bc0 <UART_SetConfig+0x26c>
 8003b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b9e:	d802      	bhi.n	8003ba6 <UART_SetConfig+0x252>
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <UART_SetConfig+0x260>
 8003ba4:	e012      	b.n	8003bcc <UART_SetConfig+0x278>
 8003ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003baa:	d006      	beq.n	8003bba <UART_SetConfig+0x266>
 8003bac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bb0:	d009      	beq.n	8003bc6 <UART_SetConfig+0x272>
 8003bb2:	e00b      	b.n	8003bcc <UART_SetConfig+0x278>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	76fb      	strb	r3, [r7, #27]
 8003bb8:	e00e      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	76fb      	strb	r3, [r7, #27]
 8003bbe:	e00b      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	76fb      	strb	r3, [r7, #27]
 8003bc4:	e008      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003bc6:	2308      	movs	r3, #8
 8003bc8:	76fb      	strb	r3, [r7, #27]
 8003bca:	e005      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003bcc:	2310      	movs	r3, #16
 8003bce:	76fb      	strb	r3, [r7, #27]
 8003bd0:	bf00      	nop
 8003bd2:	e001      	b.n	8003bd8 <UART_SetConfig+0x284>
 8003bd4:	2310      	movs	r3, #16
 8003bd6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <UART_SetConfig+0x2e4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	f040 8087 	bne.w	8003cf2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003be4:	7efb      	ldrb	r3, [r7, #27]
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d836      	bhi.n	8003c58 <UART_SetConfig+0x304>
 8003bea:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <UART_SetConfig+0x29c>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c15 	.word	0x08003c15
 8003bf4:	08003c59 	.word	0x08003c59
 8003bf8:	08003c1d 	.word	0x08003c1d
 8003bfc:	08003c59 	.word	0x08003c59
 8003c00:	08003c23 	.word	0x08003c23
 8003c04:	08003c59 	.word	0x08003c59
 8003c08:	08003c59 	.word	0x08003c59
 8003c0c:	08003c59 	.word	0x08003c59
 8003c10:	08003c2b 	.word	0x08003c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c14:	f7fe fcea 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 8003c18:	6178      	str	r0, [r7, #20]
        break;
 8003c1a:	e022      	b.n	8003c62 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <UART_SetConfig+0x300>)
 8003c1e:	617b      	str	r3, [r7, #20]
        break;
 8003c20:	e01f      	b.n	8003c62 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c22:	f7fe fc4d 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 8003c26:	6178      	str	r0, [r7, #20]
        break;
 8003c28:	e01b      	b.n	8003c62 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2e:	617b      	str	r3, [r7, #20]
        break;
 8003c30:	e017      	b.n	8003c62 <UART_SetConfig+0x30e>
 8003c32:	bf00      	nop
 8003c34:	efff69f3 	.word	0xefff69f3
 8003c38:	40008000 	.word	0x40008000
 8003c3c:	40013800 	.word	0x40013800
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40004400 	.word	0x40004400
 8003c48:	40004800 	.word	0x40004800
 8003c4c:	40004c00 	.word	0x40004c00
 8003c50:	40005000 	.word	0x40005000
 8003c54:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	76bb      	strb	r3, [r7, #26]
        break;
 8003c60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80f1 	beq.w	8003e4c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	4413      	add	r3, r2
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d305      	bcc.n	8003c86 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d902      	bls.n	8003c8c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	76bb      	strb	r3, [r7, #26]
 8003c8a:	e0df      	b.n	8003e4c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	4619      	mov	r1, r3
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	f04f 0400 	mov.w	r4, #0
 8003c9c:	0214      	lsls	r4, r2, #8
 8003c9e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003ca2:	020b      	lsls	r3, r1, #8
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6852      	ldr	r2, [r2, #4]
 8003ca8:	0852      	lsrs	r2, r2, #1
 8003caa:	4611      	mov	r1, r2
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	eb13 0b01 	adds.w	fp, r3, r1
 8003cb4:	eb44 0c02 	adc.w	ip, r4, r2
 8003cb8:	4658      	mov	r0, fp
 8003cba:	4661      	mov	r1, ip
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f04f 0400 	mov.w	r4, #0
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4623      	mov	r3, r4
 8003cc8:	f7fc fad2 	bl	8000270 <__aeabi_uldivmod>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	460c      	mov	r4, r1
 8003cd0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cd8:	d308      	bcc.n	8003cec <UART_SetConfig+0x398>
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce0:	d204      	bcs.n	8003cec <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	60da      	str	r2, [r3, #12]
 8003cea:	e0af      	b.n	8003e4c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	76bb      	strb	r3, [r7, #26]
 8003cf0:	e0ac      	b.n	8003e4c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cfa:	d15b      	bne.n	8003db4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003cfc:	7efb      	ldrb	r3, [r7, #27]
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d827      	bhi.n	8003d52 <UART_SetConfig+0x3fe>
 8003d02:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <UART_SetConfig+0x3b4>)
 8003d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d08:	08003d2d 	.word	0x08003d2d
 8003d0c:	08003d35 	.word	0x08003d35
 8003d10:	08003d3d 	.word	0x08003d3d
 8003d14:	08003d53 	.word	0x08003d53
 8003d18:	08003d43 	.word	0x08003d43
 8003d1c:	08003d53 	.word	0x08003d53
 8003d20:	08003d53 	.word	0x08003d53
 8003d24:	08003d53 	.word	0x08003d53
 8003d28:	08003d4b 	.word	0x08003d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d2c:	f7fe fc5e 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 8003d30:	6178      	str	r0, [r7, #20]
        break;
 8003d32:	e013      	b.n	8003d5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d34:	f7fe fc70 	bl	8002618 <HAL_RCC_GetPCLK2Freq>
 8003d38:	6178      	str	r0, [r7, #20]
        break;
 8003d3a:	e00f      	b.n	8003d5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d3c:	4b49      	ldr	r3, [pc, #292]	; (8003e64 <UART_SetConfig+0x510>)
 8003d3e:	617b      	str	r3, [r7, #20]
        break;
 8003d40:	e00c      	b.n	8003d5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d42:	f7fe fbbd 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 8003d46:	6178      	str	r0, [r7, #20]
        break;
 8003d48:	e008      	b.n	8003d5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d4e:	617b      	str	r3, [r7, #20]
        break;
 8003d50:	e004      	b.n	8003d5c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	76bb      	strb	r3, [r7, #26]
        break;
 8003d5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d074      	beq.n	8003e4c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	005a      	lsls	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	085b      	lsrs	r3, r3, #1
 8003d6c:	441a      	add	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b0f      	cmp	r3, #15
 8003d7e:	d916      	bls.n	8003dae <UART_SetConfig+0x45a>
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d86:	d212      	bcs.n	8003dae <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f023 030f 	bic.w	r3, r3, #15
 8003d90:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	89fb      	ldrh	r3, [r7, #14]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	89fa      	ldrh	r2, [r7, #14]
 8003daa:	60da      	str	r2, [r3, #12]
 8003dac:	e04e      	b.n	8003e4c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	76bb      	strb	r3, [r7, #26]
 8003db2:	e04b      	b.n	8003e4c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003db4:	7efb      	ldrb	r3, [r7, #27]
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d827      	bhi.n	8003e0a <UART_SetConfig+0x4b6>
 8003dba:	a201      	add	r2, pc, #4	; (adr r2, 8003dc0 <UART_SetConfig+0x46c>)
 8003dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc0:	08003de5 	.word	0x08003de5
 8003dc4:	08003ded 	.word	0x08003ded
 8003dc8:	08003df5 	.word	0x08003df5
 8003dcc:	08003e0b 	.word	0x08003e0b
 8003dd0:	08003dfb 	.word	0x08003dfb
 8003dd4:	08003e0b 	.word	0x08003e0b
 8003dd8:	08003e0b 	.word	0x08003e0b
 8003ddc:	08003e0b 	.word	0x08003e0b
 8003de0:	08003e03 	.word	0x08003e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de4:	f7fe fc02 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 8003de8:	6178      	str	r0, [r7, #20]
        break;
 8003dea:	e013      	b.n	8003e14 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dec:	f7fe fc14 	bl	8002618 <HAL_RCC_GetPCLK2Freq>
 8003df0:	6178      	str	r0, [r7, #20]
        break;
 8003df2:	e00f      	b.n	8003e14 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df4:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <UART_SetConfig+0x510>)
 8003df6:	617b      	str	r3, [r7, #20]
        break;
 8003df8:	e00c      	b.n	8003e14 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dfa:	f7fe fb61 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 8003dfe:	6178      	str	r0, [r7, #20]
        break;
 8003e00:	e008      	b.n	8003e14 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e06:	617b      	str	r3, [r7, #20]
        break;
 8003e08:	e004      	b.n	8003e14 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	76bb      	strb	r3, [r7, #26]
        break;
 8003e12:	bf00      	nop
    }

    if (pclk != 0U)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d018      	beq.n	8003e4c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	085a      	lsrs	r2, r3, #1
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	441a      	add	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b0f      	cmp	r3, #15
 8003e34:	d908      	bls.n	8003e48 <UART_SetConfig+0x4f4>
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e3c:	d204      	bcs.n	8003e48 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	60da      	str	r2, [r3, #12]
 8003e46:	e001      	b.n	8003e4c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003e58:	7ebb      	ldrb	r3, [r7, #26]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3720      	adds	r7, #32
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003e64:	00f42400 	.word	0x00f42400

08003e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01a      	beq.n	8003f7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f66:	d10a      	bne.n	8003f7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	605a      	str	r2, [r3, #4]
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003fba:	f7fd f91b 	bl	80011f4 <HAL_GetTick>
 8003fbe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d10e      	bne.n	8003fec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f82a 	bl	8004036 <UART_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e020      	b.n	800402e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d10e      	bne.n	8004018 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ffa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f814 	bl	8004036 <UART_WaitOnFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e00a      	b.n	800402e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	603b      	str	r3, [r7, #0]
 8004042:	4613      	mov	r3, r2
 8004044:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004046:	e05d      	b.n	8004104 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800404e:	d059      	beq.n	8004104 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004050:	f7fd f8d0 	bl	80011f4 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	429a      	cmp	r2, r3
 800405e:	d302      	bcc.n	8004066 <UART_WaitOnFlagUntilTimeout+0x30>
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d11b      	bne.n	800409e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004074:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0201 	bic.w	r2, r2, #1
 8004084:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e042      	b.n	8004124 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d02b      	beq.n	8004104 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ba:	d123      	bne.n	8004104 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040d4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0201 	bic.w	r2, r2, #1
 80040e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2220      	movs	r2, #32
 80040f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e00f      	b.n	8004124 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69da      	ldr	r2, [r3, #28]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	4013      	ands	r3, r2
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	429a      	cmp	r2, r3
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	429a      	cmp	r2, r3
 8004120:	d092      	beq.n	8004048 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08c      	sub	sp, #48	; 0x30
 8004130:	af00      	add	r7, sp, #0
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	4603      	mov	r3, r0
 8004136:	71fb      	strb	r3, [r7, #7]
 8004138:	460b      	mov	r3, r1
 800413a:	71bb      	strb	r3, [r7, #6]
 800413c:	4613      	mov	r3, r2
 800413e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8004144:	79bb      	ldrb	r3, [r7, #6]
 8004146:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8004148:	797b      	ldrb	r3, [r7, #5]
 800414a:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800414c:	f107 030c 	add.w	r3, r7, #12
 8004150:	2207      	movs	r2, #7
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fd40 	bl	8004bda <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800415a:	f107 0318 	add.w	r3, r7, #24
 800415e:	2218      	movs	r2, #24
 8004160:	2100      	movs	r1, #0
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fd39 	bl	8004bda <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004168:	233f      	movs	r3, #63	; 0x3f
 800416a:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800416c:	238a      	movs	r3, #138	; 0x8a
 800416e:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8004170:	f107 0314 	add.w	r3, r7, #20
 8004174:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8004176:	2303      	movs	r3, #3
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 800417a:	f107 030c 	add.w	r3, r7, #12
 800417e:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8004180:	2307      	movs	r3, #7
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004184:	f107 0318 	add.w	r3, r7, #24
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fa58 	bl	8004640 <hci_send_req>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	da01      	bge.n	800419a <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8004196:	23ff      	movs	r3, #255	; 0xff
 8004198:	e014      	b.n	80041c4 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800419a:	7b3b      	ldrb	r3, [r7, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 80041a0:	7b3b      	ldrb	r3, [r7, #12]
 80041a2:	e00f      	b.n	80041c4 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 80041a4:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80041ae:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b6:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80041b8:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 80041bc:	b29a      	uxth	r2, r3
 80041be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c0:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3730      	adds	r7, #48	; 0x30
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 80041cc:	b590      	push	{r4, r7, lr}
 80041ce:	b091      	sub	sp, #68	; 0x44
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	603a      	str	r2, [r7, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	4603      	mov	r3, r0
 80041d8:	71fb      	strb	r3, [r7, #7]
 80041da:	460b      	mov	r3, r1
 80041dc:	71bb      	strb	r3, [r7, #6]
 80041de:	4613      	mov	r3, r2
 80041e0:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 80041e6:	79bb      	ldrb	r3, [r7, #6]
 80041e8:	737b      	strb	r3, [r7, #13]
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	f107 030e 	add.w	r3, r7, #14
 80041f0:	6814      	ldr	r4, [r2, #0]
 80041f2:	6850      	ldr	r0, [r2, #4]
 80041f4:	6891      	ldr	r1, [r2, #8]
 80041f6:	68d2      	ldr	r2, [r2, #12]
 80041f8:	601c      	str	r4, [r3, #0]
 80041fa:	6058      	str	r0, [r3, #4]
 80041fc:	6099      	str	r1, [r3, #8]
 80041fe:	60da      	str	r2, [r3, #12]
  cp.min_encryption_key_size = min_encryption_key_size;
 8004200:	797b      	ldrb	r3, [r7, #5]
 8004202:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8004204:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004208:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800420a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800420e:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8004212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004214:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 8004218:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800421c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004220:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004224:	2218      	movs	r2, #24
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fcd6 	bl	8004bda <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800422e:	233f      	movs	r3, #63	; 0x3f
 8004230:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8004232:	2386      	movs	r3, #134	; 0x86
 8004234:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 8004236:	f107 030c 	add.w	r3, r7, #12
 800423a:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 800423c:	231a      	movs	r3, #26
 800423e:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8004240:	f107 030b 	add.w	r3, r7, #11
 8004244:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 8004246:	2301      	movs	r3, #1
 8004248:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800424a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800424e:	2100      	movs	r1, #0
 8004250:	4618      	mov	r0, r3
 8004252:	f000 f9f5 	bl	8004640 <hci_send_req>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	da01      	bge.n	8004260 <aci_gap_set_auth_requirement+0x94>
    return BLE_STATUS_TIMEOUT;
 800425c:	23ff      	movs	r3, #255	; 0xff
 800425e:	e005      	b.n	800426c <aci_gap_set_auth_requirement+0xa0>

  if (status) {
 8004260:	7afb      	ldrb	r3, [r7, #11]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <aci_gap_set_auth_requirement+0x9e>
    return status;
 8004266:	7afb      	ldrb	r3, [r7, #11]
 8004268:	e000      	b.n	800426c <aci_gap_set_auth_requirement+0xa0>
  }
    
  return 0;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3744      	adds	r7, #68	; 0x44
 8004270:	46bd      	mov	sp, r7
 8004272:	bd90      	pop	{r4, r7, pc}

08004274 <aci_gap_start_general_discovery_proc>:
  return status;
}

tBleStatus aci_gap_start_general_discovery_proc(uint16_t scanInterval, uint16_t scanWindow,
						uint8_t own_address_type, uint8_t filterDuplicates)
{
 8004274:	b590      	push	{r4, r7, lr}
 8004276:	b08d      	sub	sp, #52	; 0x34
 8004278:	af00      	add	r7, sp, #0
 800427a:	4604      	mov	r4, r0
 800427c:	4608      	mov	r0, r1
 800427e:	4611      	mov	r1, r2
 8004280:	461a      	mov	r2, r3
 8004282:	4623      	mov	r3, r4
 8004284:	80fb      	strh	r3, [r7, #6]
 8004286:	4603      	mov	r3, r0
 8004288:	80bb      	strh	r3, [r7, #4]
 800428a:	460b      	mov	r3, r1
 800428c:	70fb      	strb	r3, [r7, #3]
 800428e:	4613      	mov	r3, r2
 8004290:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  gap_start_general_discovery_proc_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	823b      	strh	r3, [r7, #16]
  cp.scanWindow = htobs(scanWindow);
 8004296:	88bb      	ldrh	r3, [r7, #4]
 8004298:	827b      	strh	r3, [r7, #18]
  cp.own_address_type = own_address_type;
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	753b      	strb	r3, [r7, #20]
  cp.filterDuplicates = filterDuplicates;
 800429e:	78bb      	ldrb	r3, [r7, #2]
 80042a0:	757b      	strb	r3, [r7, #21]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80042a2:	f107 0318 	add.w	r3, r7, #24
 80042a6:	2218      	movs	r2, #24
 80042a8:	2100      	movs	r1, #0
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fc95 	bl	8004bda <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80042b0:	233f      	movs	r3, #63	; 0x3f
 80042b2:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_START_GENERAL_DISCOVERY_PROC;
 80042b4:	2397      	movs	r3, #151	; 0x97
 80042b6:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 80042b8:	f107 0310 	add.w	r3, r7, #16
 80042bc:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 80042be:	2306      	movs	r3, #6
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
  rq.event = EVT_CMD_STATUS;
 80042c2:	230f      	movs	r3, #15
 80042c4:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 80042c6:	f107 030f 	add.w	r3, r7, #15
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = 1;
 80042cc:	2301      	movs	r3, #1
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 80042d0:	f107 0318 	add.w	r3, r7, #24
 80042d4:	2100      	movs	r1, #0
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f9b2 	bl	8004640 <hci_send_req>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	da01      	bge.n	80042e6 <aci_gap_start_general_discovery_proc+0x72>
    return BLE_STATUS_TIMEOUT;
 80042e2:	23ff      	movs	r3, #255	; 0xff
 80042e4:	e000      	b.n	80042e8 <aci_gap_start_general_discovery_proc+0x74>

  return status;
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3734      	adds	r7, #52	; 0x34
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd90      	pop	{r4, r7, pc}

080042f0 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80042f6:	f107 0308 	add.w	r3, r7, #8
 80042fa:	2218      	movs	r2, #24
 80042fc:	2100      	movs	r1, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fc6b 	bl	8004bda <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004304:	233f      	movs	r3, #63	; 0x3f
 8004306:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8004308:	f240 1301 	movw	r3, #257	; 0x101
 800430c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800430e:	1dfb      	adds	r3, r7, #7
 8004310:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004312:	2301      	movs	r3, #1
 8004314:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8004316:	f107 0308 	add.w	r3, r7, #8
 800431a:	2100      	movs	r1, #0
 800431c:	4618      	mov	r0, r3
 800431e:	f000 f98f 	bl	8004640 <hci_send_req>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	da01      	bge.n	800432c <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8004328:	23ff      	movs	r3, #255	; 0xff
 800432a:	e000      	b.n	800432e <aci_gatt_init+0x3e>

  return status;
 800432c:	79fb      	ldrb	r3, [r7, #7]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b0aa      	sub	sp, #168	; 0xa8
 800433a:	af00      	add	r7, sp, #0
 800433c:	4603      	mov	r3, r0
 800433e:	603a      	str	r2, [r7, #0]
 8004340:	71fb      	strb	r3, [r7, #7]
 8004342:	460b      	mov	r3, r1
 8004344:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800434c:	79bb      	ldrb	r3, [r7, #6]
 800434e:	3302      	adds	r3, #2
 8004350:	2b80      	cmp	r3, #128	; 0x80
 8004352:	dd01      	ble.n	8004358 <aci_hal_write_config_data+0x22>
    return BLE_STATUS_INVALID_PARAMS;
 8004354:	2342      	movs	r3, #66	; 0x42
 8004356:	e052      	b.n	80043fe <aci_hal_write_config_data+0xc8>

  buffer[indx] = offset;
 8004358:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800435c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004360:	4413      	add	r3, r2
 8004362:	79fa      	ldrb	r2, [r7, #7]
 8004364:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8004368:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800436c:	3301      	adds	r3, #1
 800436e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 8004372:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004376:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800437a:	4413      	add	r3, r2
 800437c:	79ba      	ldrb	r2, [r7, #6]
 800437e:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8004382:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004386:	3301      	adds	r3, #1
 8004388:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800438c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004390:	f107 0208 	add.w	r2, r7, #8
 8004394:	4413      	add	r3, r2
 8004396:	79ba      	ldrb	r2, [r7, #6]
 8004398:	6839      	ldr	r1, [r7, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fc12 	bl	8004bc4 <memcpy>
  indx +=  len;
 80043a0:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80043a4:	79bb      	ldrb	r3, [r7, #6]
 80043a6:	4413      	add	r3, r2
 80043a8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80043ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80043b0:	2218      	movs	r2, #24
 80043b2:	2100      	movs	r1, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fc10 	bl	8004bda <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80043ba:	233f      	movs	r3, #63	; 0x3f
 80043bc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 80043c0:	230c      	movs	r3, #12
 80043c2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 80043c6:	f107 0308 	add.w	r3, r7, #8
 80043ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 80043ce:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80043d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 80043d6:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 80043da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 80043de:	2301      	movs	r3, #1
 80043e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 80043e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80043e8:	2100      	movs	r1, #0
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 f928 	bl	8004640 <hci_send_req>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	da01      	bge.n	80043fa <aci_hal_write_config_data+0xc4>
    return BLE_STATUS_TIMEOUT;
 80043f6:	23ff      	movs	r3, #255	; 0xff
 80043f8:	e001      	b.n	80043fe <aci_hal_write_config_data+0xc8>

  return status;
 80043fa:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 80043fe:	4618      	mov	r0, r3
 8004400:	37a8      	adds	r7, #168	; 0xa8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b088      	sub	sp, #32
 800440a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800440c:	f107 0308 	add.w	r3, r7, #8
 8004410:	2218      	movs	r2, #24
 8004412:	2100      	movs	r1, #0
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fbe0 	bl	8004bda <memset>
  rq.ogf = OGF_HOST_CTL;
 800441a:	2303      	movs	r3, #3
 800441c:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800441e:	2303      	movs	r3, #3
 8004420:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004422:	1dfb      	adds	r3, r7, #7
 8004424:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004426:	2301      	movs	r3, #1
 8004428:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800442a:	f107 0308 	add.w	r3, r7, #8
 800442e:	2100      	movs	r1, #0
 8004430:	4618      	mov	r0, r3
 8004432:	f000 f905 	bl	8004640 <hci_send_req>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	da01      	bge.n	8004440 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800443c:	23ff      	movs	r3, #255	; 0xff
 800443e:	e000      	b.n	8004442 <hci_reset+0x3c>
  
  return status;  
 8004440:	79fb      	ldrb	r3, [r7, #7]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800444a:	b480      	push	{r7}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3308      	adds	r3, #8
 8004456:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b04      	cmp	r3, #4
 800445e:	d001      	beq.n	8004464 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8004460:	2301      	movs	r3, #1
 8004462:	e00c      	b.n	800447e <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3302      	adds	r3, #2
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8004472:	3b03      	subs	r3, #3
 8004474:	429a      	cmp	r2, r3
 8004476:	d001      	beq.n	800447c <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8004478:	2302      	movs	r3, #2
 800447a:	e000      	b.n	800447e <verify_packet+0x34>
  
  return 0;      
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
	...

0800448c <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b0a6      	sub	sp, #152	; 0x98
 8004490:	af00      	add	r7, sp, #0
 8004492:	607b      	str	r3, [r7, #4]
 8004494:	4603      	mov	r3, r0
 8004496:	81fb      	strh	r3, [r7, #14]
 8004498:	460b      	mov	r3, r1
 800449a:	81bb      	strh	r3, [r7, #12]
 800449c:	4613      	mov	r3, r2
 800449e:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80044a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044a8:	b21a      	sxth	r2, r3
 80044aa:	89fb      	ldrh	r3, [r7, #14]
 80044ac:	029b      	lsls	r3, r3, #10
 80044ae:	b21b      	sxth	r3, r3
 80044b0:	4313      	orrs	r3, r2
 80044b2:	b21b      	sxth	r3, r3
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 80044b8:	7afb      	ldrb	r3, [r7, #11]
 80044ba:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 80044bc:	2301      	movs	r3, #1
 80044be:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80044c0:	f107 0318 	add.w	r3, r7, #24
 80044c4:	3301      	adds	r3, #1
 80044c6:	461a      	mov	r2, r3
 80044c8:	f107 0314 	add.w	r3, r7, #20
 80044cc:	8819      	ldrh	r1, [r3, #0]
 80044ce:	789b      	ldrb	r3, [r3, #2]
 80044d0:	8011      	strh	r1, [r2, #0]
 80044d2:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80044d4:	f107 0318 	add.w	r3, r7, #24
 80044d8:	3304      	adds	r3, #4
 80044da:	7afa      	ldrb	r2, [r7, #11]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fb70 	bl	8004bc4 <memcpy>
  
  if (hciContext.io.Send)
 80044e4:	4b08      	ldr	r3, [pc, #32]	; (8004508 <send_cmd+0x7c>)
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d009      	beq.n	8004500 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80044ec:	4b06      	ldr	r3, [pc, #24]	; (8004508 <send_cmd+0x7c>)
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	7afa      	ldrb	r2, [r7, #11]
 80044f2:	b292      	uxth	r2, r2
 80044f4:	3204      	adds	r2, #4
 80044f6:	b291      	uxth	r1, r2
 80044f8:	f107 0218 	add.w	r2, r7, #24
 80044fc:	4610      	mov	r0, r2
 80044fe:	4798      	blx	r3
  }
}
 8004500:	bf00      	nop
 8004502:	3798      	adds	r7, #152	; 0x98
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000450 	.word	0x20000450

0800450c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8004516:	e00a      	b.n	800452e <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8004518:	f107 030c 	add.w	r3, r7, #12
 800451c:	4619      	mov	r1, r3
 800451e:	6838      	ldr	r0, [r7, #0]
 8004520:	f000 fada 	bl	8004ad8 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4619      	mov	r1, r3
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fa49 	bl	80049c0 <list_insert_head>
  while (!list_is_empty(src_list))
 800452e:	6838      	ldr	r0, [r7, #0]
 8004530:	f000 fa26 	bl	8004980 <list_is_empty>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0ee      	beq.n	8004518 <move_list+0xc>
  }
}
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800454a:	e009      	b.n	8004560 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800454c:	1d3b      	adds	r3, r7, #4
 800454e:	4619      	mov	r1, r3
 8004550:	4808      	ldr	r0, [pc, #32]	; (8004574 <free_event_list+0x30>)
 8004552:	f000 fa9c 	bl	8004a8e <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4619      	mov	r1, r3
 800455a:	4807      	ldr	r0, [pc, #28]	; (8004578 <free_event_list+0x34>)
 800455c:	f000 fa54 	bl	8004a08 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8004560:	4805      	ldr	r0, [pc, #20]	; (8004578 <free_event_list+0x34>)
 8004562:	f000 fade 	bl	8004b22 <list_get_size>
 8004566:	4603      	mov	r3, r0
 8004568:	2b01      	cmp	r3, #1
 800456a:	ddef      	ble.n	800454c <free_event_list+0x8>
  }
}
 800456c:	bf00      	nop
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	200005b0 	.word	0x200005b0
 8004578:	200005a8 	.word	0x200005a8

0800457c <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800458c:	4a18      	ldr	r2, [pc, #96]	; (80045f0 <hci_init+0x74>)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8004592:	4818      	ldr	r0, [pc, #96]	; (80045f4 <hci_init+0x78>)
 8004594:	f000 f9e4 	bl	8004960 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8004598:	4817      	ldr	r0, [pc, #92]	; (80045f8 <hci_init+0x7c>)
 800459a:	f000 f9e1 	bl	8004960 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800459e:	f7fc f91b 	bl	80007d8 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80045a2:	2300      	movs	r3, #0
 80045a4:	73fb      	strb	r3, [r7, #15]
 80045a6:	e00c      	b.n	80045c2 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	228c      	movs	r2, #140	; 0x8c
 80045ac:	fb02 f303 	mul.w	r3, r2, r3
 80045b0:	4a12      	ldr	r2, [pc, #72]	; (80045fc <hci_init+0x80>)
 80045b2:	4413      	add	r3, r2
 80045b4:	4619      	mov	r1, r3
 80045b6:	480f      	ldr	r0, [pc, #60]	; (80045f4 <hci_init+0x78>)
 80045b8:	f000 fa26 	bl	8004a08 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	3301      	adds	r3, #1
 80045c0:	73fb      	strb	r3, [r7, #15]
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d9ef      	bls.n	80045a8 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 80045c8:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <hci_init+0x74>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <hci_init+0x5c>
 80045d0:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <hci_init+0x74>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2000      	movs	r0, #0
 80045d6:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <hci_init+0x74>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <hci_init+0x6a>
 80045e0:	4b03      	ldr	r3, [pc, #12]	; (80045f0 <hci_init+0x74>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	4798      	blx	r3
}
 80045e6:	bf00      	nop
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20000450 	.word	0x20000450
 80045f4:	200005a8 	.word	0x200005a8
 80045f8:	200005b0 	.word	0x200005b0
 80045fc:	20000194 	.word	0x20000194

08004600 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a0b      	ldr	r2, [pc, #44]	; (800463c <hci_register_io_bus+0x3c>)
 800460e:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4a09      	ldr	r2, [pc, #36]	; (800463c <hci_register_io_bus+0x3c>)
 8004616:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	4a07      	ldr	r2, [pc, #28]	; (800463c <hci_register_io_bus+0x3c>)
 800461e:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	4a05      	ldr	r2, [pc, #20]	; (800463c <hci_register_io_bus+0x3c>)
 8004626:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4a03      	ldr	r2, [pc, #12]	; (800463c <hci_register_io_bus+0x3c>)
 800462e:	6093      	str	r3, [r2, #8]
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	20000450 	.word	0x20000450

08004640 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08e      	sub	sp, #56	; 0x38
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	885b      	ldrh	r3, [r3, #2]
 8004650:	b21b      	sxth	r3, r3
 8004652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004656:	b21a      	sxth	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	029b      	lsls	r3, r3, #10
 800465e:	b21b      	sxth	r3, r3
 8004660:	4313      	orrs	r3, r2
 8004662:	b21b      	sxth	r3, r3
 8004664:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800466a:	f107 0308 	add.w	r3, r7, #8
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f976 	bl	8004960 <list_init_head>

  free_event_list();
 8004674:	f7ff ff66 	bl	8004544 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8818      	ldrh	r0, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8859      	ldrh	r1, [r3, #2]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	b2da      	uxtb	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f7ff feff 	bl	800448c <send_cmd>
  
  if (async)
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <hci_send_req+0x58>
  {
    return 0;
 8004694:	2300      	movs	r3, #0
 8004696:	e0e2      	b.n	800485e <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8004698:	f7fc fdac 	bl	80011f4 <HAL_GetTick>
 800469c:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800469e:	f7fc fda9 	bl	80011f4 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046ac:	f200 80b3 	bhi.w	8004816 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80046b0:	486d      	ldr	r0, [pc, #436]	; (8004868 <hci_send_req+0x228>)
 80046b2:	f000 f965 	bl	8004980 <list_is_empty>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d000      	beq.n	80046be <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80046bc:	e7ef      	b.n	800469e <hci_send_req+0x5e>
      {
        break;
 80046be:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80046c0:	f107 0310 	add.w	r3, r7, #16
 80046c4:	4619      	mov	r1, r3
 80046c6:	4868      	ldr	r0, [pc, #416]	; (8004868 <hci_send_req+0x228>)
 80046c8:	f000 f9e1 	bl	8004a8e <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	3308      	adds	r3, #8
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d17a      	bne.n	80047d0 <hci_send_req+0x190>
    {
      event_pckt = (void *)(hci_hdr->data);
 80046da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046dc:	3301      	adds	r3, #1
 80046de:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	3308      	adds	r3, #8
 80046e4:	3303      	adds	r3, #3
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80046ee:	3b03      	subs	r3, #3
 80046f0:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	2b0f      	cmp	r3, #15
 80046f8:	d00a      	beq.n	8004710 <hci_send_req+0xd0>
 80046fa:	2b0f      	cmp	r3, #15
 80046fc:	dc02      	bgt.n	8004704 <hci_send_req+0xc4>
 80046fe:	2b0e      	cmp	r3, #14
 8004700:	d028      	beq.n	8004754 <hci_send_req+0x114>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8004702:	e06a      	b.n	80047da <hci_send_req+0x19a>
      switch (event_pckt->evt) 
 8004704:	2b10      	cmp	r3, #16
 8004706:	f000 8088 	beq.w	800481a <hci_send_req+0x1da>
 800470a:	2b3e      	cmp	r3, #62	; 0x3e
 800470c:	d042      	beq.n	8004794 <hci_send_req+0x154>
        break;
 800470e:	e064      	b.n	80047da <hci_send_req+0x19a>
        cs = (void *) ptr;
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	61bb      	str	r3, [r7, #24]
        if (cs->opcode != opcode)
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	885b      	ldrh	r3, [r3, #2]
 8004718:	b29b      	uxth	r3, r3
 800471a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800471c:	429a      	cmp	r2, r3
 800471e:	d17e      	bne.n	800481e <hci_send_req+0x1de>
        if (r->event != EVT_CMD_STATUS) {
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b0f      	cmp	r3, #15
 8004726:	d004      	beq.n	8004732 <hci_send_req+0xf2>
          if (cs->status) {
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d051      	beq.n	80047d4 <hci_send_req+0x194>
            goto failed;
 8004730:	e078      	b.n	8004824 <hci_send_req+0x1e4>
        r->rlen = MIN(len, r->rlen);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695a      	ldr	r2, [r3, #20]
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	429a      	cmp	r2, r3
 800473a:	bf28      	it	cs
 800473c:	461a      	movcs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6918      	ldr	r0, [r3, #16]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	461a      	mov	r2, r3
 800474c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800474e:	f000 fa39 	bl	8004bc4 <memcpy>
        goto done;
 8004752:	e078      	b.n	8004846 <hci_send_req+0x206>
        cc = (void *) ptr;
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	617b      	str	r3, [r7, #20]
        if (cc->opcode != opcode)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800475e:	b29b      	uxth	r3, r3
 8004760:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004762:	429a      	cmp	r2, r3
 8004764:	d15d      	bne.n	8004822 <hci_send_req+0x1e2>
        ptr += EVT_CMD_COMPLETE_SIZE;
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	3303      	adds	r3, #3
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	3b03      	subs	r3, #3
 8004770:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695a      	ldr	r2, [r3, #20]
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	429a      	cmp	r2, r3
 800477a:	bf28      	it	cs
 800477c:	461a      	movcs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6918      	ldr	r0, [r3, #16]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	461a      	mov	r2, r3
 800478c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800478e:	f000 fa19 	bl	8004bc4 <memcpy>
        goto done;
 8004792:	e058      	b.n	8004846 <hci_send_req+0x206>
        me = (void *) ptr;
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	61fb      	str	r3, [r7, #28]
        if (me->subevent != r->event)
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d118      	bne.n	80047d8 <hci_send_req+0x198>
        len -= 1;
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	695a      	ldr	r2, [r3, #20]
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	bf28      	it	cs
 80047b6:	461a      	movcs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6918      	ldr	r0, [r3, #16]
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	1c59      	adds	r1, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	461a      	mov	r2, r3
 80047ca:	f000 f9fb 	bl	8004bc4 <memcpy>
        goto done;
 80047ce:	e03a      	b.n	8004846 <hci_send_req+0x206>
      }
    }
 80047d0:	bf00      	nop
 80047d2:	e002      	b.n	80047da <hci_send_req+0x19a>
          break;
 80047d4:	bf00      	nop
 80047d6:	e000      	b.n	80047da <hci_send_req+0x19a>
          break;
 80047d8:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80047da:	4824      	ldr	r0, [pc, #144]	; (800486c <hci_send_req+0x22c>)
 80047dc:	f000 f8d0 	bl	8004980 <list_is_empty>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00d      	beq.n	8004802 <hci_send_req+0x1c2>
 80047e6:	4820      	ldr	r0, [pc, #128]	; (8004868 <hci_send_req+0x228>)
 80047e8:	f000 f8ca 	bl	8004980 <list_is_empty>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4619      	mov	r1, r3
 80047f6:	481d      	ldr	r0, [pc, #116]	; (800486c <hci_send_req+0x22c>)
 80047f8:	f000 f906 	bl	8004a08 <list_insert_tail>
      hciReadPacket=NULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	e008      	b.n	8004814 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	f107 0308 	add.w	r3, r7, #8
 8004808:	4611      	mov	r1, r2
 800480a:	4618      	mov	r0, r3
 800480c:	f000 f8fc 	bl	8004a08 <list_insert_tail>
      hciReadPacket=NULL;
 8004810:	2300      	movs	r3, #0
 8004812:	613b      	str	r3, [r7, #16]
  {
 8004814:	e740      	b.n	8004698 <hci_send_req+0x58>
        goto failed;
 8004816:	bf00      	nop
 8004818:	e004      	b.n	8004824 <hci_send_req+0x1e4>
        goto failed;
 800481a:	bf00      	nop
 800481c:	e002      	b.n	8004824 <hci_send_req+0x1e4>
          goto failed;
 800481e:	bf00      	nop
 8004820:	e000      	b.n	8004824 <hci_send_req+0x1e4>
          goto failed;
 8004822:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d004      	beq.n	8004834 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	4619      	mov	r1, r3
 800482e:	480f      	ldr	r0, [pc, #60]	; (800486c <hci_send_req+0x22c>)
 8004830:	f000 f8c6 	bl	80049c0 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8004834:	f107 0308 	add.w	r3, r7, #8
 8004838:	4619      	mov	r1, r3
 800483a:	480b      	ldr	r0, [pc, #44]	; (8004868 <hci_send_req+0x228>)
 800483c:	f7ff fe66 	bl	800450c <move_list>

  return -1;
 8004840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004844:	e00b      	b.n	800485e <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4619      	mov	r1, r3
 800484a:	4808      	ldr	r0, [pc, #32]	; (800486c <hci_send_req+0x22c>)
 800484c:	f000 f8b8 	bl	80049c0 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8004850:	f107 0308 	add.w	r3, r7, #8
 8004854:	4619      	mov	r1, r3
 8004856:	4804      	ldr	r0, [pc, #16]	; (8004868 <hci_send_req+0x228>)
 8004858:	f7ff fe58 	bl	800450c <move_list>

  return 0;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3738      	adds	r7, #56	; 0x38
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	200005b0 	.word	0x200005b0
 800486c:	200005a8 	.word	0x200005a8

08004870 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8004876:	2300      	movs	r3, #0
 8004878:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800487a:	e013      	b.n	80048a4 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800487c:	1d3b      	adds	r3, r7, #4
 800487e:	4619      	mov	r1, r3
 8004880:	480d      	ldr	r0, [pc, #52]	; (80048b8 <hci_user_evt_proc+0x48>)
 8004882:	f000 f904 	bl	8004a8e <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8004886:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <hci_user_evt_proc+0x4c>)
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800488e:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <hci_user_evt_proc+0x4c>)
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	3208      	adds	r2, #8
 8004896:	4610      	mov	r0, r2
 8004898:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4619      	mov	r1, r3
 800489e:	4808      	ldr	r0, [pc, #32]	; (80048c0 <hci_user_evt_proc+0x50>)
 80048a0:	f000 f8b2 	bl	8004a08 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80048a4:	4804      	ldr	r0, [pc, #16]	; (80048b8 <hci_user_evt_proc+0x48>)
 80048a6:	f000 f86b 	bl	8004980 <list_is_empty>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0e5      	beq.n	800487c <hci_user_evt_proc+0xc>
  }
}
 80048b0:	bf00      	nop
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	200005b0 	.word	0x200005b0
 80048bc:	20000450 	.word	0x20000450
 80048c0:	200005a8 	.word	0x200005a8

080048c4 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80048d4:	481f      	ldr	r0, [pc, #124]	; (8004954 <hci_notify_asynch_evt+0x90>)
 80048d6:	f000 f853 	bl	8004980 <list_is_empty>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d132      	bne.n	8004946 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80048e0:	f107 030c 	add.w	r3, r7, #12
 80048e4:	4619      	mov	r1, r3
 80048e6:	481b      	ldr	r0, [pc, #108]	; (8004954 <hci_notify_asynch_evt+0x90>)
 80048e8:	f000 f8d1 	bl	8004a8e <list_remove_head>
    
    if (hciContext.io.Receive)
 80048ec:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <hci_notify_asynch_evt+0x94>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d02a      	beq.n	800494a <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80048f4:	4b18      	ldr	r3, [pc, #96]	; (8004958 <hci_notify_asynch_evt+0x94>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	3208      	adds	r2, #8
 80048fc:	2180      	movs	r1, #128	; 0x80
 80048fe:	4610      	mov	r0, r2
 8004900:	4798      	blx	r3
 8004902:	4603      	mov	r3, r0
 8004904:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8004906:	7cfb      	ldrb	r3, [r7, #19]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d016      	beq.n	800493a <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	7cfa      	ldrb	r2, [r7, #19]
 8004910:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff fd97 	bl	800444a <verify_packet>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d105      	bne.n	800492e <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4619      	mov	r1, r3
 8004926:	480d      	ldr	r0, [pc, #52]	; (800495c <hci_notify_asynch_evt+0x98>)
 8004928:	f000 f86e 	bl	8004a08 <list_insert_tail>
 800492c:	e00d      	b.n	800494a <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4619      	mov	r1, r3
 8004932:	4808      	ldr	r0, [pc, #32]	; (8004954 <hci_notify_asynch_evt+0x90>)
 8004934:	f000 f844 	bl	80049c0 <list_insert_head>
 8004938:	e007      	b.n	800494a <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4619      	mov	r1, r3
 800493e:	4805      	ldr	r0, [pc, #20]	; (8004954 <hci_notify_asynch_evt+0x90>)
 8004940:	f000 f83e 	bl	80049c0 <list_insert_head>
 8004944:	e001      	b.n	800494a <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8004946:	2301      	movs	r3, #1
 8004948:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800494a:	697b      	ldr	r3, [r7, #20]

}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	200005a8 	.word	0x200005a8
 8004958:	20000450 	.word	0x20000450
 800495c:	200005b0 	.word	0x200005b0

08004960 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	605a      	str	r2, [r3, #4]
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004988:	f3ef 8310 	mrs	r3, PRIMASK
 800498c:	60fb      	str	r3, [r7, #12]
  return(result);
 800498e:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004990:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004992:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	429a      	cmp	r2, r3
 800499c:	d102      	bne.n	80049a4 <list_is_empty+0x24>
  {
    return_value = 1;
 800499e:	2301      	movs	r3, #1
 80049a0:	75fb      	strb	r3, [r7, #23]
 80049a2:	e001      	b.n	80049a8 <list_is_empty+0x28>
  }
  else
  {
    return_value = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	75fb      	strb	r3, [r7, #23]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80049b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	371c      	adds	r7, #28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ca:	f3ef 8310 	mrs	r3, PRIMASK
 80049ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80049d0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80049d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80049d4:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	605a      	str	r2, [r3, #4]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80049fc:	bf00      	nop
 80049fe:	371c      	adds	r7, #28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a12:	f3ef 8310 	mrs	r3, PRIMASK
 8004a16:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a18:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004a1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a1c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004a44:	bf00      	nop
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a58:	f3ef 8310 	mrs	r3, PRIMASK
 8004a5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004a60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a62:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6852      	ldr	r2, [r2, #4]
 8004a76:	605a      	str	r2, [r3, #4]
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004a82:	bf00      	nop
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b086      	sub	sp, #24
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a98:	f3ef 8310 	mrs	r3, PRIMASK
 8004a9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004aa0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004aa2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff ffcd 	bl	8004a50 <list_remove_node>
  (*node)->next = NULL;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	605a      	str	r2, [r3, #4]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004ad0:	bf00      	nop
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004aea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004aec:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff ffa8 	bl	8004a50 <list_remove_node>
  (*node)->next = NULL;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	605a      	str	r2, [r3, #4]
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004b1a:	bf00      	nop
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b089      	sub	sp, #36	; 0x24
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  int size = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b32:	613b      	str	r3, [r7, #16]
  return(result);
 8004b34:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004b36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b38:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8004b40:	e005      	b.n	8004b4e <list_get_size+0x2c>
  {
    size++;
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	3301      	adds	r3, #1
 8004b46:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d1f5      	bne.n	8004b42 <list_get_size+0x20>
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8004b60:	69fb      	ldr	r3, [r7, #28]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3724      	adds	r7, #36	; 0x24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <__errno>:
 8004b70:	4b01      	ldr	r3, [pc, #4]	; (8004b78 <__errno+0x8>)
 8004b72:	6818      	ldr	r0, [r3, #0]
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	2000000c 	.word	0x2000000c

08004b7c <__libc_init_array>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	4e0d      	ldr	r6, [pc, #52]	; (8004bb4 <__libc_init_array+0x38>)
 8004b80:	4c0d      	ldr	r4, [pc, #52]	; (8004bb8 <__libc_init_array+0x3c>)
 8004b82:	1ba4      	subs	r4, r4, r6
 8004b84:	10a4      	asrs	r4, r4, #2
 8004b86:	2500      	movs	r5, #0
 8004b88:	42a5      	cmp	r5, r4
 8004b8a:	d109      	bne.n	8004ba0 <__libc_init_array+0x24>
 8004b8c:	4e0b      	ldr	r6, [pc, #44]	; (8004bbc <__libc_init_array+0x40>)
 8004b8e:	4c0c      	ldr	r4, [pc, #48]	; (8004bc0 <__libc_init_array+0x44>)
 8004b90:	f000 ff10 	bl	80059b4 <_init>
 8004b94:	1ba4      	subs	r4, r4, r6
 8004b96:	10a4      	asrs	r4, r4, #2
 8004b98:	2500      	movs	r5, #0
 8004b9a:	42a5      	cmp	r5, r4
 8004b9c:	d105      	bne.n	8004baa <__libc_init_array+0x2e>
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ba4:	4798      	blx	r3
 8004ba6:	3501      	adds	r5, #1
 8004ba8:	e7ee      	b.n	8004b88 <__libc_init_array+0xc>
 8004baa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bae:	4798      	blx	r3
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	e7f2      	b.n	8004b9a <__libc_init_array+0x1e>
 8004bb4:	08005ad4 	.word	0x08005ad4
 8004bb8:	08005ad4 	.word	0x08005ad4
 8004bbc:	08005ad4 	.word	0x08005ad4
 8004bc0:	08005ad8 	.word	0x08005ad8

08004bc4 <memcpy>:
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	1e43      	subs	r3, r0, #1
 8004bc8:	440a      	add	r2, r1
 8004bca:	4291      	cmp	r1, r2
 8004bcc:	d100      	bne.n	8004bd0 <memcpy+0xc>
 8004bce:	bd10      	pop	{r4, pc}
 8004bd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bd8:	e7f7      	b.n	8004bca <memcpy+0x6>

08004bda <memset>:
 8004bda:	4402      	add	r2, r0
 8004bdc:	4603      	mov	r3, r0
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d100      	bne.n	8004be4 <memset+0xa>
 8004be2:	4770      	bx	lr
 8004be4:	f803 1b01 	strb.w	r1, [r3], #1
 8004be8:	e7f9      	b.n	8004bde <memset+0x4>
	...

08004bec <iprintf>:
 8004bec:	b40f      	push	{r0, r1, r2, r3}
 8004bee:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <iprintf+0x2c>)
 8004bf0:	b513      	push	{r0, r1, r4, lr}
 8004bf2:	681c      	ldr	r4, [r3, #0]
 8004bf4:	b124      	cbz	r4, 8004c00 <iprintf+0x14>
 8004bf6:	69a3      	ldr	r3, [r4, #24]
 8004bf8:	b913      	cbnz	r3, 8004c00 <iprintf+0x14>
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 f84e 	bl	8004c9c <__sinit>
 8004c00:	ab05      	add	r3, sp, #20
 8004c02:	9a04      	ldr	r2, [sp, #16]
 8004c04:	68a1      	ldr	r1, [r4, #8]
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f000 f955 	bl	8004eb8 <_vfiprintf_r>
 8004c0e:	b002      	add	sp, #8
 8004c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c14:	b004      	add	sp, #16
 8004c16:	4770      	bx	lr
 8004c18:	2000000c 	.word	0x2000000c

08004c1c <std>:
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	b510      	push	{r4, lr}
 8004c20:	4604      	mov	r4, r0
 8004c22:	e9c0 3300 	strd	r3, r3, [r0]
 8004c26:	6083      	str	r3, [r0, #8]
 8004c28:	8181      	strh	r1, [r0, #12]
 8004c2a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c2c:	81c2      	strh	r2, [r0, #14]
 8004c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c32:	6183      	str	r3, [r0, #24]
 8004c34:	4619      	mov	r1, r3
 8004c36:	2208      	movs	r2, #8
 8004c38:	305c      	adds	r0, #92	; 0x5c
 8004c3a:	f7ff ffce 	bl	8004bda <memset>
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <std+0x38>)
 8004c40:	6263      	str	r3, [r4, #36]	; 0x24
 8004c42:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <std+0x3c>)
 8004c44:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c46:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <std+0x40>)
 8004c48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c4a:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <std+0x44>)
 8004c4c:	6224      	str	r4, [r4, #32]
 8004c4e:	6323      	str	r3, [r4, #48]	; 0x30
 8004c50:	bd10      	pop	{r4, pc}
 8004c52:	bf00      	nop
 8004c54:	08005415 	.word	0x08005415
 8004c58:	08005437 	.word	0x08005437
 8004c5c:	0800546f 	.word	0x0800546f
 8004c60:	08005493 	.word	0x08005493

08004c64 <_cleanup_r>:
 8004c64:	4901      	ldr	r1, [pc, #4]	; (8004c6c <_cleanup_r+0x8>)
 8004c66:	f000 b885 	b.w	8004d74 <_fwalk_reent>
 8004c6a:	bf00      	nop
 8004c6c:	0800576d 	.word	0x0800576d

08004c70 <__sfmoreglue>:
 8004c70:	b570      	push	{r4, r5, r6, lr}
 8004c72:	1e4a      	subs	r2, r1, #1
 8004c74:	2568      	movs	r5, #104	; 0x68
 8004c76:	4355      	muls	r5, r2
 8004c78:	460e      	mov	r6, r1
 8004c7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c7e:	f000 f897 	bl	8004db0 <_malloc_r>
 8004c82:	4604      	mov	r4, r0
 8004c84:	b140      	cbz	r0, 8004c98 <__sfmoreglue+0x28>
 8004c86:	2100      	movs	r1, #0
 8004c88:	e9c0 1600 	strd	r1, r6, [r0]
 8004c8c:	300c      	adds	r0, #12
 8004c8e:	60a0      	str	r0, [r4, #8]
 8004c90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c94:	f7ff ffa1 	bl	8004bda <memset>
 8004c98:	4620      	mov	r0, r4
 8004c9a:	bd70      	pop	{r4, r5, r6, pc}

08004c9c <__sinit>:
 8004c9c:	6983      	ldr	r3, [r0, #24]
 8004c9e:	b510      	push	{r4, lr}
 8004ca0:	4604      	mov	r4, r0
 8004ca2:	bb33      	cbnz	r3, 8004cf2 <__sinit+0x56>
 8004ca4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004ca8:	6503      	str	r3, [r0, #80]	; 0x50
 8004caa:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <__sinit+0x58>)
 8004cac:	4a12      	ldr	r2, [pc, #72]	; (8004cf8 <__sinit+0x5c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6282      	str	r2, [r0, #40]	; 0x28
 8004cb2:	4298      	cmp	r0, r3
 8004cb4:	bf04      	itt	eq
 8004cb6:	2301      	moveq	r3, #1
 8004cb8:	6183      	streq	r3, [r0, #24]
 8004cba:	f000 f81f 	bl	8004cfc <__sfp>
 8004cbe:	6060      	str	r0, [r4, #4]
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f000 f81b 	bl	8004cfc <__sfp>
 8004cc6:	60a0      	str	r0, [r4, #8]
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f000 f817 	bl	8004cfc <__sfp>
 8004cce:	2200      	movs	r2, #0
 8004cd0:	60e0      	str	r0, [r4, #12]
 8004cd2:	2104      	movs	r1, #4
 8004cd4:	6860      	ldr	r0, [r4, #4]
 8004cd6:	f7ff ffa1 	bl	8004c1c <std>
 8004cda:	2201      	movs	r2, #1
 8004cdc:	2109      	movs	r1, #9
 8004cde:	68a0      	ldr	r0, [r4, #8]
 8004ce0:	f7ff ff9c 	bl	8004c1c <std>
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	2112      	movs	r1, #18
 8004ce8:	68e0      	ldr	r0, [r4, #12]
 8004cea:	f7ff ff97 	bl	8004c1c <std>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	61a3      	str	r3, [r4, #24]
 8004cf2:	bd10      	pop	{r4, pc}
 8004cf4:	08005a34 	.word	0x08005a34
 8004cf8:	08004c65 	.word	0x08004c65

08004cfc <__sfp>:
 8004cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfe:	4b1b      	ldr	r3, [pc, #108]	; (8004d6c <__sfp+0x70>)
 8004d00:	681e      	ldr	r6, [r3, #0]
 8004d02:	69b3      	ldr	r3, [r6, #24]
 8004d04:	4607      	mov	r7, r0
 8004d06:	b913      	cbnz	r3, 8004d0e <__sfp+0x12>
 8004d08:	4630      	mov	r0, r6
 8004d0a:	f7ff ffc7 	bl	8004c9c <__sinit>
 8004d0e:	3648      	adds	r6, #72	; 0x48
 8004d10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	d503      	bpl.n	8004d20 <__sfp+0x24>
 8004d18:	6833      	ldr	r3, [r6, #0]
 8004d1a:	b133      	cbz	r3, 8004d2a <__sfp+0x2e>
 8004d1c:	6836      	ldr	r6, [r6, #0]
 8004d1e:	e7f7      	b.n	8004d10 <__sfp+0x14>
 8004d20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d24:	b16d      	cbz	r5, 8004d42 <__sfp+0x46>
 8004d26:	3468      	adds	r4, #104	; 0x68
 8004d28:	e7f4      	b.n	8004d14 <__sfp+0x18>
 8004d2a:	2104      	movs	r1, #4
 8004d2c:	4638      	mov	r0, r7
 8004d2e:	f7ff ff9f 	bl	8004c70 <__sfmoreglue>
 8004d32:	6030      	str	r0, [r6, #0]
 8004d34:	2800      	cmp	r0, #0
 8004d36:	d1f1      	bne.n	8004d1c <__sfp+0x20>
 8004d38:	230c      	movs	r3, #12
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	4620      	mov	r0, r4
 8004d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d42:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <__sfp+0x74>)
 8004d44:	6665      	str	r5, [r4, #100]	; 0x64
 8004d46:	e9c4 5500 	strd	r5, r5, [r4]
 8004d4a:	60a5      	str	r5, [r4, #8]
 8004d4c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004d50:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004d54:	2208      	movs	r2, #8
 8004d56:	4629      	mov	r1, r5
 8004d58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d5c:	f7ff ff3d 	bl	8004bda <memset>
 8004d60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d68:	e7e9      	b.n	8004d3e <__sfp+0x42>
 8004d6a:	bf00      	nop
 8004d6c:	08005a34 	.word	0x08005a34
 8004d70:	ffff0001 	.word	0xffff0001

08004d74 <_fwalk_reent>:
 8004d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d78:	4680      	mov	r8, r0
 8004d7a:	4689      	mov	r9, r1
 8004d7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d80:	2600      	movs	r6, #0
 8004d82:	b914      	cbnz	r4, 8004d8a <_fwalk_reent+0x16>
 8004d84:	4630      	mov	r0, r6
 8004d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d8a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004d8e:	3f01      	subs	r7, #1
 8004d90:	d501      	bpl.n	8004d96 <_fwalk_reent+0x22>
 8004d92:	6824      	ldr	r4, [r4, #0]
 8004d94:	e7f5      	b.n	8004d82 <_fwalk_reent+0xe>
 8004d96:	89ab      	ldrh	r3, [r5, #12]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d907      	bls.n	8004dac <_fwalk_reent+0x38>
 8004d9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004da0:	3301      	adds	r3, #1
 8004da2:	d003      	beq.n	8004dac <_fwalk_reent+0x38>
 8004da4:	4629      	mov	r1, r5
 8004da6:	4640      	mov	r0, r8
 8004da8:	47c8      	blx	r9
 8004daa:	4306      	orrs	r6, r0
 8004dac:	3568      	adds	r5, #104	; 0x68
 8004dae:	e7ee      	b.n	8004d8e <_fwalk_reent+0x1a>

08004db0 <_malloc_r>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	1ccd      	adds	r5, r1, #3
 8004db4:	f025 0503 	bic.w	r5, r5, #3
 8004db8:	3508      	adds	r5, #8
 8004dba:	2d0c      	cmp	r5, #12
 8004dbc:	bf38      	it	cc
 8004dbe:	250c      	movcc	r5, #12
 8004dc0:	2d00      	cmp	r5, #0
 8004dc2:	4606      	mov	r6, r0
 8004dc4:	db01      	blt.n	8004dca <_malloc_r+0x1a>
 8004dc6:	42a9      	cmp	r1, r5
 8004dc8:	d903      	bls.n	8004dd2 <_malloc_r+0x22>
 8004dca:	230c      	movs	r3, #12
 8004dcc:	6033      	str	r3, [r6, #0]
 8004dce:	2000      	movs	r0, #0
 8004dd0:	bd70      	pop	{r4, r5, r6, pc}
 8004dd2:	f000 fd6b 	bl	80058ac <__malloc_lock>
 8004dd6:	4a21      	ldr	r2, [pc, #132]	; (8004e5c <_malloc_r+0xac>)
 8004dd8:	6814      	ldr	r4, [r2, #0]
 8004dda:	4621      	mov	r1, r4
 8004ddc:	b991      	cbnz	r1, 8004e04 <_malloc_r+0x54>
 8004dde:	4c20      	ldr	r4, [pc, #128]	; (8004e60 <_malloc_r+0xb0>)
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	b91b      	cbnz	r3, 8004dec <_malloc_r+0x3c>
 8004de4:	4630      	mov	r0, r6
 8004de6:	f000 fb05 	bl	80053f4 <_sbrk_r>
 8004dea:	6020      	str	r0, [r4, #0]
 8004dec:	4629      	mov	r1, r5
 8004dee:	4630      	mov	r0, r6
 8004df0:	f000 fb00 	bl	80053f4 <_sbrk_r>
 8004df4:	1c43      	adds	r3, r0, #1
 8004df6:	d124      	bne.n	8004e42 <_malloc_r+0x92>
 8004df8:	230c      	movs	r3, #12
 8004dfa:	6033      	str	r3, [r6, #0]
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	f000 fd56 	bl	80058ae <__malloc_unlock>
 8004e02:	e7e4      	b.n	8004dce <_malloc_r+0x1e>
 8004e04:	680b      	ldr	r3, [r1, #0]
 8004e06:	1b5b      	subs	r3, r3, r5
 8004e08:	d418      	bmi.n	8004e3c <_malloc_r+0x8c>
 8004e0a:	2b0b      	cmp	r3, #11
 8004e0c:	d90f      	bls.n	8004e2e <_malloc_r+0x7e>
 8004e0e:	600b      	str	r3, [r1, #0]
 8004e10:	50cd      	str	r5, [r1, r3]
 8004e12:	18cc      	adds	r4, r1, r3
 8004e14:	4630      	mov	r0, r6
 8004e16:	f000 fd4a 	bl	80058ae <__malloc_unlock>
 8004e1a:	f104 000b 	add.w	r0, r4, #11
 8004e1e:	1d23      	adds	r3, r4, #4
 8004e20:	f020 0007 	bic.w	r0, r0, #7
 8004e24:	1ac3      	subs	r3, r0, r3
 8004e26:	d0d3      	beq.n	8004dd0 <_malloc_r+0x20>
 8004e28:	425a      	negs	r2, r3
 8004e2a:	50e2      	str	r2, [r4, r3]
 8004e2c:	e7d0      	b.n	8004dd0 <_malloc_r+0x20>
 8004e2e:	428c      	cmp	r4, r1
 8004e30:	684b      	ldr	r3, [r1, #4]
 8004e32:	bf16      	itet	ne
 8004e34:	6063      	strne	r3, [r4, #4]
 8004e36:	6013      	streq	r3, [r2, #0]
 8004e38:	460c      	movne	r4, r1
 8004e3a:	e7eb      	b.n	8004e14 <_malloc_r+0x64>
 8004e3c:	460c      	mov	r4, r1
 8004e3e:	6849      	ldr	r1, [r1, #4]
 8004e40:	e7cc      	b.n	8004ddc <_malloc_r+0x2c>
 8004e42:	1cc4      	adds	r4, r0, #3
 8004e44:	f024 0403 	bic.w	r4, r4, #3
 8004e48:	42a0      	cmp	r0, r4
 8004e4a:	d005      	beq.n	8004e58 <_malloc_r+0xa8>
 8004e4c:	1a21      	subs	r1, r4, r0
 8004e4e:	4630      	mov	r0, r6
 8004e50:	f000 fad0 	bl	80053f4 <_sbrk_r>
 8004e54:	3001      	adds	r0, #1
 8004e56:	d0cf      	beq.n	8004df8 <_malloc_r+0x48>
 8004e58:	6025      	str	r5, [r4, #0]
 8004e5a:	e7db      	b.n	8004e14 <_malloc_r+0x64>
 8004e5c:	20000470 	.word	0x20000470
 8004e60:	20000474 	.word	0x20000474

08004e64 <__sfputc_r>:
 8004e64:	6893      	ldr	r3, [r2, #8]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	b410      	push	{r4}
 8004e6c:	6093      	str	r3, [r2, #8]
 8004e6e:	da08      	bge.n	8004e82 <__sfputc_r+0x1e>
 8004e70:	6994      	ldr	r4, [r2, #24]
 8004e72:	42a3      	cmp	r3, r4
 8004e74:	db01      	blt.n	8004e7a <__sfputc_r+0x16>
 8004e76:	290a      	cmp	r1, #10
 8004e78:	d103      	bne.n	8004e82 <__sfputc_r+0x1e>
 8004e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e7e:	f000 bb0d 	b.w	800549c <__swbuf_r>
 8004e82:	6813      	ldr	r3, [r2, #0]
 8004e84:	1c58      	adds	r0, r3, #1
 8004e86:	6010      	str	r0, [r2, #0]
 8004e88:	7019      	strb	r1, [r3, #0]
 8004e8a:	4608      	mov	r0, r1
 8004e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <__sfputs_r>:
 8004e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e94:	4606      	mov	r6, r0
 8004e96:	460f      	mov	r7, r1
 8004e98:	4614      	mov	r4, r2
 8004e9a:	18d5      	adds	r5, r2, r3
 8004e9c:	42ac      	cmp	r4, r5
 8004e9e:	d101      	bne.n	8004ea4 <__sfputs_r+0x12>
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	e007      	b.n	8004eb4 <__sfputs_r+0x22>
 8004ea4:	463a      	mov	r2, r7
 8004ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eaa:	4630      	mov	r0, r6
 8004eac:	f7ff ffda 	bl	8004e64 <__sfputc_r>
 8004eb0:	1c43      	adds	r3, r0, #1
 8004eb2:	d1f3      	bne.n	8004e9c <__sfputs_r+0xa>
 8004eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004eb8 <_vfiprintf_r>:
 8004eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	b09d      	sub	sp, #116	; 0x74
 8004ec0:	4617      	mov	r7, r2
 8004ec2:	461d      	mov	r5, r3
 8004ec4:	4606      	mov	r6, r0
 8004ec6:	b118      	cbz	r0, 8004ed0 <_vfiprintf_r+0x18>
 8004ec8:	6983      	ldr	r3, [r0, #24]
 8004eca:	b90b      	cbnz	r3, 8004ed0 <_vfiprintf_r+0x18>
 8004ecc:	f7ff fee6 	bl	8004c9c <__sinit>
 8004ed0:	4b7c      	ldr	r3, [pc, #496]	; (80050c4 <_vfiprintf_r+0x20c>)
 8004ed2:	429c      	cmp	r4, r3
 8004ed4:	d158      	bne.n	8004f88 <_vfiprintf_r+0xd0>
 8004ed6:	6874      	ldr	r4, [r6, #4]
 8004ed8:	89a3      	ldrh	r3, [r4, #12]
 8004eda:	0718      	lsls	r0, r3, #28
 8004edc:	d55e      	bpl.n	8004f9c <_vfiprintf_r+0xe4>
 8004ede:	6923      	ldr	r3, [r4, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d05b      	beq.n	8004f9c <_vfiprintf_r+0xe4>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee8:	2320      	movs	r3, #32
 8004eea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eee:	2330      	movs	r3, #48	; 0x30
 8004ef0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ef4:	9503      	str	r5, [sp, #12]
 8004ef6:	f04f 0b01 	mov.w	fp, #1
 8004efa:	46b8      	mov	r8, r7
 8004efc:	4645      	mov	r5, r8
 8004efe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f02:	b10b      	cbz	r3, 8004f08 <_vfiprintf_r+0x50>
 8004f04:	2b25      	cmp	r3, #37	; 0x25
 8004f06:	d154      	bne.n	8004fb2 <_vfiprintf_r+0xfa>
 8004f08:	ebb8 0a07 	subs.w	sl, r8, r7
 8004f0c:	d00b      	beq.n	8004f26 <_vfiprintf_r+0x6e>
 8004f0e:	4653      	mov	r3, sl
 8004f10:	463a      	mov	r2, r7
 8004f12:	4621      	mov	r1, r4
 8004f14:	4630      	mov	r0, r6
 8004f16:	f7ff ffbc 	bl	8004e92 <__sfputs_r>
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	f000 80c2 	beq.w	80050a4 <_vfiprintf_r+0x1ec>
 8004f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f22:	4453      	add	r3, sl
 8004f24:	9309      	str	r3, [sp, #36]	; 0x24
 8004f26:	f898 3000 	ldrb.w	r3, [r8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 80ba 	beq.w	80050a4 <_vfiprintf_r+0x1ec>
 8004f30:	2300      	movs	r3, #0
 8004f32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f3a:	9304      	str	r3, [sp, #16]
 8004f3c:	9307      	str	r3, [sp, #28]
 8004f3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f42:	931a      	str	r3, [sp, #104]	; 0x68
 8004f44:	46a8      	mov	r8, r5
 8004f46:	2205      	movs	r2, #5
 8004f48:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004f4c:	485e      	ldr	r0, [pc, #376]	; (80050c8 <_vfiprintf_r+0x210>)
 8004f4e:	f7fb f93f 	bl	80001d0 <memchr>
 8004f52:	9b04      	ldr	r3, [sp, #16]
 8004f54:	bb78      	cbnz	r0, 8004fb6 <_vfiprintf_r+0xfe>
 8004f56:	06d9      	lsls	r1, r3, #27
 8004f58:	bf44      	itt	mi
 8004f5a:	2220      	movmi	r2, #32
 8004f5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f60:	071a      	lsls	r2, r3, #28
 8004f62:	bf44      	itt	mi
 8004f64:	222b      	movmi	r2, #43	; 0x2b
 8004f66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f6a:	782a      	ldrb	r2, [r5, #0]
 8004f6c:	2a2a      	cmp	r2, #42	; 0x2a
 8004f6e:	d02a      	beq.n	8004fc6 <_vfiprintf_r+0x10e>
 8004f70:	9a07      	ldr	r2, [sp, #28]
 8004f72:	46a8      	mov	r8, r5
 8004f74:	2000      	movs	r0, #0
 8004f76:	250a      	movs	r5, #10
 8004f78:	4641      	mov	r1, r8
 8004f7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f7e:	3b30      	subs	r3, #48	; 0x30
 8004f80:	2b09      	cmp	r3, #9
 8004f82:	d969      	bls.n	8005058 <_vfiprintf_r+0x1a0>
 8004f84:	b360      	cbz	r0, 8004fe0 <_vfiprintf_r+0x128>
 8004f86:	e024      	b.n	8004fd2 <_vfiprintf_r+0x11a>
 8004f88:	4b50      	ldr	r3, [pc, #320]	; (80050cc <_vfiprintf_r+0x214>)
 8004f8a:	429c      	cmp	r4, r3
 8004f8c:	d101      	bne.n	8004f92 <_vfiprintf_r+0xda>
 8004f8e:	68b4      	ldr	r4, [r6, #8]
 8004f90:	e7a2      	b.n	8004ed8 <_vfiprintf_r+0x20>
 8004f92:	4b4f      	ldr	r3, [pc, #316]	; (80050d0 <_vfiprintf_r+0x218>)
 8004f94:	429c      	cmp	r4, r3
 8004f96:	bf08      	it	eq
 8004f98:	68f4      	ldreq	r4, [r6, #12]
 8004f9a:	e79d      	b.n	8004ed8 <_vfiprintf_r+0x20>
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	4630      	mov	r0, r6
 8004fa0:	f000 fae0 	bl	8005564 <__swsetup_r>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d09d      	beq.n	8004ee4 <_vfiprintf_r+0x2c>
 8004fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fac:	b01d      	add	sp, #116	; 0x74
 8004fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb2:	46a8      	mov	r8, r5
 8004fb4:	e7a2      	b.n	8004efc <_vfiprintf_r+0x44>
 8004fb6:	4a44      	ldr	r2, [pc, #272]	; (80050c8 <_vfiprintf_r+0x210>)
 8004fb8:	1a80      	subs	r0, r0, r2
 8004fba:	fa0b f000 	lsl.w	r0, fp, r0
 8004fbe:	4318      	orrs	r0, r3
 8004fc0:	9004      	str	r0, [sp, #16]
 8004fc2:	4645      	mov	r5, r8
 8004fc4:	e7be      	b.n	8004f44 <_vfiprintf_r+0x8c>
 8004fc6:	9a03      	ldr	r2, [sp, #12]
 8004fc8:	1d11      	adds	r1, r2, #4
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	9103      	str	r1, [sp, #12]
 8004fce:	2a00      	cmp	r2, #0
 8004fd0:	db01      	blt.n	8004fd6 <_vfiprintf_r+0x11e>
 8004fd2:	9207      	str	r2, [sp, #28]
 8004fd4:	e004      	b.n	8004fe0 <_vfiprintf_r+0x128>
 8004fd6:	4252      	negs	r2, r2
 8004fd8:	f043 0302 	orr.w	r3, r3, #2
 8004fdc:	9207      	str	r2, [sp, #28]
 8004fde:	9304      	str	r3, [sp, #16]
 8004fe0:	f898 3000 	ldrb.w	r3, [r8]
 8004fe4:	2b2e      	cmp	r3, #46	; 0x2e
 8004fe6:	d10e      	bne.n	8005006 <_vfiprintf_r+0x14e>
 8004fe8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004fec:	2b2a      	cmp	r3, #42	; 0x2a
 8004fee:	d138      	bne.n	8005062 <_vfiprintf_r+0x1aa>
 8004ff0:	9b03      	ldr	r3, [sp, #12]
 8004ff2:	1d1a      	adds	r2, r3, #4
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	9203      	str	r2, [sp, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	bfb8      	it	lt
 8004ffc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005000:	f108 0802 	add.w	r8, r8, #2
 8005004:	9305      	str	r3, [sp, #20]
 8005006:	4d33      	ldr	r5, [pc, #204]	; (80050d4 <_vfiprintf_r+0x21c>)
 8005008:	f898 1000 	ldrb.w	r1, [r8]
 800500c:	2203      	movs	r2, #3
 800500e:	4628      	mov	r0, r5
 8005010:	f7fb f8de 	bl	80001d0 <memchr>
 8005014:	b140      	cbz	r0, 8005028 <_vfiprintf_r+0x170>
 8005016:	2340      	movs	r3, #64	; 0x40
 8005018:	1b40      	subs	r0, r0, r5
 800501a:	fa03 f000 	lsl.w	r0, r3, r0
 800501e:	9b04      	ldr	r3, [sp, #16]
 8005020:	4303      	orrs	r3, r0
 8005022:	f108 0801 	add.w	r8, r8, #1
 8005026:	9304      	str	r3, [sp, #16]
 8005028:	f898 1000 	ldrb.w	r1, [r8]
 800502c:	482a      	ldr	r0, [pc, #168]	; (80050d8 <_vfiprintf_r+0x220>)
 800502e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005032:	2206      	movs	r2, #6
 8005034:	f108 0701 	add.w	r7, r8, #1
 8005038:	f7fb f8ca 	bl	80001d0 <memchr>
 800503c:	2800      	cmp	r0, #0
 800503e:	d037      	beq.n	80050b0 <_vfiprintf_r+0x1f8>
 8005040:	4b26      	ldr	r3, [pc, #152]	; (80050dc <_vfiprintf_r+0x224>)
 8005042:	bb1b      	cbnz	r3, 800508c <_vfiprintf_r+0x1d4>
 8005044:	9b03      	ldr	r3, [sp, #12]
 8005046:	3307      	adds	r3, #7
 8005048:	f023 0307 	bic.w	r3, r3, #7
 800504c:	3308      	adds	r3, #8
 800504e:	9303      	str	r3, [sp, #12]
 8005050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005052:	444b      	add	r3, r9
 8005054:	9309      	str	r3, [sp, #36]	; 0x24
 8005056:	e750      	b.n	8004efa <_vfiprintf_r+0x42>
 8005058:	fb05 3202 	mla	r2, r5, r2, r3
 800505c:	2001      	movs	r0, #1
 800505e:	4688      	mov	r8, r1
 8005060:	e78a      	b.n	8004f78 <_vfiprintf_r+0xc0>
 8005062:	2300      	movs	r3, #0
 8005064:	f108 0801 	add.w	r8, r8, #1
 8005068:	9305      	str	r3, [sp, #20]
 800506a:	4619      	mov	r1, r3
 800506c:	250a      	movs	r5, #10
 800506e:	4640      	mov	r0, r8
 8005070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005074:	3a30      	subs	r2, #48	; 0x30
 8005076:	2a09      	cmp	r2, #9
 8005078:	d903      	bls.n	8005082 <_vfiprintf_r+0x1ca>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0c3      	beq.n	8005006 <_vfiprintf_r+0x14e>
 800507e:	9105      	str	r1, [sp, #20]
 8005080:	e7c1      	b.n	8005006 <_vfiprintf_r+0x14e>
 8005082:	fb05 2101 	mla	r1, r5, r1, r2
 8005086:	2301      	movs	r3, #1
 8005088:	4680      	mov	r8, r0
 800508a:	e7f0      	b.n	800506e <_vfiprintf_r+0x1b6>
 800508c:	ab03      	add	r3, sp, #12
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	4622      	mov	r2, r4
 8005092:	4b13      	ldr	r3, [pc, #76]	; (80050e0 <_vfiprintf_r+0x228>)
 8005094:	a904      	add	r1, sp, #16
 8005096:	4630      	mov	r0, r6
 8005098:	f3af 8000 	nop.w
 800509c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80050a0:	4681      	mov	r9, r0
 80050a2:	d1d5      	bne.n	8005050 <_vfiprintf_r+0x198>
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	065b      	lsls	r3, r3, #25
 80050a8:	f53f af7e 	bmi.w	8004fa8 <_vfiprintf_r+0xf0>
 80050ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050ae:	e77d      	b.n	8004fac <_vfiprintf_r+0xf4>
 80050b0:	ab03      	add	r3, sp, #12
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	4622      	mov	r2, r4
 80050b6:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <_vfiprintf_r+0x228>)
 80050b8:	a904      	add	r1, sp, #16
 80050ba:	4630      	mov	r0, r6
 80050bc:	f000 f888 	bl	80051d0 <_printf_i>
 80050c0:	e7ec      	b.n	800509c <_vfiprintf_r+0x1e4>
 80050c2:	bf00      	nop
 80050c4:	08005a58 	.word	0x08005a58
 80050c8:	08005a98 	.word	0x08005a98
 80050cc:	08005a78 	.word	0x08005a78
 80050d0:	08005a38 	.word	0x08005a38
 80050d4:	08005a9e 	.word	0x08005a9e
 80050d8:	08005aa2 	.word	0x08005aa2
 80050dc:	00000000 	.word	0x00000000
 80050e0:	08004e93 	.word	0x08004e93

080050e4 <_printf_common>:
 80050e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	4691      	mov	r9, r2
 80050ea:	461f      	mov	r7, r3
 80050ec:	688a      	ldr	r2, [r1, #8]
 80050ee:	690b      	ldr	r3, [r1, #16]
 80050f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050f4:	4293      	cmp	r3, r2
 80050f6:	bfb8      	it	lt
 80050f8:	4613      	movlt	r3, r2
 80050fa:	f8c9 3000 	str.w	r3, [r9]
 80050fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005102:	4606      	mov	r6, r0
 8005104:	460c      	mov	r4, r1
 8005106:	b112      	cbz	r2, 800510e <_printf_common+0x2a>
 8005108:	3301      	adds	r3, #1
 800510a:	f8c9 3000 	str.w	r3, [r9]
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	0699      	lsls	r1, r3, #26
 8005112:	bf42      	ittt	mi
 8005114:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005118:	3302      	addmi	r3, #2
 800511a:	f8c9 3000 	strmi.w	r3, [r9]
 800511e:	6825      	ldr	r5, [r4, #0]
 8005120:	f015 0506 	ands.w	r5, r5, #6
 8005124:	d107      	bne.n	8005136 <_printf_common+0x52>
 8005126:	f104 0a19 	add.w	sl, r4, #25
 800512a:	68e3      	ldr	r3, [r4, #12]
 800512c:	f8d9 2000 	ldr.w	r2, [r9]
 8005130:	1a9b      	subs	r3, r3, r2
 8005132:	42ab      	cmp	r3, r5
 8005134:	dc28      	bgt.n	8005188 <_printf_common+0xa4>
 8005136:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800513a:	6822      	ldr	r2, [r4, #0]
 800513c:	3300      	adds	r3, #0
 800513e:	bf18      	it	ne
 8005140:	2301      	movne	r3, #1
 8005142:	0692      	lsls	r2, r2, #26
 8005144:	d42d      	bmi.n	80051a2 <_printf_common+0xbe>
 8005146:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800514a:	4639      	mov	r1, r7
 800514c:	4630      	mov	r0, r6
 800514e:	47c0      	blx	r8
 8005150:	3001      	adds	r0, #1
 8005152:	d020      	beq.n	8005196 <_printf_common+0xb2>
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	68e5      	ldr	r5, [r4, #12]
 8005158:	f8d9 2000 	ldr.w	r2, [r9]
 800515c:	f003 0306 	and.w	r3, r3, #6
 8005160:	2b04      	cmp	r3, #4
 8005162:	bf08      	it	eq
 8005164:	1aad      	subeq	r5, r5, r2
 8005166:	68a3      	ldr	r3, [r4, #8]
 8005168:	6922      	ldr	r2, [r4, #16]
 800516a:	bf0c      	ite	eq
 800516c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005170:	2500      	movne	r5, #0
 8005172:	4293      	cmp	r3, r2
 8005174:	bfc4      	itt	gt
 8005176:	1a9b      	subgt	r3, r3, r2
 8005178:	18ed      	addgt	r5, r5, r3
 800517a:	f04f 0900 	mov.w	r9, #0
 800517e:	341a      	adds	r4, #26
 8005180:	454d      	cmp	r5, r9
 8005182:	d11a      	bne.n	80051ba <_printf_common+0xd6>
 8005184:	2000      	movs	r0, #0
 8005186:	e008      	b.n	800519a <_printf_common+0xb6>
 8005188:	2301      	movs	r3, #1
 800518a:	4652      	mov	r2, sl
 800518c:	4639      	mov	r1, r7
 800518e:	4630      	mov	r0, r6
 8005190:	47c0      	blx	r8
 8005192:	3001      	adds	r0, #1
 8005194:	d103      	bne.n	800519e <_printf_common+0xba>
 8005196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800519a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800519e:	3501      	adds	r5, #1
 80051a0:	e7c3      	b.n	800512a <_printf_common+0x46>
 80051a2:	18e1      	adds	r1, r4, r3
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	2030      	movs	r0, #48	; 0x30
 80051a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ac:	4422      	add	r2, r4
 80051ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051b6:	3302      	adds	r3, #2
 80051b8:	e7c5      	b.n	8005146 <_printf_common+0x62>
 80051ba:	2301      	movs	r3, #1
 80051bc:	4622      	mov	r2, r4
 80051be:	4639      	mov	r1, r7
 80051c0:	4630      	mov	r0, r6
 80051c2:	47c0      	blx	r8
 80051c4:	3001      	adds	r0, #1
 80051c6:	d0e6      	beq.n	8005196 <_printf_common+0xb2>
 80051c8:	f109 0901 	add.w	r9, r9, #1
 80051cc:	e7d8      	b.n	8005180 <_printf_common+0x9c>
	...

080051d0 <_printf_i>:
 80051d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80051d8:	460c      	mov	r4, r1
 80051da:	7e09      	ldrb	r1, [r1, #24]
 80051dc:	b085      	sub	sp, #20
 80051de:	296e      	cmp	r1, #110	; 0x6e
 80051e0:	4617      	mov	r7, r2
 80051e2:	4606      	mov	r6, r0
 80051e4:	4698      	mov	r8, r3
 80051e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051e8:	f000 80b3 	beq.w	8005352 <_printf_i+0x182>
 80051ec:	d822      	bhi.n	8005234 <_printf_i+0x64>
 80051ee:	2963      	cmp	r1, #99	; 0x63
 80051f0:	d036      	beq.n	8005260 <_printf_i+0x90>
 80051f2:	d80a      	bhi.n	800520a <_printf_i+0x3a>
 80051f4:	2900      	cmp	r1, #0
 80051f6:	f000 80b9 	beq.w	800536c <_printf_i+0x19c>
 80051fa:	2958      	cmp	r1, #88	; 0x58
 80051fc:	f000 8083 	beq.w	8005306 <_printf_i+0x136>
 8005200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005204:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005208:	e032      	b.n	8005270 <_printf_i+0xa0>
 800520a:	2964      	cmp	r1, #100	; 0x64
 800520c:	d001      	beq.n	8005212 <_printf_i+0x42>
 800520e:	2969      	cmp	r1, #105	; 0x69
 8005210:	d1f6      	bne.n	8005200 <_printf_i+0x30>
 8005212:	6820      	ldr	r0, [r4, #0]
 8005214:	6813      	ldr	r3, [r2, #0]
 8005216:	0605      	lsls	r5, r0, #24
 8005218:	f103 0104 	add.w	r1, r3, #4
 800521c:	d52a      	bpl.n	8005274 <_printf_i+0xa4>
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6011      	str	r1, [r2, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	da03      	bge.n	800522e <_printf_i+0x5e>
 8005226:	222d      	movs	r2, #45	; 0x2d
 8005228:	425b      	negs	r3, r3
 800522a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800522e:	486f      	ldr	r0, [pc, #444]	; (80053ec <_printf_i+0x21c>)
 8005230:	220a      	movs	r2, #10
 8005232:	e039      	b.n	80052a8 <_printf_i+0xd8>
 8005234:	2973      	cmp	r1, #115	; 0x73
 8005236:	f000 809d 	beq.w	8005374 <_printf_i+0x1a4>
 800523a:	d808      	bhi.n	800524e <_printf_i+0x7e>
 800523c:	296f      	cmp	r1, #111	; 0x6f
 800523e:	d020      	beq.n	8005282 <_printf_i+0xb2>
 8005240:	2970      	cmp	r1, #112	; 0x70
 8005242:	d1dd      	bne.n	8005200 <_printf_i+0x30>
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	f043 0320 	orr.w	r3, r3, #32
 800524a:	6023      	str	r3, [r4, #0]
 800524c:	e003      	b.n	8005256 <_printf_i+0x86>
 800524e:	2975      	cmp	r1, #117	; 0x75
 8005250:	d017      	beq.n	8005282 <_printf_i+0xb2>
 8005252:	2978      	cmp	r1, #120	; 0x78
 8005254:	d1d4      	bne.n	8005200 <_printf_i+0x30>
 8005256:	2378      	movs	r3, #120	; 0x78
 8005258:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800525c:	4864      	ldr	r0, [pc, #400]	; (80053f0 <_printf_i+0x220>)
 800525e:	e055      	b.n	800530c <_printf_i+0x13c>
 8005260:	6813      	ldr	r3, [r2, #0]
 8005262:	1d19      	adds	r1, r3, #4
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6011      	str	r1, [r2, #0]
 8005268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800526c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005270:	2301      	movs	r3, #1
 8005272:	e08c      	b.n	800538e <_printf_i+0x1be>
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6011      	str	r1, [r2, #0]
 8005278:	f010 0f40 	tst.w	r0, #64	; 0x40
 800527c:	bf18      	it	ne
 800527e:	b21b      	sxthne	r3, r3
 8005280:	e7cf      	b.n	8005222 <_printf_i+0x52>
 8005282:	6813      	ldr	r3, [r2, #0]
 8005284:	6825      	ldr	r5, [r4, #0]
 8005286:	1d18      	adds	r0, r3, #4
 8005288:	6010      	str	r0, [r2, #0]
 800528a:	0628      	lsls	r0, r5, #24
 800528c:	d501      	bpl.n	8005292 <_printf_i+0xc2>
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	e002      	b.n	8005298 <_printf_i+0xc8>
 8005292:	0668      	lsls	r0, r5, #25
 8005294:	d5fb      	bpl.n	800528e <_printf_i+0xbe>
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	4854      	ldr	r0, [pc, #336]	; (80053ec <_printf_i+0x21c>)
 800529a:	296f      	cmp	r1, #111	; 0x6f
 800529c:	bf14      	ite	ne
 800529e:	220a      	movne	r2, #10
 80052a0:	2208      	moveq	r2, #8
 80052a2:	2100      	movs	r1, #0
 80052a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052a8:	6865      	ldr	r5, [r4, #4]
 80052aa:	60a5      	str	r5, [r4, #8]
 80052ac:	2d00      	cmp	r5, #0
 80052ae:	f2c0 8095 	blt.w	80053dc <_printf_i+0x20c>
 80052b2:	6821      	ldr	r1, [r4, #0]
 80052b4:	f021 0104 	bic.w	r1, r1, #4
 80052b8:	6021      	str	r1, [r4, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d13d      	bne.n	800533a <_printf_i+0x16a>
 80052be:	2d00      	cmp	r5, #0
 80052c0:	f040 808e 	bne.w	80053e0 <_printf_i+0x210>
 80052c4:	4665      	mov	r5, ip
 80052c6:	2a08      	cmp	r2, #8
 80052c8:	d10b      	bne.n	80052e2 <_printf_i+0x112>
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	07db      	lsls	r3, r3, #31
 80052ce:	d508      	bpl.n	80052e2 <_printf_i+0x112>
 80052d0:	6923      	ldr	r3, [r4, #16]
 80052d2:	6862      	ldr	r2, [r4, #4]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	bfde      	ittt	le
 80052d8:	2330      	movle	r3, #48	; 0x30
 80052da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052de:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80052e2:	ebac 0305 	sub.w	r3, ip, r5
 80052e6:	6123      	str	r3, [r4, #16]
 80052e8:	f8cd 8000 	str.w	r8, [sp]
 80052ec:	463b      	mov	r3, r7
 80052ee:	aa03      	add	r2, sp, #12
 80052f0:	4621      	mov	r1, r4
 80052f2:	4630      	mov	r0, r6
 80052f4:	f7ff fef6 	bl	80050e4 <_printf_common>
 80052f8:	3001      	adds	r0, #1
 80052fa:	d14d      	bne.n	8005398 <_printf_i+0x1c8>
 80052fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005300:	b005      	add	sp, #20
 8005302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005306:	4839      	ldr	r0, [pc, #228]	; (80053ec <_printf_i+0x21c>)
 8005308:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800530c:	6813      	ldr	r3, [r2, #0]
 800530e:	6821      	ldr	r1, [r4, #0]
 8005310:	1d1d      	adds	r5, r3, #4
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6015      	str	r5, [r2, #0]
 8005316:	060a      	lsls	r2, r1, #24
 8005318:	d50b      	bpl.n	8005332 <_printf_i+0x162>
 800531a:	07ca      	lsls	r2, r1, #31
 800531c:	bf44      	itt	mi
 800531e:	f041 0120 	orrmi.w	r1, r1, #32
 8005322:	6021      	strmi	r1, [r4, #0]
 8005324:	b91b      	cbnz	r3, 800532e <_printf_i+0x15e>
 8005326:	6822      	ldr	r2, [r4, #0]
 8005328:	f022 0220 	bic.w	r2, r2, #32
 800532c:	6022      	str	r2, [r4, #0]
 800532e:	2210      	movs	r2, #16
 8005330:	e7b7      	b.n	80052a2 <_printf_i+0xd2>
 8005332:	064d      	lsls	r5, r1, #25
 8005334:	bf48      	it	mi
 8005336:	b29b      	uxthmi	r3, r3
 8005338:	e7ef      	b.n	800531a <_printf_i+0x14a>
 800533a:	4665      	mov	r5, ip
 800533c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005340:	fb02 3311 	mls	r3, r2, r1, r3
 8005344:	5cc3      	ldrb	r3, [r0, r3]
 8005346:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800534a:	460b      	mov	r3, r1
 800534c:	2900      	cmp	r1, #0
 800534e:	d1f5      	bne.n	800533c <_printf_i+0x16c>
 8005350:	e7b9      	b.n	80052c6 <_printf_i+0xf6>
 8005352:	6813      	ldr	r3, [r2, #0]
 8005354:	6825      	ldr	r5, [r4, #0]
 8005356:	6961      	ldr	r1, [r4, #20]
 8005358:	1d18      	adds	r0, r3, #4
 800535a:	6010      	str	r0, [r2, #0]
 800535c:	0628      	lsls	r0, r5, #24
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	d501      	bpl.n	8005366 <_printf_i+0x196>
 8005362:	6019      	str	r1, [r3, #0]
 8005364:	e002      	b.n	800536c <_printf_i+0x19c>
 8005366:	066a      	lsls	r2, r5, #25
 8005368:	d5fb      	bpl.n	8005362 <_printf_i+0x192>
 800536a:	8019      	strh	r1, [r3, #0]
 800536c:	2300      	movs	r3, #0
 800536e:	6123      	str	r3, [r4, #16]
 8005370:	4665      	mov	r5, ip
 8005372:	e7b9      	b.n	80052e8 <_printf_i+0x118>
 8005374:	6813      	ldr	r3, [r2, #0]
 8005376:	1d19      	adds	r1, r3, #4
 8005378:	6011      	str	r1, [r2, #0]
 800537a:	681d      	ldr	r5, [r3, #0]
 800537c:	6862      	ldr	r2, [r4, #4]
 800537e:	2100      	movs	r1, #0
 8005380:	4628      	mov	r0, r5
 8005382:	f7fa ff25 	bl	80001d0 <memchr>
 8005386:	b108      	cbz	r0, 800538c <_printf_i+0x1bc>
 8005388:	1b40      	subs	r0, r0, r5
 800538a:	6060      	str	r0, [r4, #4]
 800538c:	6863      	ldr	r3, [r4, #4]
 800538e:	6123      	str	r3, [r4, #16]
 8005390:	2300      	movs	r3, #0
 8005392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005396:	e7a7      	b.n	80052e8 <_printf_i+0x118>
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	462a      	mov	r2, r5
 800539c:	4639      	mov	r1, r7
 800539e:	4630      	mov	r0, r6
 80053a0:	47c0      	blx	r8
 80053a2:	3001      	adds	r0, #1
 80053a4:	d0aa      	beq.n	80052fc <_printf_i+0x12c>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	079b      	lsls	r3, r3, #30
 80053aa:	d413      	bmi.n	80053d4 <_printf_i+0x204>
 80053ac:	68e0      	ldr	r0, [r4, #12]
 80053ae:	9b03      	ldr	r3, [sp, #12]
 80053b0:	4298      	cmp	r0, r3
 80053b2:	bfb8      	it	lt
 80053b4:	4618      	movlt	r0, r3
 80053b6:	e7a3      	b.n	8005300 <_printf_i+0x130>
 80053b8:	2301      	movs	r3, #1
 80053ba:	464a      	mov	r2, r9
 80053bc:	4639      	mov	r1, r7
 80053be:	4630      	mov	r0, r6
 80053c0:	47c0      	blx	r8
 80053c2:	3001      	adds	r0, #1
 80053c4:	d09a      	beq.n	80052fc <_printf_i+0x12c>
 80053c6:	3501      	adds	r5, #1
 80053c8:	68e3      	ldr	r3, [r4, #12]
 80053ca:	9a03      	ldr	r2, [sp, #12]
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	42ab      	cmp	r3, r5
 80053d0:	dcf2      	bgt.n	80053b8 <_printf_i+0x1e8>
 80053d2:	e7eb      	b.n	80053ac <_printf_i+0x1dc>
 80053d4:	2500      	movs	r5, #0
 80053d6:	f104 0919 	add.w	r9, r4, #25
 80053da:	e7f5      	b.n	80053c8 <_printf_i+0x1f8>
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1ac      	bne.n	800533a <_printf_i+0x16a>
 80053e0:	7803      	ldrb	r3, [r0, #0]
 80053e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053ea:	e76c      	b.n	80052c6 <_printf_i+0xf6>
 80053ec:	08005aa9 	.word	0x08005aa9
 80053f0:	08005aba 	.word	0x08005aba

080053f4 <_sbrk_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	4c06      	ldr	r4, [pc, #24]	; (8005410 <_sbrk_r+0x1c>)
 80053f8:	2300      	movs	r3, #0
 80053fa:	4605      	mov	r5, r0
 80053fc:	4608      	mov	r0, r1
 80053fe:	6023      	str	r3, [r4, #0]
 8005400:	f7fb fdfa 	bl	8000ff8 <_sbrk>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d102      	bne.n	800540e <_sbrk_r+0x1a>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	b103      	cbz	r3, 800540e <_sbrk_r+0x1a>
 800540c:	602b      	str	r3, [r5, #0]
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	200005b8 	.word	0x200005b8

08005414 <__sread>:
 8005414:	b510      	push	{r4, lr}
 8005416:	460c      	mov	r4, r1
 8005418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541c:	f000 fa96 	bl	800594c <_read_r>
 8005420:	2800      	cmp	r0, #0
 8005422:	bfab      	itete	ge
 8005424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005426:	89a3      	ldrhlt	r3, [r4, #12]
 8005428:	181b      	addge	r3, r3, r0
 800542a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800542e:	bfac      	ite	ge
 8005430:	6563      	strge	r3, [r4, #84]	; 0x54
 8005432:	81a3      	strhlt	r3, [r4, #12]
 8005434:	bd10      	pop	{r4, pc}

08005436 <__swrite>:
 8005436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543a:	461f      	mov	r7, r3
 800543c:	898b      	ldrh	r3, [r1, #12]
 800543e:	05db      	lsls	r3, r3, #23
 8005440:	4605      	mov	r5, r0
 8005442:	460c      	mov	r4, r1
 8005444:	4616      	mov	r6, r2
 8005446:	d505      	bpl.n	8005454 <__swrite+0x1e>
 8005448:	2302      	movs	r3, #2
 800544a:	2200      	movs	r2, #0
 800544c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005450:	f000 f9b6 	bl	80057c0 <_lseek_r>
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800545a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800545e:	81a3      	strh	r3, [r4, #12]
 8005460:	4632      	mov	r2, r6
 8005462:	463b      	mov	r3, r7
 8005464:	4628      	mov	r0, r5
 8005466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800546a:	f000 b869 	b.w	8005540 <_write_r>

0800546e <__sseek>:
 800546e:	b510      	push	{r4, lr}
 8005470:	460c      	mov	r4, r1
 8005472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005476:	f000 f9a3 	bl	80057c0 <_lseek_r>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	bf15      	itete	ne
 8005480:	6560      	strne	r0, [r4, #84]	; 0x54
 8005482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800548a:	81a3      	strheq	r3, [r4, #12]
 800548c:	bf18      	it	ne
 800548e:	81a3      	strhne	r3, [r4, #12]
 8005490:	bd10      	pop	{r4, pc}

08005492 <__sclose>:
 8005492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005496:	f000 b8d3 	b.w	8005640 <_close_r>
	...

0800549c <__swbuf_r>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	460e      	mov	r6, r1
 80054a0:	4614      	mov	r4, r2
 80054a2:	4605      	mov	r5, r0
 80054a4:	b118      	cbz	r0, 80054ae <__swbuf_r+0x12>
 80054a6:	6983      	ldr	r3, [r0, #24]
 80054a8:	b90b      	cbnz	r3, 80054ae <__swbuf_r+0x12>
 80054aa:	f7ff fbf7 	bl	8004c9c <__sinit>
 80054ae:	4b21      	ldr	r3, [pc, #132]	; (8005534 <__swbuf_r+0x98>)
 80054b0:	429c      	cmp	r4, r3
 80054b2:	d12a      	bne.n	800550a <__swbuf_r+0x6e>
 80054b4:	686c      	ldr	r4, [r5, #4]
 80054b6:	69a3      	ldr	r3, [r4, #24]
 80054b8:	60a3      	str	r3, [r4, #8]
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	071a      	lsls	r2, r3, #28
 80054be:	d52e      	bpl.n	800551e <__swbuf_r+0x82>
 80054c0:	6923      	ldr	r3, [r4, #16]
 80054c2:	b363      	cbz	r3, 800551e <__swbuf_r+0x82>
 80054c4:	6923      	ldr	r3, [r4, #16]
 80054c6:	6820      	ldr	r0, [r4, #0]
 80054c8:	1ac0      	subs	r0, r0, r3
 80054ca:	6963      	ldr	r3, [r4, #20]
 80054cc:	b2f6      	uxtb	r6, r6
 80054ce:	4283      	cmp	r3, r0
 80054d0:	4637      	mov	r7, r6
 80054d2:	dc04      	bgt.n	80054de <__swbuf_r+0x42>
 80054d4:	4621      	mov	r1, r4
 80054d6:	4628      	mov	r0, r5
 80054d8:	f000 f948 	bl	800576c <_fflush_r>
 80054dc:	bb28      	cbnz	r0, 800552a <__swbuf_r+0x8e>
 80054de:	68a3      	ldr	r3, [r4, #8]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	60a3      	str	r3, [r4, #8]
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	6022      	str	r2, [r4, #0]
 80054ea:	701e      	strb	r6, [r3, #0]
 80054ec:	6963      	ldr	r3, [r4, #20]
 80054ee:	3001      	adds	r0, #1
 80054f0:	4283      	cmp	r3, r0
 80054f2:	d004      	beq.n	80054fe <__swbuf_r+0x62>
 80054f4:	89a3      	ldrh	r3, [r4, #12]
 80054f6:	07db      	lsls	r3, r3, #31
 80054f8:	d519      	bpl.n	800552e <__swbuf_r+0x92>
 80054fa:	2e0a      	cmp	r6, #10
 80054fc:	d117      	bne.n	800552e <__swbuf_r+0x92>
 80054fe:	4621      	mov	r1, r4
 8005500:	4628      	mov	r0, r5
 8005502:	f000 f933 	bl	800576c <_fflush_r>
 8005506:	b190      	cbz	r0, 800552e <__swbuf_r+0x92>
 8005508:	e00f      	b.n	800552a <__swbuf_r+0x8e>
 800550a:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <__swbuf_r+0x9c>)
 800550c:	429c      	cmp	r4, r3
 800550e:	d101      	bne.n	8005514 <__swbuf_r+0x78>
 8005510:	68ac      	ldr	r4, [r5, #8]
 8005512:	e7d0      	b.n	80054b6 <__swbuf_r+0x1a>
 8005514:	4b09      	ldr	r3, [pc, #36]	; (800553c <__swbuf_r+0xa0>)
 8005516:	429c      	cmp	r4, r3
 8005518:	bf08      	it	eq
 800551a:	68ec      	ldreq	r4, [r5, #12]
 800551c:	e7cb      	b.n	80054b6 <__swbuf_r+0x1a>
 800551e:	4621      	mov	r1, r4
 8005520:	4628      	mov	r0, r5
 8005522:	f000 f81f 	bl	8005564 <__swsetup_r>
 8005526:	2800      	cmp	r0, #0
 8005528:	d0cc      	beq.n	80054c4 <__swbuf_r+0x28>
 800552a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800552e:	4638      	mov	r0, r7
 8005530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005532:	bf00      	nop
 8005534:	08005a58 	.word	0x08005a58
 8005538:	08005a78 	.word	0x08005a78
 800553c:	08005a38 	.word	0x08005a38

08005540 <_write_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	4c07      	ldr	r4, [pc, #28]	; (8005560 <_write_r+0x20>)
 8005544:	4605      	mov	r5, r0
 8005546:	4608      	mov	r0, r1
 8005548:	4611      	mov	r1, r2
 800554a:	2200      	movs	r2, #0
 800554c:	6022      	str	r2, [r4, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	f7fb fd01 	bl	8000f56 <_write>
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d102      	bne.n	800555e <_write_r+0x1e>
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	b103      	cbz	r3, 800555e <_write_r+0x1e>
 800555c:	602b      	str	r3, [r5, #0]
 800555e:	bd38      	pop	{r3, r4, r5, pc}
 8005560:	200005b8 	.word	0x200005b8

08005564 <__swsetup_r>:
 8005564:	4b32      	ldr	r3, [pc, #200]	; (8005630 <__swsetup_r+0xcc>)
 8005566:	b570      	push	{r4, r5, r6, lr}
 8005568:	681d      	ldr	r5, [r3, #0]
 800556a:	4606      	mov	r6, r0
 800556c:	460c      	mov	r4, r1
 800556e:	b125      	cbz	r5, 800557a <__swsetup_r+0x16>
 8005570:	69ab      	ldr	r3, [r5, #24]
 8005572:	b913      	cbnz	r3, 800557a <__swsetup_r+0x16>
 8005574:	4628      	mov	r0, r5
 8005576:	f7ff fb91 	bl	8004c9c <__sinit>
 800557a:	4b2e      	ldr	r3, [pc, #184]	; (8005634 <__swsetup_r+0xd0>)
 800557c:	429c      	cmp	r4, r3
 800557e:	d10f      	bne.n	80055a0 <__swsetup_r+0x3c>
 8005580:	686c      	ldr	r4, [r5, #4]
 8005582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005586:	b29a      	uxth	r2, r3
 8005588:	0715      	lsls	r5, r2, #28
 800558a:	d42c      	bmi.n	80055e6 <__swsetup_r+0x82>
 800558c:	06d0      	lsls	r0, r2, #27
 800558e:	d411      	bmi.n	80055b4 <__swsetup_r+0x50>
 8005590:	2209      	movs	r2, #9
 8005592:	6032      	str	r2, [r6, #0]
 8005594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005598:	81a3      	strh	r3, [r4, #12]
 800559a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800559e:	e03e      	b.n	800561e <__swsetup_r+0xba>
 80055a0:	4b25      	ldr	r3, [pc, #148]	; (8005638 <__swsetup_r+0xd4>)
 80055a2:	429c      	cmp	r4, r3
 80055a4:	d101      	bne.n	80055aa <__swsetup_r+0x46>
 80055a6:	68ac      	ldr	r4, [r5, #8]
 80055a8:	e7eb      	b.n	8005582 <__swsetup_r+0x1e>
 80055aa:	4b24      	ldr	r3, [pc, #144]	; (800563c <__swsetup_r+0xd8>)
 80055ac:	429c      	cmp	r4, r3
 80055ae:	bf08      	it	eq
 80055b0:	68ec      	ldreq	r4, [r5, #12]
 80055b2:	e7e6      	b.n	8005582 <__swsetup_r+0x1e>
 80055b4:	0751      	lsls	r1, r2, #29
 80055b6:	d512      	bpl.n	80055de <__swsetup_r+0x7a>
 80055b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055ba:	b141      	cbz	r1, 80055ce <__swsetup_r+0x6a>
 80055bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055c0:	4299      	cmp	r1, r3
 80055c2:	d002      	beq.n	80055ca <__swsetup_r+0x66>
 80055c4:	4630      	mov	r0, r6
 80055c6:	f000 f973 	bl	80058b0 <_free_r>
 80055ca:	2300      	movs	r3, #0
 80055cc:	6363      	str	r3, [r4, #52]	; 0x34
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	2300      	movs	r3, #0
 80055d8:	6063      	str	r3, [r4, #4]
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	f043 0308 	orr.w	r3, r3, #8
 80055e4:	81a3      	strh	r3, [r4, #12]
 80055e6:	6923      	ldr	r3, [r4, #16]
 80055e8:	b94b      	cbnz	r3, 80055fe <__swsetup_r+0x9a>
 80055ea:	89a3      	ldrh	r3, [r4, #12]
 80055ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f4:	d003      	beq.n	80055fe <__swsetup_r+0x9a>
 80055f6:	4621      	mov	r1, r4
 80055f8:	4630      	mov	r0, r6
 80055fa:	f000 f917 	bl	800582c <__smakebuf_r>
 80055fe:	89a2      	ldrh	r2, [r4, #12]
 8005600:	f012 0301 	ands.w	r3, r2, #1
 8005604:	d00c      	beq.n	8005620 <__swsetup_r+0xbc>
 8005606:	2300      	movs	r3, #0
 8005608:	60a3      	str	r3, [r4, #8]
 800560a:	6963      	ldr	r3, [r4, #20]
 800560c:	425b      	negs	r3, r3
 800560e:	61a3      	str	r3, [r4, #24]
 8005610:	6923      	ldr	r3, [r4, #16]
 8005612:	b953      	cbnz	r3, 800562a <__swsetup_r+0xc6>
 8005614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005618:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800561c:	d1ba      	bne.n	8005594 <__swsetup_r+0x30>
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	0792      	lsls	r2, r2, #30
 8005622:	bf58      	it	pl
 8005624:	6963      	ldrpl	r3, [r4, #20]
 8005626:	60a3      	str	r3, [r4, #8]
 8005628:	e7f2      	b.n	8005610 <__swsetup_r+0xac>
 800562a:	2000      	movs	r0, #0
 800562c:	e7f7      	b.n	800561e <__swsetup_r+0xba>
 800562e:	bf00      	nop
 8005630:	2000000c 	.word	0x2000000c
 8005634:	08005a58 	.word	0x08005a58
 8005638:	08005a78 	.word	0x08005a78
 800563c:	08005a38 	.word	0x08005a38

08005640 <_close_r>:
 8005640:	b538      	push	{r3, r4, r5, lr}
 8005642:	4c06      	ldr	r4, [pc, #24]	; (800565c <_close_r+0x1c>)
 8005644:	2300      	movs	r3, #0
 8005646:	4605      	mov	r5, r0
 8005648:	4608      	mov	r0, r1
 800564a:	6023      	str	r3, [r4, #0]
 800564c:	f7fb fc9f 	bl	8000f8e <_close>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_close_r+0x1a>
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	b103      	cbz	r3, 800565a <_close_r+0x1a>
 8005658:	602b      	str	r3, [r5, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	200005b8 	.word	0x200005b8

08005660 <__sflush_r>:
 8005660:	898a      	ldrh	r2, [r1, #12]
 8005662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005666:	4605      	mov	r5, r0
 8005668:	0710      	lsls	r0, r2, #28
 800566a:	460c      	mov	r4, r1
 800566c:	d458      	bmi.n	8005720 <__sflush_r+0xc0>
 800566e:	684b      	ldr	r3, [r1, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	dc05      	bgt.n	8005680 <__sflush_r+0x20>
 8005674:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	dc02      	bgt.n	8005680 <__sflush_r+0x20>
 800567a:	2000      	movs	r0, #0
 800567c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005682:	2e00      	cmp	r6, #0
 8005684:	d0f9      	beq.n	800567a <__sflush_r+0x1a>
 8005686:	2300      	movs	r3, #0
 8005688:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800568c:	682f      	ldr	r7, [r5, #0]
 800568e:	6a21      	ldr	r1, [r4, #32]
 8005690:	602b      	str	r3, [r5, #0]
 8005692:	d032      	beq.n	80056fa <__sflush_r+0x9a>
 8005694:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005696:	89a3      	ldrh	r3, [r4, #12]
 8005698:	075a      	lsls	r2, r3, #29
 800569a:	d505      	bpl.n	80056a8 <__sflush_r+0x48>
 800569c:	6863      	ldr	r3, [r4, #4]
 800569e:	1ac0      	subs	r0, r0, r3
 80056a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056a2:	b10b      	cbz	r3, 80056a8 <__sflush_r+0x48>
 80056a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056a6:	1ac0      	subs	r0, r0, r3
 80056a8:	2300      	movs	r3, #0
 80056aa:	4602      	mov	r2, r0
 80056ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056ae:	6a21      	ldr	r1, [r4, #32]
 80056b0:	4628      	mov	r0, r5
 80056b2:	47b0      	blx	r6
 80056b4:	1c43      	adds	r3, r0, #1
 80056b6:	89a3      	ldrh	r3, [r4, #12]
 80056b8:	d106      	bne.n	80056c8 <__sflush_r+0x68>
 80056ba:	6829      	ldr	r1, [r5, #0]
 80056bc:	291d      	cmp	r1, #29
 80056be:	d848      	bhi.n	8005752 <__sflush_r+0xf2>
 80056c0:	4a29      	ldr	r2, [pc, #164]	; (8005768 <__sflush_r+0x108>)
 80056c2:	40ca      	lsrs	r2, r1
 80056c4:	07d6      	lsls	r6, r2, #31
 80056c6:	d544      	bpl.n	8005752 <__sflush_r+0xf2>
 80056c8:	2200      	movs	r2, #0
 80056ca:	6062      	str	r2, [r4, #4]
 80056cc:	04d9      	lsls	r1, r3, #19
 80056ce:	6922      	ldr	r2, [r4, #16]
 80056d0:	6022      	str	r2, [r4, #0]
 80056d2:	d504      	bpl.n	80056de <__sflush_r+0x7e>
 80056d4:	1c42      	adds	r2, r0, #1
 80056d6:	d101      	bne.n	80056dc <__sflush_r+0x7c>
 80056d8:	682b      	ldr	r3, [r5, #0]
 80056da:	b903      	cbnz	r3, 80056de <__sflush_r+0x7e>
 80056dc:	6560      	str	r0, [r4, #84]	; 0x54
 80056de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056e0:	602f      	str	r7, [r5, #0]
 80056e2:	2900      	cmp	r1, #0
 80056e4:	d0c9      	beq.n	800567a <__sflush_r+0x1a>
 80056e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056ea:	4299      	cmp	r1, r3
 80056ec:	d002      	beq.n	80056f4 <__sflush_r+0x94>
 80056ee:	4628      	mov	r0, r5
 80056f0:	f000 f8de 	bl	80058b0 <_free_r>
 80056f4:	2000      	movs	r0, #0
 80056f6:	6360      	str	r0, [r4, #52]	; 0x34
 80056f8:	e7c0      	b.n	800567c <__sflush_r+0x1c>
 80056fa:	2301      	movs	r3, #1
 80056fc:	4628      	mov	r0, r5
 80056fe:	47b0      	blx	r6
 8005700:	1c41      	adds	r1, r0, #1
 8005702:	d1c8      	bne.n	8005696 <__sflush_r+0x36>
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0c5      	beq.n	8005696 <__sflush_r+0x36>
 800570a:	2b1d      	cmp	r3, #29
 800570c:	d001      	beq.n	8005712 <__sflush_r+0xb2>
 800570e:	2b16      	cmp	r3, #22
 8005710:	d101      	bne.n	8005716 <__sflush_r+0xb6>
 8005712:	602f      	str	r7, [r5, #0]
 8005714:	e7b1      	b.n	800567a <__sflush_r+0x1a>
 8005716:	89a3      	ldrh	r3, [r4, #12]
 8005718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800571c:	81a3      	strh	r3, [r4, #12]
 800571e:	e7ad      	b.n	800567c <__sflush_r+0x1c>
 8005720:	690f      	ldr	r7, [r1, #16]
 8005722:	2f00      	cmp	r7, #0
 8005724:	d0a9      	beq.n	800567a <__sflush_r+0x1a>
 8005726:	0793      	lsls	r3, r2, #30
 8005728:	680e      	ldr	r6, [r1, #0]
 800572a:	bf08      	it	eq
 800572c:	694b      	ldreq	r3, [r1, #20]
 800572e:	600f      	str	r7, [r1, #0]
 8005730:	bf18      	it	ne
 8005732:	2300      	movne	r3, #0
 8005734:	eba6 0807 	sub.w	r8, r6, r7
 8005738:	608b      	str	r3, [r1, #8]
 800573a:	f1b8 0f00 	cmp.w	r8, #0
 800573e:	dd9c      	ble.n	800567a <__sflush_r+0x1a>
 8005740:	4643      	mov	r3, r8
 8005742:	463a      	mov	r2, r7
 8005744:	6a21      	ldr	r1, [r4, #32]
 8005746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005748:	4628      	mov	r0, r5
 800574a:	47b0      	blx	r6
 800574c:	2800      	cmp	r0, #0
 800574e:	dc06      	bgt.n	800575e <__sflush_r+0xfe>
 8005750:	89a3      	ldrh	r3, [r4, #12]
 8005752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005756:	81a3      	strh	r3, [r4, #12]
 8005758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800575c:	e78e      	b.n	800567c <__sflush_r+0x1c>
 800575e:	4407      	add	r7, r0
 8005760:	eba8 0800 	sub.w	r8, r8, r0
 8005764:	e7e9      	b.n	800573a <__sflush_r+0xda>
 8005766:	bf00      	nop
 8005768:	20400001 	.word	0x20400001

0800576c <_fflush_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	690b      	ldr	r3, [r1, #16]
 8005770:	4605      	mov	r5, r0
 8005772:	460c      	mov	r4, r1
 8005774:	b1db      	cbz	r3, 80057ae <_fflush_r+0x42>
 8005776:	b118      	cbz	r0, 8005780 <_fflush_r+0x14>
 8005778:	6983      	ldr	r3, [r0, #24]
 800577a:	b90b      	cbnz	r3, 8005780 <_fflush_r+0x14>
 800577c:	f7ff fa8e 	bl	8004c9c <__sinit>
 8005780:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <_fflush_r+0x48>)
 8005782:	429c      	cmp	r4, r3
 8005784:	d109      	bne.n	800579a <_fflush_r+0x2e>
 8005786:	686c      	ldr	r4, [r5, #4]
 8005788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800578c:	b17b      	cbz	r3, 80057ae <_fflush_r+0x42>
 800578e:	4621      	mov	r1, r4
 8005790:	4628      	mov	r0, r5
 8005792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005796:	f7ff bf63 	b.w	8005660 <__sflush_r>
 800579a:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <_fflush_r+0x4c>)
 800579c:	429c      	cmp	r4, r3
 800579e:	d101      	bne.n	80057a4 <_fflush_r+0x38>
 80057a0:	68ac      	ldr	r4, [r5, #8]
 80057a2:	e7f1      	b.n	8005788 <_fflush_r+0x1c>
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <_fflush_r+0x50>)
 80057a6:	429c      	cmp	r4, r3
 80057a8:	bf08      	it	eq
 80057aa:	68ec      	ldreq	r4, [r5, #12]
 80057ac:	e7ec      	b.n	8005788 <_fflush_r+0x1c>
 80057ae:	2000      	movs	r0, #0
 80057b0:	bd38      	pop	{r3, r4, r5, pc}
 80057b2:	bf00      	nop
 80057b4:	08005a58 	.word	0x08005a58
 80057b8:	08005a78 	.word	0x08005a78
 80057bc:	08005a38 	.word	0x08005a38

080057c0 <_lseek_r>:
 80057c0:	b538      	push	{r3, r4, r5, lr}
 80057c2:	4c07      	ldr	r4, [pc, #28]	; (80057e0 <_lseek_r+0x20>)
 80057c4:	4605      	mov	r5, r0
 80057c6:	4608      	mov	r0, r1
 80057c8:	4611      	mov	r1, r2
 80057ca:	2200      	movs	r2, #0
 80057cc:	6022      	str	r2, [r4, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	f7fb fc04 	bl	8000fdc <_lseek>
 80057d4:	1c43      	adds	r3, r0, #1
 80057d6:	d102      	bne.n	80057de <_lseek_r+0x1e>
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	b103      	cbz	r3, 80057de <_lseek_r+0x1e>
 80057dc:	602b      	str	r3, [r5, #0]
 80057de:	bd38      	pop	{r3, r4, r5, pc}
 80057e0:	200005b8 	.word	0x200005b8

080057e4 <__swhatbuf_r>:
 80057e4:	b570      	push	{r4, r5, r6, lr}
 80057e6:	460e      	mov	r6, r1
 80057e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ec:	2900      	cmp	r1, #0
 80057ee:	b096      	sub	sp, #88	; 0x58
 80057f0:	4614      	mov	r4, r2
 80057f2:	461d      	mov	r5, r3
 80057f4:	da07      	bge.n	8005806 <__swhatbuf_r+0x22>
 80057f6:	2300      	movs	r3, #0
 80057f8:	602b      	str	r3, [r5, #0]
 80057fa:	89b3      	ldrh	r3, [r6, #12]
 80057fc:	061a      	lsls	r2, r3, #24
 80057fe:	d410      	bmi.n	8005822 <__swhatbuf_r+0x3e>
 8005800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005804:	e00e      	b.n	8005824 <__swhatbuf_r+0x40>
 8005806:	466a      	mov	r2, sp
 8005808:	f000 f8b2 	bl	8005970 <_fstat_r>
 800580c:	2800      	cmp	r0, #0
 800580e:	dbf2      	blt.n	80057f6 <__swhatbuf_r+0x12>
 8005810:	9a01      	ldr	r2, [sp, #4]
 8005812:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005816:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800581a:	425a      	negs	r2, r3
 800581c:	415a      	adcs	r2, r3
 800581e:	602a      	str	r2, [r5, #0]
 8005820:	e7ee      	b.n	8005800 <__swhatbuf_r+0x1c>
 8005822:	2340      	movs	r3, #64	; 0x40
 8005824:	2000      	movs	r0, #0
 8005826:	6023      	str	r3, [r4, #0]
 8005828:	b016      	add	sp, #88	; 0x58
 800582a:	bd70      	pop	{r4, r5, r6, pc}

0800582c <__smakebuf_r>:
 800582c:	898b      	ldrh	r3, [r1, #12]
 800582e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005830:	079d      	lsls	r5, r3, #30
 8005832:	4606      	mov	r6, r0
 8005834:	460c      	mov	r4, r1
 8005836:	d507      	bpl.n	8005848 <__smakebuf_r+0x1c>
 8005838:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	6123      	str	r3, [r4, #16]
 8005840:	2301      	movs	r3, #1
 8005842:	6163      	str	r3, [r4, #20]
 8005844:	b002      	add	sp, #8
 8005846:	bd70      	pop	{r4, r5, r6, pc}
 8005848:	ab01      	add	r3, sp, #4
 800584a:	466a      	mov	r2, sp
 800584c:	f7ff ffca 	bl	80057e4 <__swhatbuf_r>
 8005850:	9900      	ldr	r1, [sp, #0]
 8005852:	4605      	mov	r5, r0
 8005854:	4630      	mov	r0, r6
 8005856:	f7ff faab 	bl	8004db0 <_malloc_r>
 800585a:	b948      	cbnz	r0, 8005870 <__smakebuf_r+0x44>
 800585c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005860:	059a      	lsls	r2, r3, #22
 8005862:	d4ef      	bmi.n	8005844 <__smakebuf_r+0x18>
 8005864:	f023 0303 	bic.w	r3, r3, #3
 8005868:	f043 0302 	orr.w	r3, r3, #2
 800586c:	81a3      	strh	r3, [r4, #12]
 800586e:	e7e3      	b.n	8005838 <__smakebuf_r+0xc>
 8005870:	4b0d      	ldr	r3, [pc, #52]	; (80058a8 <__smakebuf_r+0x7c>)
 8005872:	62b3      	str	r3, [r6, #40]	; 0x28
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	6020      	str	r0, [r4, #0]
 8005878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800587c:	81a3      	strh	r3, [r4, #12]
 800587e:	9b00      	ldr	r3, [sp, #0]
 8005880:	6163      	str	r3, [r4, #20]
 8005882:	9b01      	ldr	r3, [sp, #4]
 8005884:	6120      	str	r0, [r4, #16]
 8005886:	b15b      	cbz	r3, 80058a0 <__smakebuf_r+0x74>
 8005888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800588c:	4630      	mov	r0, r6
 800588e:	f000 f881 	bl	8005994 <_isatty_r>
 8005892:	b128      	cbz	r0, 80058a0 <__smakebuf_r+0x74>
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	f023 0303 	bic.w	r3, r3, #3
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	81a3      	strh	r3, [r4, #12]
 80058a0:	89a3      	ldrh	r3, [r4, #12]
 80058a2:	431d      	orrs	r5, r3
 80058a4:	81a5      	strh	r5, [r4, #12]
 80058a6:	e7cd      	b.n	8005844 <__smakebuf_r+0x18>
 80058a8:	08004c65 	.word	0x08004c65

080058ac <__malloc_lock>:
 80058ac:	4770      	bx	lr

080058ae <__malloc_unlock>:
 80058ae:	4770      	bx	lr

080058b0 <_free_r>:
 80058b0:	b538      	push	{r3, r4, r5, lr}
 80058b2:	4605      	mov	r5, r0
 80058b4:	2900      	cmp	r1, #0
 80058b6:	d045      	beq.n	8005944 <_free_r+0x94>
 80058b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058bc:	1f0c      	subs	r4, r1, #4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	bfb8      	it	lt
 80058c2:	18e4      	addlt	r4, r4, r3
 80058c4:	f7ff fff2 	bl	80058ac <__malloc_lock>
 80058c8:	4a1f      	ldr	r2, [pc, #124]	; (8005948 <_free_r+0x98>)
 80058ca:	6813      	ldr	r3, [r2, #0]
 80058cc:	4610      	mov	r0, r2
 80058ce:	b933      	cbnz	r3, 80058de <_free_r+0x2e>
 80058d0:	6063      	str	r3, [r4, #4]
 80058d2:	6014      	str	r4, [r2, #0]
 80058d4:	4628      	mov	r0, r5
 80058d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058da:	f7ff bfe8 	b.w	80058ae <__malloc_unlock>
 80058de:	42a3      	cmp	r3, r4
 80058e0:	d90c      	bls.n	80058fc <_free_r+0x4c>
 80058e2:	6821      	ldr	r1, [r4, #0]
 80058e4:	1862      	adds	r2, r4, r1
 80058e6:	4293      	cmp	r3, r2
 80058e8:	bf04      	itt	eq
 80058ea:	681a      	ldreq	r2, [r3, #0]
 80058ec:	685b      	ldreq	r3, [r3, #4]
 80058ee:	6063      	str	r3, [r4, #4]
 80058f0:	bf04      	itt	eq
 80058f2:	1852      	addeq	r2, r2, r1
 80058f4:	6022      	streq	r2, [r4, #0]
 80058f6:	6004      	str	r4, [r0, #0]
 80058f8:	e7ec      	b.n	80058d4 <_free_r+0x24>
 80058fa:	4613      	mov	r3, r2
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	b10a      	cbz	r2, 8005904 <_free_r+0x54>
 8005900:	42a2      	cmp	r2, r4
 8005902:	d9fa      	bls.n	80058fa <_free_r+0x4a>
 8005904:	6819      	ldr	r1, [r3, #0]
 8005906:	1858      	adds	r0, r3, r1
 8005908:	42a0      	cmp	r0, r4
 800590a:	d10b      	bne.n	8005924 <_free_r+0x74>
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	4401      	add	r1, r0
 8005910:	1858      	adds	r0, r3, r1
 8005912:	4282      	cmp	r2, r0
 8005914:	6019      	str	r1, [r3, #0]
 8005916:	d1dd      	bne.n	80058d4 <_free_r+0x24>
 8005918:	6810      	ldr	r0, [r2, #0]
 800591a:	6852      	ldr	r2, [r2, #4]
 800591c:	605a      	str	r2, [r3, #4]
 800591e:	4401      	add	r1, r0
 8005920:	6019      	str	r1, [r3, #0]
 8005922:	e7d7      	b.n	80058d4 <_free_r+0x24>
 8005924:	d902      	bls.n	800592c <_free_r+0x7c>
 8005926:	230c      	movs	r3, #12
 8005928:	602b      	str	r3, [r5, #0]
 800592a:	e7d3      	b.n	80058d4 <_free_r+0x24>
 800592c:	6820      	ldr	r0, [r4, #0]
 800592e:	1821      	adds	r1, r4, r0
 8005930:	428a      	cmp	r2, r1
 8005932:	bf04      	itt	eq
 8005934:	6811      	ldreq	r1, [r2, #0]
 8005936:	6852      	ldreq	r2, [r2, #4]
 8005938:	6062      	str	r2, [r4, #4]
 800593a:	bf04      	itt	eq
 800593c:	1809      	addeq	r1, r1, r0
 800593e:	6021      	streq	r1, [r4, #0]
 8005940:	605c      	str	r4, [r3, #4]
 8005942:	e7c7      	b.n	80058d4 <_free_r+0x24>
 8005944:	bd38      	pop	{r3, r4, r5, pc}
 8005946:	bf00      	nop
 8005948:	20000470 	.word	0x20000470

0800594c <_read_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4c07      	ldr	r4, [pc, #28]	; (800596c <_read_r+0x20>)
 8005950:	4605      	mov	r5, r0
 8005952:	4608      	mov	r0, r1
 8005954:	4611      	mov	r1, r2
 8005956:	2200      	movs	r2, #0
 8005958:	6022      	str	r2, [r4, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	f7fb fade 	bl	8000f1c <_read>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_read_r+0x1e>
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	b103      	cbz	r3, 800596a <_read_r+0x1e>
 8005968:	602b      	str	r3, [r5, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	200005b8 	.word	0x200005b8

08005970 <_fstat_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4c07      	ldr	r4, [pc, #28]	; (8005990 <_fstat_r+0x20>)
 8005974:	2300      	movs	r3, #0
 8005976:	4605      	mov	r5, r0
 8005978:	4608      	mov	r0, r1
 800597a:	4611      	mov	r1, r2
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	f7fb fb12 	bl	8000fa6 <_fstat>
 8005982:	1c43      	adds	r3, r0, #1
 8005984:	d102      	bne.n	800598c <_fstat_r+0x1c>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	b103      	cbz	r3, 800598c <_fstat_r+0x1c>
 800598a:	602b      	str	r3, [r5, #0]
 800598c:	bd38      	pop	{r3, r4, r5, pc}
 800598e:	bf00      	nop
 8005990:	200005b8 	.word	0x200005b8

08005994 <_isatty_r>:
 8005994:	b538      	push	{r3, r4, r5, lr}
 8005996:	4c06      	ldr	r4, [pc, #24]	; (80059b0 <_isatty_r+0x1c>)
 8005998:	2300      	movs	r3, #0
 800599a:	4605      	mov	r5, r0
 800599c:	4608      	mov	r0, r1
 800599e:	6023      	str	r3, [r4, #0]
 80059a0:	f7fb fb11 	bl	8000fc6 <_isatty>
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	d102      	bne.n	80059ae <_isatty_r+0x1a>
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	b103      	cbz	r3, 80059ae <_isatty_r+0x1a>
 80059ac:	602b      	str	r3, [r5, #0]
 80059ae:	bd38      	pop	{r3, r4, r5, pc}
 80059b0:	200005b8 	.word	0x200005b8

080059b4 <_init>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	bf00      	nop
 80059b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ba:	bc08      	pop	{r3}
 80059bc:	469e      	mov	lr, r3
 80059be:	4770      	bx	lr

080059c0 <_fini>:
 80059c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c2:	bf00      	nop
 80059c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c6:	bc08      	pop	{r3}
 80059c8:	469e      	mov	lr, r3
 80059ca:	4770      	bx	lr
