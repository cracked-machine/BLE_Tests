
L053_BLE_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004018  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080040d8  080040d8  000140d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041ac  080041ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080041ac  080041ac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041ac  080041ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  20000070  08004224  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08004224  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016204  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bb9  00000000  00000000  0003629c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca8  00000000  00000000  00038e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b70  00000000  00000000  00039b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017462  00000000  00000000  0003a670  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d9ce  00000000  00000000  00051ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d2c3  00000000  00000000  0005f4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc763  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003390  00000000  00000000  000dc7e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080040c0 	.word	0x080040c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080040c0 	.word	0x080040c0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000228:	4b25      	ldr	r3, [pc, #148]	; (80002c0 <HCI_TL_SPI_Init+0xa0>)
 800022a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800022c:	4b24      	ldr	r3, [pc, #144]	; (80002c0 <HCI_TL_SPI_Init+0xa0>)
 800022e:	2101      	movs	r1, #1
 8000230:	430a      	orrs	r2, r1
 8000232:	62da      	str	r2, [r3, #44]	; 0x2c
 8000234:	4b22      	ldr	r3, [pc, #136]	; (80002c0 <HCI_TL_SPI_Init+0xa0>)
 8000236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000238:	2201      	movs	r2, #1
 800023a:	4013      	ands	r3, r2
 800023c:	60bb      	str	r3, [r7, #8]
 800023e:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000240:	240c      	movs	r4, #12
 8000242:	193b      	adds	r3, r7, r4
 8000244:	2201      	movs	r2, #1
 8000246:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000248:	193b      	adds	r3, r7, r4
 800024a:	4a1e      	ldr	r2, [pc, #120]	; (80002c4 <HCI_TL_SPI_Init+0xa4>)
 800024c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024e:	193b      	adds	r3, r7, r4
 8000250:	2200      	movs	r2, #0
 8000252:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000254:	193a      	adds	r2, r7, r4
 8000256:	23a0      	movs	r3, #160	; 0xa0
 8000258:	05db      	lsls	r3, r3, #23
 800025a:	0011      	movs	r1, r2
 800025c:	0018      	movs	r0, r3
 800025e:	f000 ff25 	bl	80010ac <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000262:	0021      	movs	r1, r4
 8000264:	187b      	adds	r3, r7, r1
 8000266:	2220      	movs	r2, #32
 8000268:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800026a:	187b      	adds	r3, r7, r1
 800026c:	2201      	movs	r2, #1
 800026e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000270:	187b      	adds	r3, r7, r1
 8000272:	2200      	movs	r2, #0
 8000274:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000276:	187b      	adds	r3, r7, r1
 8000278:	2200      	movs	r2, #0
 800027a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800027c:	000c      	movs	r4, r1
 800027e:	187b      	adds	r3, r7, r1
 8000280:	4a11      	ldr	r2, [pc, #68]	; (80002c8 <HCI_TL_SPI_Init+0xa8>)
 8000282:	0019      	movs	r1, r3
 8000284:	0010      	movs	r0, r2
 8000286:	f000 ff11 	bl	80010ac <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800028a:	0021      	movs	r1, r4
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2210      	movs	r2, #16
 8000290:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2201      	movs	r2, #1
 8000296:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2200      	movs	r2, #0
 80002a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	4a08      	ldr	r2, [pc, #32]	; (80002c8 <HCI_TL_SPI_Init+0xa8>)
 80002a8:	0019      	movs	r1, r3
 80002aa:	0010      	movs	r0, r2
 80002ac:	f000 fefe 	bl	80010ac <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 80002b0:	f000 fa6e 	bl	8000790 <BSP_SPI1_Init>
 80002b4:	0003      	movs	r3, r0
}
 80002b6:	0018      	movs	r0, r3
 80002b8:	46bd      	mov	sp, r7
 80002ba:	b009      	add	sp, #36	; 0x24
 80002bc:	bd90      	pop	{r4, r7, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	40021000 	.word	0x40021000
 80002c4:	10110000 	.word	0x10110000
 80002c8:	50000800 	.word	0x50000800

080002cc <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80002d0:	23a0      	movs	r3, #160	; 0xa0
 80002d2:	05db      	lsls	r3, r3, #23
 80002d4:	2101      	movs	r1, #1
 80002d6:	0018      	movs	r0, r3
 80002d8:	f001 f85e 	bl	8001398 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80002dc:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <HCI_TL_SPI_DeInit+0x2c>)
 80002de:	2110      	movs	r1, #16
 80002e0:	0018      	movs	r0, r3
 80002e2:	f001 f859 	bl	8001398 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80002e6:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <HCI_TL_SPI_DeInit+0x2c>)
 80002e8:	2120      	movs	r1, #32
 80002ea:	0018      	movs	r0, r3
 80002ec:	f001 f854 	bl	8001398 <HAL_GPIO_DeInit>
  return 0;
 80002f0:	2300      	movs	r3, #0
}
 80002f2:	0018      	movs	r0, r3
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	50000800 	.word	0x50000800

080002fc <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000300:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <HCI_TL_SPI_Reset+0x3c>)
 8000302:	2201      	movs	r2, #1
 8000304:	2110      	movs	r1, #16
 8000306:	0018      	movs	r0, r3
 8000308:	f001 f93d 	bl	8001586 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800030c:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <HCI_TL_SPI_Reset+0x3c>)
 800030e:	2200      	movs	r2, #0
 8000310:	2120      	movs	r1, #32
 8000312:	0018      	movs	r0, r3
 8000314:	f001 f937 	bl	8001586 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000318:	2005      	movs	r0, #5
 800031a:	f000 fdcb 	bl	8000eb4 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <HCI_TL_SPI_Reset+0x3c>)
 8000320:	2201      	movs	r2, #1
 8000322:	2120      	movs	r1, #32
 8000324:	0018      	movs	r0, r3
 8000326:	f001 f92e 	bl	8001586 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800032a:	2005      	movs	r0, #5
 800032c:	f000 fdc2 	bl	8000eb4 <HAL_Delay>
  return 0;
 8000330:	2300      	movs	r3, #0
}
 8000332:	0018      	movs	r0, r3
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	50000800 	.word	0x50000800

0800033c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800033c:	b5b0      	push	{r4, r5, r7, lr}
 800033e:	b088      	sub	sp, #32
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	000a      	movs	r2, r1
 8000346:	1cbb      	adds	r3, r7, #2
 8000348:	801a      	strh	r2, [r3, #0]
  uint16_t byte_count;
  uint8_t len = 0;
 800034a:	231d      	movs	r3, #29
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	2200      	movs	r2, #0
 8000350:	701a      	strb	r2, [r3, #0]
  uint8_t char_ff = 0xff;
 8000352:	231c      	movs	r3, #28
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	22ff      	movs	r2, #255	; 0xff
 8000358:	701a      	strb	r2, [r3, #0]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800035a:	2414      	movs	r4, #20
 800035c:	193b      	adds	r3, r7, r4
 800035e:	220b      	movs	r2, #11
 8000360:	701a      	strb	r2, [r3, #0]
 8000362:	193b      	adds	r3, r7, r4
 8000364:	2200      	movs	r2, #0
 8000366:	705a      	strb	r2, [r3, #1]
 8000368:	193b      	adds	r3, r7, r4
 800036a:	2200      	movs	r2, #0
 800036c:	709a      	strb	r2, [r3, #2]
 800036e:	193b      	adds	r3, r7, r4
 8000370:	2200      	movs	r2, #0
 8000372:	70da      	strb	r2, [r3, #3]
 8000374:	193b      	adds	r3, r7, r4
 8000376:	2200      	movs	r2, #0
 8000378:	711a      	strb	r2, [r3, #4]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800037a:	4b2f      	ldr	r3, [pc, #188]	; (8000438 <HCI_TL_SPI_Receive+0xfc>)
 800037c:	2200      	movs	r2, #0
 800037e:	2110      	movs	r1, #16
 8000380:	0018      	movs	r0, r3
 8000382:	f001 f900 	bl	8001586 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000386:	250c      	movs	r5, #12
 8000388:	1979      	adds	r1, r7, r5
 800038a:	193b      	adds	r3, r7, r4
 800038c:	2205      	movs	r2, #5
 800038e:	0018      	movs	r0, r3
 8000390:	f000 fa2e 	bl	80007f0 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 8000394:	197b      	adds	r3, r7, r5
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b02      	cmp	r3, #2
 800039a:	d140      	bne.n	800041e <HCI_TL_SPI_Receive+0xe2>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800039c:	210c      	movs	r1, #12
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	791b      	ldrb	r3, [r3, #4]
 80003a2:	021b      	lsls	r3, r3, #8
 80003a4:	b21a      	sxth	r2, r3
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	78db      	ldrb	r3, [r3, #3]
 80003aa:	b21b      	sxth	r3, r3
 80003ac:	4313      	orrs	r3, r2
 80003ae:	b21a      	sxth	r2, r3
 80003b0:	211e      	movs	r1, #30
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	801a      	strh	r2, [r3, #0]

    if(byte_count > 0)
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	881b      	ldrh	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d02f      	beq.n	800041e <HCI_TL_SPI_Receive+0xe2>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 80003be:	231e      	movs	r3, #30
 80003c0:	18fa      	adds	r2, r7, r3
 80003c2:	1cbb      	adds	r3, r7, #2
 80003c4:	8812      	ldrh	r2, [r2, #0]
 80003c6:	881b      	ldrh	r3, [r3, #0]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d904      	bls.n	80003d6 <HCI_TL_SPI_Receive+0x9a>
        byte_count = size;
 80003cc:	231e      	movs	r3, #30
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	1cba      	adds	r2, r7, #2
 80003d2:	8812      	ldrh	r2, [r2, #0]
 80003d4:	801a      	strh	r2, [r3, #0]
      }

      for(len = 0; len < byte_count; len++)
 80003d6:	231d      	movs	r3, #29
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]
 80003de:	e015      	b.n	800040c <HCI_TL_SPI_Receive+0xd0>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80003e0:	241b      	movs	r4, #27
 80003e2:	1939      	adds	r1, r7, r4
 80003e4:	231c      	movs	r3, #28
 80003e6:	18fb      	adds	r3, r7, r3
 80003e8:	2201      	movs	r2, #1
 80003ea:	0018      	movs	r0, r3
 80003ec:	f000 fa00 	bl	80007f0 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 80003f0:	211d      	movs	r1, #29
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	18d3      	adds	r3, r2, r3
 80003fa:	193a      	adds	r2, r7, r4
 80003fc:	7812      	ldrb	r2, [r2, #0]
 80003fe:	b2d2      	uxtb	r2, r2
 8000400:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8000402:	187b      	adds	r3, r7, r1
 8000404:	781a      	ldrb	r2, [r3, #0]
 8000406:	187b      	adds	r3, r7, r1
 8000408:	3201      	adds	r2, #1
 800040a:	701a      	strb	r2, [r3, #0]
 800040c:	231d      	movs	r3, #29
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b29b      	uxth	r3, r3
 8000414:	221e      	movs	r2, #30
 8000416:	18ba      	adds	r2, r7, r2
 8000418:	8812      	ldrh	r2, [r2, #0]
 800041a:	429a      	cmp	r2, r3
 800041c:	d8e0      	bhi.n	80003e0 <HCI_TL_SPI_Receive+0xa4>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <HCI_TL_SPI_Receive+0xfc>)
 8000420:	2201      	movs	r2, #1
 8000422:	2110      	movs	r1, #16
 8000424:	0018      	movs	r0, r3
 8000426:	f001 f8ae 	bl	8001586 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 800042a:	231d      	movs	r3, #29
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	781b      	ldrb	r3, [r3, #0]
}
 8000430:	0018      	movs	r0, r3
 8000432:	46bd      	mov	sp, r7
 8000434:	b008      	add	sp, #32
 8000436:	bdb0      	pop	{r4, r5, r7, pc}
 8000438:	50000800 	.word	0x50000800

0800043c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800043c:	b590      	push	{r4, r7, lr}
 800043e:	b089      	sub	sp, #36	; 0x24
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	000a      	movs	r2, r1
 8000446:	1cbb      	adds	r3, r7, #2
 8000448:	801a      	strh	r2, [r3, #0]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800044a:	2110      	movs	r1, #16
 800044c:	187b      	adds	r3, r7, r1
 800044e:	220a      	movs	r2, #10
 8000450:	701a      	strb	r2, [r3, #0]
 8000452:	187b      	adds	r3, r7, r1
 8000454:	2200      	movs	r2, #0
 8000456:	705a      	strb	r2, [r3, #1]
 8000458:	187b      	adds	r3, r7, r1
 800045a:	2200      	movs	r2, #0
 800045c:	709a      	strb	r2, [r3, #2]
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2200      	movs	r2, #0
 8000462:	70da      	strb	r2, [r3, #3]
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2200      	movs	r2, #0
 8000468:	711a      	strb	r2, [r3, #4]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 800046a:	f000 fd19 	bl	8000ea0 <HAL_GetTick>
 800046e:	0003      	movs	r3, r0
 8000470:	61bb      	str	r3, [r7, #24]

  do
  {
    result = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000476:	4b21      	ldr	r3, [pc, #132]	; (80004fc <HCI_TL_SPI_Send+0xc0>)
 8000478:	2200      	movs	r2, #0
 800047a:	2110      	movs	r1, #16
 800047c:	0018      	movs	r0, r3
 800047e:	f001 f882 	bl	8001586 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000482:	2408      	movs	r4, #8
 8000484:	1939      	adds	r1, r7, r4
 8000486:	2310      	movs	r3, #16
 8000488:	18fb      	adds	r3, r7, r3
 800048a:	2205      	movs	r2, #5
 800048c:	0018      	movs	r0, r3
 800048e:	f000 f9af 	bl	80007f0 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 8000492:	193b      	adds	r3, r7, r4
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b02      	cmp	r3, #2
 8000498:	d113      	bne.n	80004c2 <HCI_TL_SPI_Send+0x86>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 800049a:	2308      	movs	r3, #8
 800049c:	18fb      	adds	r3, r7, r3
 800049e:	785b      	ldrb	r3, [r3, #1]
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	1cba      	adds	r2, r7, #2
 80004a4:	8812      	ldrh	r2, [r2, #0]
 80004a6:	429a      	cmp	r2, r3
 80004a8:	d807      	bhi.n	80004ba <HCI_TL_SPI_Send+0x7e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80004aa:	1cbb      	adds	r3, r7, #2
 80004ac:	881a      	ldrh	r2, [r3, #0]
 80004ae:	4914      	ldr	r1, [pc, #80]	; (8000500 <HCI_TL_SPI_Send+0xc4>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 f99c 	bl	80007f0 <BSP_SPI1_SendRecv>
 80004b8:	e006      	b.n	80004c8 <HCI_TL_SPI_Send+0x8c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80004ba:	2302      	movs	r3, #2
 80004bc:	425b      	negs	r3, r3
 80004be:	61fb      	str	r3, [r7, #28]
 80004c0:	e002      	b.n	80004c8 <HCI_TL_SPI_Send+0x8c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80004c2:	2301      	movs	r3, #1
 80004c4:	425b      	negs	r3, r3
 80004c6:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <HCI_TL_SPI_Send+0xc0>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	2110      	movs	r1, #16
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 f859 	bl	8001586 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80004d4:	f000 fce4 	bl	8000ea0 <HAL_GetTick>
 80004d8:	0002      	movs	r2, r0
 80004da:	69bb      	ldr	r3, [r7, #24]
 80004dc:	1ad3      	subs	r3, r2, r3
 80004de:	2b0f      	cmp	r3, #15
 80004e0:	d903      	bls.n	80004ea <HCI_TL_SPI_Send+0xae>
    {
      result = -3;
 80004e2:	2303      	movs	r3, #3
 80004e4:	425b      	negs	r3, r3
 80004e6:	61fb      	str	r3, [r7, #28]
      break;
 80004e8:	e002      	b.n	80004f0 <HCI_TL_SPI_Send+0xb4>
    }
  } while(result < 0);
 80004ea:	69fb      	ldr	r3, [r7, #28]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	dbc0      	blt.n	8000472 <HCI_TL_SPI_Send+0x36>

  return result;
 80004f0:	69fb      	ldr	r3, [r7, #28]
}
 80004f2:	0018      	movs	r0, r3
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b009      	add	sp, #36	; 0x24
 80004f8:	bd90      	pop	{r4, r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	50000800 	.word	0x50000800
 8000500:	2000008c 	.word	0x2000008c

08000504 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000508:	23a0      	movs	r3, #160	; 0xa0
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	2101      	movs	r1, #1
 800050e:	0018      	movs	r0, r3
 8000510:	f001 f81c 	bl	800154c <HAL_GPIO_ReadPin>
 8000514:	0003      	movs	r3, r0
 8000516:	3b01      	subs	r3, #1
 8000518:	425a      	negs	r2, r3
 800051a:	4153      	adcs	r3, r2
 800051c:	b2db      	uxtb	r3, r3
}
 800051e:	0018      	movs	r0, r3
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	4a16      	ldr	r2, [pc, #88]	; (8000588 <hci_tl_lowlevel_init+0x64>)
 800052e:	601a      	str	r2, [r3, #0]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	4a16      	ldr	r2, [pc, #88]	; (800058c <hci_tl_lowlevel_init+0x68>)
 8000534:	605a      	str	r2, [r3, #4]
  fops.Send    = HCI_TL_SPI_Send;
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	4a15      	ldr	r2, [pc, #84]	; (8000590 <hci_tl_lowlevel_init+0x6c>)
 800053a:	611a      	str	r2, [r3, #16]
  fops.Receive = HCI_TL_SPI_Receive;
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4a15      	ldr	r2, [pc, #84]	; (8000594 <hci_tl_lowlevel_init+0x70>)
 8000540:	60da      	str	r2, [r3, #12]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	4a14      	ldr	r2, [pc, #80]	; (8000598 <hci_tl_lowlevel_init+0x74>)
 8000546:	609a      	str	r2, [r3, #8]
  fops.GetTick = BSP_GetTick;
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	4a14      	ldr	r2, [pc, #80]	; (800059c <hci_tl_lowlevel_init+0x78>)
 800054c:	619a      	str	r2, [r3, #24]

  hci_register_io_bus (&fops);
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	0018      	movs	r0, r3
 8000552:	f002 fb91 	bl	8002c78 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8000556:	23c0      	movs	r3, #192	; 0xc0
 8000558:	04da      	lsls	r2, r3, #19
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <hci_tl_lowlevel_init+0x7c>)
 800055c:	0011      	movs	r1, r2
 800055e:	0018      	movs	r0, r3
 8000560:	f000 faf6 	bl	8000b50 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000564:	4a0f      	ldr	r2, [pc, #60]	; (80005a4 <hci_tl_lowlevel_init+0x80>)
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <hci_tl_lowlevel_init+0x7c>)
 8000568:	2100      	movs	r1, #0
 800056a:	0018      	movs	r0, r3
 800056c:	f000 facf 	bl	8000b0e <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	2100      	movs	r1, #0
 8000574:	2005      	movs	r0, #5
 8000576:	f000 fd67 	bl	8001048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800057a:	2005      	movs	r0, #5
 800057c:	f000 fd79 	bl	8001072 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b008      	add	sp, #32
 8000586:	bd80      	pop	{r7, pc}
 8000588:	08000221 	.word	0x08000221
 800058c:	080002cd 	.word	0x080002cd
 8000590:	0800043d 	.word	0x0800043d
 8000594:	0800033d 	.word	0x0800033d
 8000598:	080002fd 	.word	0x080002fd
 800059c:	08000831 	.word	0x08000831
 80005a0:	20000478 	.word	0x20000478
 80005a4:	080005a9 	.word	0x080005a9

080005a8 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80005ac:	e004      	b.n	80005b8 <hci_tl_lowlevel_isr+0x10>
  {
    if (hci_notify_asynch_evt(NULL))
 80005ae:	2000      	movs	r0, #0
 80005b0:	f002 fcda 	bl	8002f68 <hci_notify_asynch_evt>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d104      	bne.n	80005c2 <hci_tl_lowlevel_isr+0x1a>
  while(IsDataAvailable())
 80005b8:	f7ff ffa4 	bl	8000504 <IsDataAvailable>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d1f6      	bne.n	80005ae <hci_tl_lowlevel_isr+0x6>
 80005c0:	e000      	b.n	80005c4 <hci_tl_lowlevel_isr+0x1c>
    {
      return;
 80005c2:	46c0      	nop			; (mov r8, r8)
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <MX_BlueNRG_MS_Init>:

uint8_t rcv_data[30];
uint8_t RSSI[30];

void MX_BlueNRG_MS_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af04      	add	r7, sp, #16
  //uint8_t CLIENT_BDADDR[] = {0X01,0X02,0X03,0X04,0X05,0X06};
  uint8_t bdaddr[BDADDR_SIZE];

  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;

  hci_init(user_notify,NULL);
 80005ce:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <MX_BlueNRG_MS_Init+0x7c>)
 80005d0:	2100      	movs	r1, #0
 80005d2:	0018      	movs	r0, r3
 80005d4:	f002 fb04 	bl	8002be0 <hci_init>
  hci_reset();
 80005d8:	f002 fa2b 	bl	8002a32 <hci_reset>
  HAL_Delay(100);
 80005dc:	2064      	movs	r0, #100	; 0x64
 80005de:	f000 fc69 	bl	8000eb4 <HAL_Delay>
  
  //BLUENRG_memcpy(bdaddr,CLIENT_BDADDR,sizeof(CLIENT_BDADDR));
  
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80005e2:	230c      	movs	r3, #12
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	001a      	movs	r2, r3
 80005e8:	2106      	movs	r1, #6
 80005ea:	2000      	movs	r0, #0
 80005ec:	f002 f9b6 	bl	800295c <aci_hal_write_config_data>
 80005f0:	0003      	movs	r3, r0
 80005f2:	617b      	str	r3, [r7, #20]
                                  CONFIG_DATA_PUBADDR_LEN,
                                 bdaddr);
  
  //IDB05A1
  ret = aci_gatt_init();
 80005f4:	f002 f98a 	bl	800290c <aci_gatt_init>
 80005f8:	0003      	movs	r3, r0
 80005fa:	617b      	str	r3, [r7, #20]
  ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1|GAP_CENTRAL_ROLE_IDB05A1|GAP_OBSERVER_ROLE_IDB05A1,0,0x07,&service_handle,&dev_name_char_handle,&appearance_char_handle);
 80005fc:	230a      	movs	r3, #10
 80005fe:	18fa      	adds	r2, r7, r3
 8000600:	1dbb      	adds	r3, r7, #6
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	2308      	movs	r3, #8
 8000606:	18fb      	adds	r3, r7, r3
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	0013      	movs	r3, r2
 800060c:	2207      	movs	r2, #7
 800060e:	2100      	movs	r1, #0
 8000610:	200d      	movs	r0, #13
 8000612:	f002 f82a 	bl	800266a <aci_gap_init_IDB05A1>
 8000616:	0003      	movs	r3, r0
 8000618:	617b      	str	r3, [r7, #20]
  ret = aci_gap_set_auth_requirement(  0x00,
 800061a:	2300      	movs	r3, #0
 800061c:	9303      	str	r3, [sp, #12]
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_BlueNRG_MS_Init+0x80>)
 8000620:	9302      	str	r3, [sp, #8]
 8000622:	2300      	movs	r3, #0
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2310      	movs	r3, #16
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2307      	movs	r3, #7
 800062c:	2200      	movs	r2, #0
 800062e:	2100      	movs	r1, #0
 8000630:	2000      	movs	r0, #0
 8000632:	f002 f887 	bl	8002744 <aci_gap_set_auth_requirement>
 8000636:	0003      	movs	r3, r0
 8000638:	617b      	str	r3, [r7, #20]
                                       7,
                                       16,
                                       0x00,
                                       123456,
                                       0x00);
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b006      	add	sp, #24
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	08000735 	.word	0x08000735
 8000648:	0001e240 	.word	0x0001e240

0800064c <MX_BlueNRG_MS_Process>:

void MX_BlueNRG_MS_Process(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

  aci_gap_start_general_discovery_proc(0x4000, 0x4000,0x00,0x00);
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	01d9      	lsls	r1, r3, #7
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	01d8      	lsls	r0, r3, #7
 8000658:	2300      	movs	r3, #0
 800065a:	2200      	movs	r2, #0
 800065c:	f002 f903 	bl	8002866 <aci_gap_start_general_discovery_proc>
  HAL_Delay(95);
 8000660:	205f      	movs	r0, #95	; 0x5f
 8000662:	f000 fc27 	bl	8000eb4 <HAL_Delay>
  hci_user_evt_proc();
 8000666:	f002 fc53 	bl	8002f10 <hci_user_evt_proc>

}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <receiveData>:


void receiveData(uint8_t * data_buffer, uint8_t * rssi_data, uint8_t no_bytes)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	701a      	strb	r2, [r3, #0]

	int rssi;
	printf("DEVICE:");
 800067e:	4b25      	ldr	r3, [pc, #148]	; (8000714 <receiveData+0xa4>)
 8000680:	0018      	movs	r0, r3
 8000682:	f002 fe05 	bl	8003290 <iprintf>

        for(int i =0;i<no_bytes;i++)
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	e020      	b.n	80006ce <receiveData+0x5e>
        {
          rcv_data[i] = data_buffer[i];
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	18d3      	adds	r3, r2, r3
 8000692:	7819      	ldrb	r1, [r3, #0]
 8000694:	4a20      	ldr	r2, [pc, #128]	; (8000718 <receiveData+0xa8>)
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	18d3      	adds	r3, r2, r3
 800069a:	1c0a      	adds	r2, r1, #0
 800069c:	701a      	strb	r2, [r3, #0]
          RSSI[30] = rssi_data[30];
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	7f9a      	ldrb	r2, [r3, #30]
 80006a2:	4b1e      	ldr	r3, [pc, #120]	; (800071c <receiveData+0xac>)
 80006a4:	779a      	strb	r2, [r3, #30]
          rssi = (0xff - RSSI[30])+1;
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <receiveData+0xac>)
 80006a8:	7f9b      	ldrb	r3, [r3, #30]
 80006aa:	001a      	movs	r2, r3
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	617b      	str	r3, [r7, #20]
          printf("%i", rcv_data[i]);
 80006b4:	4a18      	ldr	r2, [pc, #96]	; (8000718 <receiveData+0xa8>)
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	18d3      	adds	r3, r2, r3
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	001a      	movs	r2, r3
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <receiveData+0xb0>)
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f002 fde4 	bl	8003290 <iprintf>
        for(int i =0;i<no_bytes;i++)
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	3301      	adds	r3, #1
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dbd9      	blt.n	800068c <receiveData+0x1c>
        }

    printf("   ");
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <receiveData+0xb4>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f002 fdd8 	bl	8003290 <iprintf>
    printf("RSSI:");
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <receiveData+0xb8>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f002 fdd4 	bl	8003290 <iprintf>
    printf("%d",rssi);
 80006e8:	697a      	ldr	r2, [r7, #20]
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <receiveData+0xbc>)
 80006ec:	0011      	movs	r1, r2
 80006ee:	0018      	movs	r0, r3
 80006f0:	f002 fdce 	bl	8003290 <iprintf>
    printf("   ");
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <receiveData+0xb4>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f002 fdca 	bl	8003290 <iprintf>
    printf("\n\r");
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <receiveData+0xc0>)
 80006fe:	0018      	movs	r0, r3
 8000700:	f002 fdc6 	bl	8003290 <iprintf>
    printf("\n\r");
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <receiveData+0xc0>)
 8000706:	0018      	movs	r0, r3
 8000708:	f002 fdc2 	bl	8003290 <iprintf>
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	b006      	add	sp, #24
 8000712:	bd80      	pop	{r7, pc}
 8000714:	080040d8 	.word	0x080040d8
 8000718:	200004a0 	.word	0x200004a0
 800071c:	20000480 	.word	0x20000480
 8000720:	080040e0 	.word	0x080040e0
 8000724:	080040e4 	.word	0x080040e4
 8000728:	080040e8 	.word	0x080040e8
 800072c:	080040f0 	.word	0x080040f0
 8000730:	080040f4 	.word	0x080040f4

08000734 <user_notify>:

void user_notify(void *pData)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
                hci_uart_pckt *hci_pckt = pData;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	617b      	str	r3, [r7, #20]

                hci_event_pckt *event_pckt = (hci_event_pckt *)hci_pckt->data;
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	3301      	adds	r3, #1
 8000744:	613b      	str	r3, [r7, #16]

               if(hci_pckt->type != HCI_EVENT_PKT)
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b04      	cmp	r3, #4
 800074c:	d11c      	bne.n	8000788 <user_notify+0x54>
                             return;

               switch(event_pckt->evt)
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b3e      	cmp	r3, #62	; 0x3e
 8000754:	d119      	bne.n	800078a <user_notify+0x56>
              {
                             case EVT_LE_META_EVENT:
                             {
                                           evt_le_meta_event *evt = (void *)event_pckt->data;
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	3302      	adds	r3, #2
 800075a:	60fb      	str	r3, [r7, #12]
                                           switch(evt->subevent)
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b02      	cmp	r3, #2
 8000762:	d000      	beq.n	8000766 <user_notify+0x32>
                                        receiveData(pr->bdaddr,pr->data_RSSI, pr->data_length);
                                 }
                                 break;
                                           }
                                           }
                             break;
 8000764:	e011      	b.n	800078a <user_notify+0x56>
                                        le_advertising_info *pr = (le_advertising_info *)(((uint8_t*)evt->data)+1); /* evt->data[0] is number of reports (On BlueNRG-MS is always 1) */
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	3301      	adds	r3, #1
 800076a:	3301      	adds	r3, #1
 800076c:	60bb      	str	r3, [r7, #8]
                                        receiveData(pr->bdaddr,pr->data_RSSI, pr->data_length);
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	1c98      	adds	r0, r3, #2
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	3309      	adds	r3, #9
 8000776:	0019      	movs	r1, r3
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	7a1b      	ldrb	r3, [r3, #8]
 800077c:	001a      	movs	r2, r3
 800077e:	f7ff ff77 	bl	8000670 <receiveData>
                                 break;
 8000782:	46c0      	nop			; (mov r8, r8)
                             break;
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	e000      	b.n	800078a <user_notify+0x56>
                             return;
 8000788:	46c0      	nop			; (mov r8, r8)

              }
}
 800078a:	46bd      	mov	sp, r7
 800078c:	b006      	add	sp, #24
 800078e:	bd80      	pop	{r7, pc}

08000790 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <BSP_SPI1_Init+0x54>)
 800079c:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <BSP_SPI1_Init+0x58>)
 800079e:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <BSP_SPI1_Init+0x5c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	1c59      	adds	r1, r3, #1
 80007a6:	4a11      	ldr	r2, [pc, #68]	; (80007ec <BSP_SPI1_Init+0x5c>)
 80007a8:	6011      	str	r1, [r2, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d115      	bne.n	80007da <BSP_SPI1_Init+0x4a>
  {
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <BSP_SPI1_Init+0x54>)
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 fea1 	bl	80024f8 <HAL_SPI_GetState>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d10f      	bne.n	80007da <BSP_SPI1_Init+0x4a>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <BSP_SPI1_Init+0x54>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 f881 	bl	80008c4 <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d108      	bne.n	80007da <BSP_SPI1_Init+0x4a>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <BSP_SPI1_Init+0x54>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f000 f838 	bl	8000840 <MX_SPI1_Init>
 80007d0:	1e03      	subs	r3, r0, #0
 80007d2:	d002      	beq.n	80007da <BSP_SPI1_Init+0x4a>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 80007d4:	2308      	movs	r3, #8
 80007d6:	425b      	negs	r3, r3
 80007d8:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 80007da:	687b      	ldr	r3, [r7, #4]
}
 80007dc:	0018      	movs	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	b002      	add	sp, #8
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200004c0 	.word	0x200004c0
 80007e8:	40013000 	.word	0x40013000
 80007ec:	2000018c 	.word	0x2000018c

080007f0 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b089      	sub	sp, #36	; 0x24
 80007f4:	af02      	add	r7, sp, #8
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	1dbb      	adds	r3, r7, #6
 80007fc:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000802:	1dbb      	adds	r3, r7, #6
 8000804:	881c      	ldrh	r4, [r3, #0]
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	68f9      	ldr	r1, [r7, #12]
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <BSP_SPI1_SendRecv+0x3c>)
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	015b      	lsls	r3, r3, #5
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	0023      	movs	r3, r4
 8000814:	f001 fcb4 	bl	8002180 <HAL_SPI_TransmitReceive>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d002      	beq.n	8000822 <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800081c:	2306      	movs	r3, #6
 800081e:	425b      	negs	r3, r3
 8000820:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8000822:	697b      	ldr	r3, [r7, #20]
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	b007      	add	sp, #28
 800082a:	bd90      	pop	{r4, r7, pc}
 800082c:	200004c0 	.word	0x200004c0

08000830 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000834:	f000 fb34 	bl	8000ea0 <HAL_GetTick>
 8000838:	0003      	movs	r3, r0
}
 800083a:	0018      	movs	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000848:	230f      	movs	r3, #15
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
  hspi->Instance = SPI1;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <MX_SPI1_Init+0x80>)
 8000854:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2282      	movs	r2, #130	; 0x82
 800085a:	0052      	lsls	r2, r2, #1
 800085c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0092      	lsls	r2, r2, #2
 800087c:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2200      	movs	r2, #0
 800088e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2207      	movs	r2, #7
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 fbfc 	bl	800209c <HAL_SPI_Init>
 80008a4:	1e03      	subs	r3, r0, #0
 80008a6:	d003      	beq.n	80008b0 <MX_SPI1_Init+0x70>
  {
    ret = HAL_ERROR;
 80008a8:	230f      	movs	r3, #15
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	2201      	movs	r2, #1
 80008ae:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80008b0:	230f      	movs	r3, #15
 80008b2:	18fb      	adds	r3, r7, r3
 80008b4:	781b      	ldrb	r3, [r3, #0]
}
 80008b6:	0018      	movs	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b004      	add	sp, #16
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40013000 	.word	0x40013000

080008c4 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b089      	sub	sp, #36	; 0x24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008cc:	4b2d      	ldr	r3, [pc, #180]	; (8000984 <SPI1_MspInit+0xc0>)
 80008ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008d0:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <SPI1_MspInit+0xc0>)
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	0149      	lsls	r1, r1, #5
 80008d6:	430a      	orrs	r2, r1
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <SPI1_MspInit+0xc0>)
 80008dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008de:	4b29      	ldr	r3, [pc, #164]	; (8000984 <SPI1_MspInit+0xc0>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	430a      	orrs	r2, r1
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80008e6:	4b27      	ldr	r3, [pc, #156]	; (8000984 <SPI1_MspInit+0xc0>)
 80008e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ea:	2201      	movs	r2, #1
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80008f2:	240c      	movs	r4, #12
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2220      	movs	r2, #32
 80008f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2202      	movs	r2, #2
 80008fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2203      	movs	r2, #3
 800090a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000912:	193a      	adds	r2, r7, r4
 8000914:	23a0      	movs	r3, #160	; 0xa0
 8000916:	05db      	lsls	r3, r3, #23
 8000918:	0011      	movs	r1, r2
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fbc6 	bl	80010ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000920:	193b      	adds	r3, r7, r4
 8000922:	2240      	movs	r2, #64	; 0x40
 8000924:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	193b      	adds	r3, r7, r4
 8000928:	2202      	movs	r2, #2
 800092a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2203      	movs	r2, #3
 8000936:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800093e:	193a      	adds	r2, r7, r4
 8000940:	23a0      	movs	r3, #160	; 0xa0
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	0011      	movs	r1, r2
 8000946:	0018      	movs	r0, r3
 8000948:	f000 fbb0 	bl	80010ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800094c:	0021      	movs	r1, r4
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2280      	movs	r2, #128	; 0x80
 8000952:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2202      	movs	r2, #2
 8000958:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2203      	movs	r2, #3
 8000964:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800096c:	187a      	adds	r2, r7, r1
 800096e:	23a0      	movs	r3, #160	; 0xa0
 8000970:	05db      	lsls	r3, r3, #23
 8000972:	0011      	movs	r1, r2
 8000974:	0018      	movs	r0, r3
 8000976:	f000 fb99 	bl	80010ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b009      	add	sp, #36	; 0x24
 8000980:	bd90      	pop	{r4, r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	40021000 	.word	0x40021000

08000988 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	240c      	movs	r4, #12
 8000990:	193b      	adds	r3, r7, r4
 8000992:	0018      	movs	r0, r3
 8000994:	2314      	movs	r3, #20
 8000996:	001a      	movs	r2, r3
 8000998:	2100      	movs	r1, #0
 800099a:	f002 fc70 	bl	800327e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_GPIO_Init+0xa0>)
 80009a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <MX_GPIO_Init+0xa0>)
 80009a4:	2101      	movs	r1, #1
 80009a6:	430a      	orrs	r2, r1
 80009a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_GPIO_Init+0xa0>)
 80009ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ae:	2201      	movs	r2, #1
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_GPIO_Init+0xa0>)
 80009b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_GPIO_Init+0xa0>)
 80009bc:	2104      	movs	r1, #4
 80009be:	430a      	orrs	r2, r1
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <MX_GPIO_Init+0xa0>)
 80009c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c6:	2204      	movs	r2, #4
 80009c8:	4013      	ands	r3, r2
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_GPIO_Init+0xa4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	2130      	movs	r1, #48	; 0x30
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 fdd6 	bl	8001586 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	2201      	movs	r2, #1
 80009de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <MX_GPIO_Init+0xa8>)
 80009e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	193a      	adds	r2, r7, r4
 80009ee:	23a0      	movs	r3, #160	; 0xa0
 80009f0:	05db      	lsls	r3, r3, #23
 80009f2:	0011      	movs	r1, r2
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 fb59 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009fa:	0021      	movs	r1, r4
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2230      	movs	r2, #48	; 0x30
 8000a00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2201      	movs	r2, #1
 8000a06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <MX_GPIO_Init+0xa4>)
 8000a18:	0019      	movs	r1, r3
 8000a1a:	0010      	movs	r0, r2
 8000a1c:	f000 fb46 	bl	80010ac <HAL_GPIO_Init>

}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b009      	add	sp, #36	; 0x24
 8000a26:	bd90      	pop	{r4, r7, pc}
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	50000800 	.word	0x50000800
 8000a30:	10110000 	.word	0x10110000

08000a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3a:	f000 f9cb 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3e:	f000 f80d 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a42:	f7ff ffa1 	bl	8000988 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  MX_BlueNRG_MS_Init();
 8000a46:	f7ff fdbf 	bl	80005c8 <MX_BlueNRG_MS_Init>
  void* pConf = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
  HCI_TL_SPI_Init(pConf);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff fbe5 	bl	8000220 <HCI_TL_SPI_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_BlueNRG_MS_Process();
 8000a56:	f7ff fdf9 	bl	800064c <MX_BlueNRG_MS_Process>
 8000a5a:	e7fc      	b.n	8000a56 <main+0x22>

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b095      	sub	sp, #84	; 0x54
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	2418      	movs	r4, #24
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	0018      	movs	r0, r3
 8000a68:	2338      	movs	r3, #56	; 0x38
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f002 fc06 	bl	800327e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	0018      	movs	r0, r3
 8000a76:	2314      	movs	r3, #20
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f002 fbff 	bl	800327e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a80:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <SystemClock_Config+0xa0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a1e      	ldr	r2, [pc, #120]	; (8000b00 <SystemClock_Config+0xa4>)
 8000a86:	401a      	ands	r2, r3
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <SystemClock_Config+0xa0>)
 8000a8a:	2180      	movs	r1, #128	; 0x80
 8000a8c:	0109      	lsls	r1, r1, #4
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a92:	0021      	movs	r1, r4
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2210      	movs	r2, #16
 8000a98:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	22a0      	movs	r2, #160	; 0xa0
 8000aaa:	0212      	lsls	r2, r2, #8
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f000 fd82 	bl	80015c0 <HAL_RCC_OscConfig>
 8000abc:	1e03      	subs	r3, r0, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000ac0:	f000 f820 	bl	8000b04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	220f      	movs	r2, #15
 8000ac8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f001 f92a 	bl	8001d40 <HAL_RCC_ClockConfig>
 8000aec:	1e03      	subs	r3, r0, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000af0:	f000 f808 	bl	8000b04 <Error_Handler>
  }
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b015      	add	sp, #84	; 0x54
 8000afa:	bd90      	pop	{r4, r7, pc}
 8000afc:	40007000 	.word	0x40007000
 8000b00:	ffffe7ff 	.word	0xffffe7ff

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	200b      	movs	r0, #11
 8000b1a:	183b      	adds	r3, r7, r0
 8000b1c:	1c0a      	adds	r2, r1, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b20:	2317      	movs	r3, #23
 8000b22:	18fb      	adds	r3, r7, r3
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 8000b28:	183b      	adds	r3, r7, r0
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d103      	bne.n	8000b38 <HAL_EXTI_RegisterCallback+0x2a>
    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
      break;
#else
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->Callback = pPendingCbfn;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	605a      	str	r2, [r3, #4]
      break;
 8000b36:	e004      	b.n	8000b42 <HAL_EXTI_RegisterCallback+0x34>
#endif
    default:
      status = HAL_ERROR;
 8000b38:	2317      	movs	r3, #23
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
      break;
 8000b40:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8000b42:	2317      	movs	r3, #23
 8000b44:	18fb      	adds	r3, r7, r3
 8000b46:	781b      	ldrb	r3, [r3, #0]
}
 8000b48:	0018      	movs	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b006      	add	sp, #24
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if(hexti == NULL)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d101      	bne.n	8000b64 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	e003      	b.n	8000b6c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
  }
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b002      	add	sp, #8
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <HAL_MspInit+0x24>)
 8000b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_MspInit+0x24>)
 8000b7e:	2101      	movs	r1, #1
 8000b80:	430a      	orrs	r2, r1
 8000b82:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <HAL_MspInit+0x24>)
 8000b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <HAL_MspInit+0x24>)
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	0549      	lsls	r1, r1, #21
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40021000 	.word	0x40021000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f95a 	bl	8000e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	e00a      	b.n	8000bf6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000be0:	e000      	b.n	8000be4 <_read+0x16>
 8000be2:	bf00      	nop
 8000be4:	0001      	movs	r1, r0
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	1c5a      	adds	r2, r3, #1
 8000bea:	60ba      	str	r2, [r7, #8]
 8000bec:	b2ca      	uxtb	r2, r1
 8000bee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	dbf0      	blt.n	8000be0 <_read+0x12>
	}

return len;
 8000bfe:	687b      	ldr	r3, [r7, #4]
}
 8000c00:	0018      	movs	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b006      	add	sp, #24
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	e009      	b.n	8000c2e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1c5a      	adds	r2, r3, #1
 8000c1e:	60ba      	str	r2, [r7, #8]
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	0018      	movs	r0, r3
 8000c24:	e000      	b.n	8000c28 <_write+0x20>
 8000c26:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	dbf1      	blt.n	8000c1a <_write+0x12>
	}
	return len;
 8000c36:	687b      	ldr	r3, [r7, #4]
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b006      	add	sp, #24
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_close>:

int _close(int file)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	return -1;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	425b      	negs	r3, r3
}
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b002      	add	sp, #8
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	2280      	movs	r2, #128	; 0x80
 8000c62:	0192      	lsls	r2, r2, #6
 8000c64:	605a      	str	r2, [r3, #4]
	return 0;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	0018      	movs	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b002      	add	sp, #8
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <_isatty>:

int _isatty(int file)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	return 1;
 8000c78:	2301      	movs	r3, #1
}
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b084      	sub	sp, #16
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
	return 0;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b004      	add	sp, #16
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca0:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <_sbrk+0x5c>)
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <_sbrk+0x60>)
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <_sbrk+0x64>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <_sbrk+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	18d3      	adds	r3, r2, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d207      	bcs.n	8000cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc8:	f002 faa6 	bl	8003218 <__errno>
 8000ccc:	0003      	movs	r3, r0
 8000cce:	220c      	movs	r2, #12
 8000cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	425b      	negs	r3, r3
 8000cd6:	e009      	b.n	8000cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cde:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	18d2      	adds	r2, r2, r3
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <_sbrk+0x64>)
 8000ce8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b006      	add	sp, #24
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20002000 	.word	0x20002000
 8000cf8:	00000400 	.word	0x00000400
 8000cfc:	20000190 	.word	0x20000190
 8000d00:	20000530 	.word	0x20000530

08000d04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <SystemInit+0x64>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <SystemInit+0x64>)
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	0049      	lsls	r1, r1, #1
 8000d12:	430a      	orrs	r2, r1
 8000d14:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <SystemInit+0x64>)
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <SystemInit+0x64>)
 8000d1c:	4913      	ldr	r1, [pc, #76]	; (8000d6c <SystemInit+0x68>)
 8000d1e:	400a      	ands	r2, r1
 8000d20:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <SystemInit+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <SystemInit+0x64>)
 8000d28:	4911      	ldr	r1, [pc, #68]	; (8000d70 <SystemInit+0x6c>)
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <SystemInit+0x64>)
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <SystemInit+0x64>)
 8000d34:	2101      	movs	r1, #1
 8000d36:	438a      	bics	r2, r1
 8000d38:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <SystemInit+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <SystemInit+0x64>)
 8000d40:	490c      	ldr	r1, [pc, #48]	; (8000d74 <SystemInit+0x70>)
 8000d42:	400a      	ands	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <SystemInit+0x64>)
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <SystemInit+0x64>)
 8000d4c:	490a      	ldr	r1, [pc, #40]	; (8000d78 <SystemInit+0x74>)
 8000d4e:	400a      	ands	r2, r1
 8000d50:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SystemInit+0x64>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <SystemInit+0x78>)
 8000d5a:	2280      	movs	r2, #128	; 0x80
 8000d5c:	0512      	lsls	r2, r2, #20
 8000d5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	88ff400c 	.word	0x88ff400c
 8000d70:	fef6fff6 	.word	0xfef6fff6
 8000d74:	fffbffff 	.word	0xfffbffff
 8000d78:	ff02ffff 	.word	0xff02ffff
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000d84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d86:	e003      	b.n	8000d90 <LoopCopyDataInit>

08000d88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000d8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d8e:	3104      	adds	r1, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d90:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000d94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d98:	d3f6      	bcc.n	8000d88 <CopyDataInit>
  ldr  r2, =_sbss
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000d9c:	e002      	b.n	8000da4 <LoopFillZerobss>

08000d9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000d9e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000da0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da2:	3204      	adds	r2, #4

08000da4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <LoopForever+0x16>)
  cmp  r2, r3
 8000da6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000da8:	d3f9      	bcc.n	8000d9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000daa:	f7ff ffab 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dae:	f002 fa39 	bl	8003224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fe3f 	bl	8000a34 <main>

08000db6 <LoopForever>:

LoopForever:
    b LoopForever
 8000db6:	e7fe      	b.n	8000db6 <LoopForever>
  ldr   r0, =_estack
 8000db8:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8000dbc:	080041b4 	.word	0x080041b4
  ldr  r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dc4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000dc8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000dcc:	20000530 	.word	0x20000530

08000dd0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_COMP_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_Init+0x3c>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_Init+0x3c>)
 8000de6:	2140      	movs	r1, #64	; 0x40
 8000de8:	430a      	orrs	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dec:	2000      	movs	r0, #0
 8000dee:	f000 f811 	bl	8000e14 <HAL_InitTick>
 8000df2:	1e03      	subs	r3, r0, #0
 8000df4:	d003      	beq.n	8000dfe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
 8000dfc:	e001      	b.n	8000e02 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dfe:	f7ff feb9 	bl	8000b74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	781b      	ldrb	r3, [r3, #0]
}
 8000e06:	0018      	movs	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	40022000 	.word	0x40022000

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <HAL_InitTick+0x5c>)
 8000e1e:	681c      	ldr	r4, [r3, #0]
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_InitTick+0x60>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	0019      	movs	r1, r3
 8000e26:	23fa      	movs	r3, #250	; 0xfa
 8000e28:	0098      	lsls	r0, r3, #2
 8000e2a:	f7ff f96d 	bl	8000108 <__udivsi3>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	0019      	movs	r1, r3
 8000e32:	0020      	movs	r0, r4
 8000e34:	f7ff f968 	bl	8000108 <__udivsi3>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f000 f929 	bl	8001092 <HAL_SYSTICK_Config>
 8000e40:	1e03      	subs	r3, r0, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e00f      	b.n	8000e68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d80b      	bhi.n	8000e66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	2301      	movs	r3, #1
 8000e52:	425b      	negs	r3, r3
 8000e54:	2200      	movs	r2, #0
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 f8f6 	bl	8001048 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_InitTick+0x64>)
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e000      	b.n	8000e68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b003      	add	sp, #12
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000004 	.word	0x20000004

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <HAL_IncTick+0x1c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	001a      	movs	r2, r3
 8000e86:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <HAL_IncTick+0x20>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	18d2      	adds	r2, r2, r3
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_IncTick+0x20>)
 8000e8e:	601a      	str	r2, [r3, #0]
}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000518 	.word	0x20000518

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b02      	ldr	r3, [pc, #8]	; (8000eb0 <HAL_GetTick+0x10>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	20000518 	.word	0x20000518

08000eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ebc:	f7ff fff0 	bl	8000ea0 <HAL_GetTick>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	d005      	beq.n	8000eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_Delay+0x40>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	189b      	adds	r3, r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	f7ff ffe0 	bl	8000ea0 <HAL_GetTick>
 8000ee0:	0002      	movs	r2, r0
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d8f7      	bhi.n	8000edc <HAL_Delay+0x28>
  {
  }
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b004      	add	sp, #16
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	0002      	movs	r2, r0
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	001a      	movs	r2, r3
 8000f0a:	231f      	movs	r3, #31
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <NVIC_EnableIRQ+0x28>)
 8000f10:	2101      	movs	r1, #1
 8000f12:	4091      	lsls	r1, r2
 8000f14:	000a      	movs	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b7f      	cmp	r3, #127	; 0x7f
 8000f38:	d932      	bls.n	8000fa0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	; (8000ff8 <NVIC_SetPriority+0xd4>)
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	0019      	movs	r1, r3
 8000f42:	230f      	movs	r3, #15
 8000f44:	400b      	ands	r3, r1
 8000f46:	3b08      	subs	r3, #8
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3306      	adds	r3, #6
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	18d3      	adds	r3, r2, r3
 8000f50:	3304      	adds	r3, #4
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	1dfa      	adds	r2, r7, #7
 8000f56:	7812      	ldrb	r2, [r2, #0]
 8000f58:	0011      	movs	r1, r2
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	400a      	ands	r2, r1
 8000f5e:	00d2      	lsls	r2, r2, #3
 8000f60:	21ff      	movs	r1, #255	; 0xff
 8000f62:	4091      	lsls	r1, r2
 8000f64:	000a      	movs	r2, r1
 8000f66:	43d2      	mvns	r2, r2
 8000f68:	401a      	ands	r2, r3
 8000f6a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	019b      	lsls	r3, r3, #6
 8000f70:	22ff      	movs	r2, #255	; 0xff
 8000f72:	401a      	ands	r2, r3
 8000f74:	1dfb      	adds	r3, r7, #7
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	0018      	movs	r0, r3
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	4003      	ands	r3, r0
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f82:	481d      	ldr	r0, [pc, #116]	; (8000ff8 <NVIC_SetPriority+0xd4>)
 8000f84:	1dfb      	adds	r3, r7, #7
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	001c      	movs	r4, r3
 8000f8a:	230f      	movs	r3, #15
 8000f8c:	4023      	ands	r3, r4
 8000f8e:	3b08      	subs	r3, #8
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	430a      	orrs	r2, r1
 8000f94:	3306      	adds	r3, #6
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	18c3      	adds	r3, r0, r3
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f9e:	e027      	b.n	8000ff0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa0:	4a16      	ldr	r2, [pc, #88]	; (8000ffc <NVIC_SetPriority+0xd8>)
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	33c0      	adds	r3, #192	; 0xc0
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	589b      	ldr	r3, [r3, r2]
 8000fb0:	1dfa      	adds	r2, r7, #7
 8000fb2:	7812      	ldrb	r2, [r2, #0]
 8000fb4:	0011      	movs	r1, r2
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	400a      	ands	r2, r1
 8000fba:	00d2      	lsls	r2, r2, #3
 8000fbc:	21ff      	movs	r1, #255	; 0xff
 8000fbe:	4091      	lsls	r1, r2
 8000fc0:	000a      	movs	r2, r1
 8000fc2:	43d2      	mvns	r2, r2
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	019b      	lsls	r3, r3, #6
 8000fcc:	22ff      	movs	r2, #255	; 0xff
 8000fce:	401a      	ands	r2, r3
 8000fd0:	1dfb      	adds	r3, r7, #7
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	4003      	ands	r3, r0
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fde:	4807      	ldr	r0, [pc, #28]	; (8000ffc <NVIC_SetPriority+0xd8>)
 8000fe0:	1dfb      	adds	r3, r7, #7
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	33c0      	adds	r3, #192	; 0xc0
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	501a      	str	r2, [r3, r0]
}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b003      	add	sp, #12
 8000ff6:	bd90      	pop	{r4, r7, pc}
 8000ff8:	e000ed00 	.word	0xe000ed00
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	4a0c      	ldr	r2, [pc, #48]	; (8001040 <SysTick_Config+0x40>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d901      	bls.n	8001016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001012:	2301      	movs	r3, #1
 8001014:	e010      	b.n	8001038 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <SysTick_Config+0x44>)
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	3a01      	subs	r2, #1
 800101c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101e:	2301      	movs	r3, #1
 8001020:	425b      	negs	r3, r3
 8001022:	2103      	movs	r1, #3
 8001024:	0018      	movs	r0, r3
 8001026:	f7ff ff7d 	bl	8000f24 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <SysTick_Config+0x44>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SysTick_Config+0x44>)
 8001032:	2207      	movs	r2, #7
 8001034:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001036:	2300      	movs	r3, #0
}
 8001038:	0018      	movs	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	b002      	add	sp, #8
 800103e:	bd80      	pop	{r7, pc}
 8001040:	00ffffff 	.word	0x00ffffff
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	210f      	movs	r1, #15
 8001054:	187b      	adds	r3, r7, r1
 8001056:	1c02      	adds	r2, r0, #0
 8001058:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	187b      	adds	r3, r7, r1
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b25b      	sxtb	r3, r3
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ff5d 	bl	8000f24 <NVIC_SetPriority>
}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b004      	add	sp, #16
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	0002      	movs	r2, r0
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b25b      	sxtb	r3, r3
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff ff37 	bl	8000ef8 <NVIC_EnableIRQ>
}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff ffaf 	bl	8001000 <SysTick_Config>
 80010a2:	0003      	movs	r3, r0
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80010c2:	e14f      	b.n	8001364 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2101      	movs	r1, #1
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	4091      	lsls	r1, r2
 80010ce:	000a      	movs	r2, r1
 80010d0:	4013      	ands	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d100      	bne.n	80010dc <HAL_GPIO_Init+0x30>
 80010da:	e140      	b.n	800135e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d00b      	beq.n	80010fc <HAL_GPIO_Init+0x50>
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d007      	beq.n	80010fc <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f0:	2b11      	cmp	r3, #17
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b12      	cmp	r3, #18
 80010fa:	d130      	bne.n	800115e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	409a      	lsls	r2, r3
 800110a:	0013      	movs	r3, r2
 800110c:	43da      	mvns	r2, r3
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	409a      	lsls	r2, r3
 800111e:	0013      	movs	r3, r2
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001132:	2201      	movs	r2, #1
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	43da      	mvns	r2, r3
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	091b      	lsrs	r3, r3, #4
 8001148:	2201      	movs	r2, #1
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
 8001150:	0013      	movs	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	409a      	lsls	r2, r3
 800116c:	0013      	movs	r3, r2
 800116e:	43da      	mvns	r2, r3
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	409a      	lsls	r2, r3
 8001180:	0013      	movs	r3, r2
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0xf2>
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b12      	cmp	r3, #18
 800119c:	d123      	bne.n	80011e6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	08da      	lsrs	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3208      	adds	r2, #8
 80011a6:	0092      	lsls	r2, r2, #2
 80011a8:	58d3      	ldr	r3, [r2, r3]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	2207      	movs	r2, #7
 80011b0:	4013      	ands	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	43da      	mvns	r2, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	691a      	ldr	r2, [r3, #16]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2107      	movs	r1, #7
 80011ca:	400b      	ands	r3, r1
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	08da      	lsrs	r2, r3, #3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3208      	adds	r2, #8
 80011e0:	0092      	lsls	r2, r2, #2
 80011e2:	6939      	ldr	r1, [r7, #16]
 80011e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	43da      	mvns	r2, r3
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2203      	movs	r2, #3
 8001204:	401a      	ands	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	409a      	lsls	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	055b      	lsls	r3, r3, #21
 8001222:	4013      	ands	r3, r2
 8001224:	d100      	bne.n	8001228 <HAL_GPIO_Init+0x17c>
 8001226:	e09a      	b.n	800135e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001228:	4b54      	ldr	r3, [pc, #336]	; (800137c <HAL_GPIO_Init+0x2d0>)
 800122a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800122c:	4b53      	ldr	r3, [pc, #332]	; (800137c <HAL_GPIO_Init+0x2d0>)
 800122e:	2101      	movs	r1, #1
 8001230:	430a      	orrs	r2, r1
 8001232:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001234:	4a52      	ldr	r2, [pc, #328]	; (8001380 <HAL_GPIO_Init+0x2d4>)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	589b      	ldr	r3, [r3, r2]
 8001240:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	2203      	movs	r2, #3
 8001246:	4013      	ands	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	409a      	lsls	r2, r3
 800124e:	0013      	movs	r3, r2
 8001250:	43da      	mvns	r2, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	23a0      	movs	r3, #160	; 0xa0
 800125c:	05db      	lsls	r3, r3, #23
 800125e:	429a      	cmp	r2, r3
 8001260:	d019      	beq.n	8001296 <HAL_GPIO_Init+0x1ea>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a47      	ldr	r2, [pc, #284]	; (8001384 <HAL_GPIO_Init+0x2d8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d013      	beq.n	8001292 <HAL_GPIO_Init+0x1e6>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a46      	ldr	r2, [pc, #280]	; (8001388 <HAL_GPIO_Init+0x2dc>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d00d      	beq.n	800128e <HAL_GPIO_Init+0x1e2>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a45      	ldr	r2, [pc, #276]	; (800138c <HAL_GPIO_Init+0x2e0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d007      	beq.n	800128a <HAL_GPIO_Init+0x1de>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a44      	ldr	r2, [pc, #272]	; (8001390 <HAL_GPIO_Init+0x2e4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d101      	bne.n	8001286 <HAL_GPIO_Init+0x1da>
 8001282:	2305      	movs	r3, #5
 8001284:	e008      	b.n	8001298 <HAL_GPIO_Init+0x1ec>
 8001286:	2306      	movs	r3, #6
 8001288:	e006      	b.n	8001298 <HAL_GPIO_Init+0x1ec>
 800128a:	2303      	movs	r3, #3
 800128c:	e004      	b.n	8001298 <HAL_GPIO_Init+0x1ec>
 800128e:	2302      	movs	r3, #2
 8001290:	e002      	b.n	8001298 <HAL_GPIO_Init+0x1ec>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_GPIO_Init+0x1ec>
 8001296:	2300      	movs	r3, #0
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	2103      	movs	r1, #3
 800129c:	400a      	ands	r2, r1
 800129e:	0092      	lsls	r2, r2, #2
 80012a0:	4093      	lsls	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a8:	4935      	ldr	r1, [pc, #212]	; (8001380 <HAL_GPIO_Init+0x2d4>)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	089b      	lsrs	r3, r3, #2
 80012ae:	3302      	adds	r3, #2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b6:	4b37      	ldr	r3, [pc, #220]	; (8001394 <HAL_GPIO_Init+0x2e8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	43da      	mvns	r2, r3
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	025b      	lsls	r3, r3, #9
 80012ce:	4013      	ands	r3, r2
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012da:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <HAL_GPIO_Init+0x2e8>)
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012e0:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <HAL_GPIO_Init+0x2e8>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	43da      	mvns	r2, r3
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	029b      	lsls	r3, r3, #10
 80012f8:	4013      	ands	r3, r2
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001304:	4b23      	ldr	r3, [pc, #140]	; (8001394 <HAL_GPIO_Init+0x2e8>)
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130a:	4b22      	ldr	r3, [pc, #136]	; (8001394 <HAL_GPIO_Init+0x2e8>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	43da      	mvns	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	035b      	lsls	r3, r3, #13
 8001322:	4013      	ands	r3, r2
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <HAL_GPIO_Init+0x2e8>)
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <HAL_GPIO_Init+0x2e8>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	43da      	mvns	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	039b      	lsls	r3, r3, #14
 800134c:	4013      	ands	r3, r2
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_GPIO_Init+0x2e8>)
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3301      	adds	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	40da      	lsrs	r2, r3
 800136c:	1e13      	subs	r3, r2, #0
 800136e:	d000      	beq.n	8001372 <HAL_GPIO_Init+0x2c6>
 8001370:	e6a8      	b.n	80010c4 <HAL_GPIO_Init+0x18>
  }
}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	b006      	add	sp, #24
 8001378:	bd80      	pop	{r7, pc}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	40021000 	.word	0x40021000
 8001380:	40010000 	.word	0x40010000
 8001384:	50000400 	.word	0x50000400
 8001388:	50000800 	.word	0x50000800
 800138c:	50000c00 	.word	0x50000c00
 8001390:	50001c00 	.word	0x50001c00
 8001394:	40010400 	.word	0x40010400

08001398 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80013ae:	e0b6      	b.n	800151e <HAL_GPIO_DeInit+0x186>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80013b0:	2201      	movs	r2, #1
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	409a      	lsls	r2, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d100      	bne.n	80013c4 <HAL_GPIO_DeInit+0x2c>
 80013c2:	e0a9      	b.n	8001518 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80013c4:	4a5b      	ldr	r2, [pc, #364]	; (8001534 <HAL_GPIO_DeInit+0x19c>)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	589b      	ldr	r3, [r3, r2]
 80013d0:	60fb      	str	r3, [r7, #12]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	2203      	movs	r2, #3
 80013d6:	4013      	ands	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	220f      	movs	r2, #15
 80013dc:	409a      	lsls	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4013      	ands	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	23a0      	movs	r3, #160	; 0xa0
 80013e8:	05db      	lsls	r3, r3, #23
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d019      	beq.n	8001422 <HAL_GPIO_DeInit+0x8a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a51      	ldr	r2, [pc, #324]	; (8001538 <HAL_GPIO_DeInit+0x1a0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <HAL_GPIO_DeInit+0x86>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a50      	ldr	r2, [pc, #320]	; (800153c <HAL_GPIO_DeInit+0x1a4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d00d      	beq.n	800141a <HAL_GPIO_DeInit+0x82>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4f      	ldr	r2, [pc, #316]	; (8001540 <HAL_GPIO_DeInit+0x1a8>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d007      	beq.n	8001416 <HAL_GPIO_DeInit+0x7e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4e      	ldr	r2, [pc, #312]	; (8001544 <HAL_GPIO_DeInit+0x1ac>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d101      	bne.n	8001412 <HAL_GPIO_DeInit+0x7a>
 800140e:	2305      	movs	r3, #5
 8001410:	e008      	b.n	8001424 <HAL_GPIO_DeInit+0x8c>
 8001412:	2306      	movs	r3, #6
 8001414:	e006      	b.n	8001424 <HAL_GPIO_DeInit+0x8c>
 8001416:	2303      	movs	r3, #3
 8001418:	e004      	b.n	8001424 <HAL_GPIO_DeInit+0x8c>
 800141a:	2302      	movs	r3, #2
 800141c:	e002      	b.n	8001424 <HAL_GPIO_DeInit+0x8c>
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <HAL_GPIO_DeInit+0x8c>
 8001422:	2300      	movs	r3, #0
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	2103      	movs	r1, #3
 8001428:	400a      	ands	r2, r1
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	4093      	lsls	r3, r2
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	429a      	cmp	r2, r3
 8001432:	d132      	bne.n	800149a <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001434:	4b44      	ldr	r3, [pc, #272]	; (8001548 <HAL_GPIO_DeInit+0x1b0>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	43d9      	mvns	r1, r3
 800143c:	4b42      	ldr	r3, [pc, #264]	; (8001548 <HAL_GPIO_DeInit+0x1b0>)
 800143e:	400a      	ands	r2, r1
 8001440:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001442:	4b41      	ldr	r3, [pc, #260]	; (8001548 <HAL_GPIO_DeInit+0x1b0>)
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	43d9      	mvns	r1, r3
 800144a:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <HAL_GPIO_DeInit+0x1b0>)
 800144c:	400a      	ands	r2, r1
 800144e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001450:	4b3d      	ldr	r3, [pc, #244]	; (8001548 <HAL_GPIO_DeInit+0x1b0>)
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	43d9      	mvns	r1, r3
 8001458:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <HAL_GPIO_DeInit+0x1b0>)
 800145a:	400a      	ands	r2, r1
 800145c:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <HAL_GPIO_DeInit+0x1b0>)
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	43d9      	mvns	r1, r3
 8001466:	4b38      	ldr	r3, [pc, #224]	; (8001548 <HAL_GPIO_DeInit+0x1b0>)
 8001468:	400a      	ands	r2, r1
 800146a:	60da      	str	r2, [r3, #12]
        
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	2203      	movs	r2, #3
 8001470:	4013      	ands	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	220f      	movs	r2, #15
 8001476:	409a      	lsls	r2, r3
 8001478:	0013      	movs	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800147c:	4a2d      	ldr	r2, [pc, #180]	; (8001534 <HAL_GPIO_DeInit+0x19c>)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	3302      	adds	r3, #2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	589a      	ldr	r2, [r3, r2]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	43d9      	mvns	r1, r3
 800148c:	4829      	ldr	r0, [pc, #164]	; (8001534 <HAL_GPIO_DeInit+0x19c>)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	400a      	ands	r2, r1
 8001494:	3302      	adds	r3, #2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	2103      	movs	r1, #3
 80014a4:	4099      	lsls	r1, r3
 80014a6:	000b      	movs	r3, r1
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	08da      	lsrs	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3208      	adds	r2, #8
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	58d3      	ldr	r3, [r2, r3]
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	2107      	movs	r1, #7
 80014be:	400a      	ands	r2, r1
 80014c0:	0092      	lsls	r2, r2, #2
 80014c2:	210f      	movs	r1, #15
 80014c4:	4091      	lsls	r1, r2
 80014c6:	000a      	movs	r2, r1
 80014c8:	43d1      	mvns	r1, r2
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	08d2      	lsrs	r2, r2, #3
 80014ce:	4019      	ands	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3208      	adds	r2, #8
 80014d4:	0092      	lsls	r2, r2, #2
 80014d6:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	0052      	lsls	r2, r2, #1
 80014e0:	2103      	movs	r1, #3
 80014e2:	4091      	lsls	r1, r2
 80014e4:	000a      	movs	r2, r1
 80014e6:	43d2      	mvns	r2, r2
 80014e8:	401a      	ands	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2101      	movs	r1, #1
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	4091      	lsls	r1, r2
 80014f8:	000a      	movs	r2, r1
 80014fa:	43d2      	mvns	r2, r2
 80014fc:	401a      	ands	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	0052      	lsls	r2, r2, #1
 800150a:	2103      	movs	r1, #3
 800150c:	4091      	lsls	r1, r2
 800150e:	000a      	movs	r2, r1
 8001510:	43d2      	mvns	r2, r2
 8001512:	401a      	ands	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	609a      	str	r2, [r3, #8]
    }
    position++;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3301      	adds	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	40da      	lsrs	r2, r3
 8001524:	1e13      	subs	r3, r2, #0
 8001526:	d000      	beq.n	800152a <HAL_GPIO_DeInit+0x192>
 8001528:	e742      	b.n	80013b0 <HAL_GPIO_DeInit+0x18>
  }
}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	b006      	add	sp, #24
 8001530:	bd80      	pop	{r7, pc}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	40010000 	.word	0x40010000
 8001538:	50000400 	.word	0x50000400
 800153c:	50000800 	.word	0x50000800
 8001540:	50000c00 	.word	0x50000c00
 8001544:	50001c00 	.word	0x50001c00
 8001548:	40010400 	.word	0x40010400

0800154c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	000a      	movs	r2, r1
 8001556:	1cbb      	adds	r3, r7, #2
 8001558:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	1cba      	adds	r2, r7, #2
 8001560:	8812      	ldrh	r2, [r2, #0]
 8001562:	4013      	ands	r3, r2
 8001564:	d004      	beq.n	8001570 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001566:	230f      	movs	r3, #15
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	e003      	b.n	8001578 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001570:	230f      	movs	r3, #15
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001578:	230f      	movs	r3, #15
 800157a:	18fb      	adds	r3, r7, r3
 800157c:	781b      	ldrb	r3, [r3, #0]
}
 800157e:	0018      	movs	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	b004      	add	sp, #16
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	0008      	movs	r0, r1
 8001590:	0011      	movs	r1, r2
 8001592:	1cbb      	adds	r3, r7, #2
 8001594:	1c02      	adds	r2, r0, #0
 8001596:	801a      	strh	r2, [r3, #0]
 8001598:	1c7b      	adds	r3, r7, #1
 800159a:	1c0a      	adds	r2, r1, #0
 800159c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800159e:	1c7b      	adds	r3, r7, #1
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d004      	beq.n	80015b0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a6:	1cbb      	adds	r3, r7, #2
 80015a8:	881a      	ldrh	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80015ae:	e003      	b.n	80015b8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80015b0:	1cbb      	adds	r3, r7, #2
 80015b2:	881a      	ldrh	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b8:	46c0      	nop			; (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b002      	add	sp, #8
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b5b0      	push	{r4, r5, r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f000 fbab 	bl	8001d2a <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d4:	4bce      	ldr	r3, [pc, #824]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	220c      	movs	r2, #12
 80015da:	4013      	ands	r3, r2
 80015dc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015de:	4bcc      	ldr	r3, [pc, #816]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	025b      	lsls	r3, r3, #9
 80015e6:	4013      	ands	r3, r2
 80015e8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2201      	movs	r2, #1
 80015f0:	4013      	ands	r3, r2
 80015f2:	d100      	bne.n	80015f6 <HAL_RCC_OscConfig+0x36>
 80015f4:	e07e      	b.n	80016f4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d007      	beq.n	800160c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	d112      	bne.n	8001628 <HAL_RCC_OscConfig+0x68>
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	025b      	lsls	r3, r3, #9
 8001608:	429a      	cmp	r2, r3
 800160a:	d10d      	bne.n	8001628 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	4bc0      	ldr	r3, [pc, #768]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	029b      	lsls	r3, r3, #10
 8001614:	4013      	ands	r3, r2
 8001616:	d100      	bne.n	800161a <HAL_RCC_OscConfig+0x5a>
 8001618:	e06b      	b.n	80016f2 <HAL_RCC_OscConfig+0x132>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d167      	bne.n	80016f2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	f000 fb81 	bl	8001d2a <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	025b      	lsls	r3, r3, #9
 8001630:	429a      	cmp	r2, r3
 8001632:	d107      	bne.n	8001644 <HAL_RCC_OscConfig+0x84>
 8001634:	4bb6      	ldr	r3, [pc, #728]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4bb5      	ldr	r3, [pc, #724]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 800163a:	2180      	movs	r1, #128	; 0x80
 800163c:	0249      	lsls	r1, r1, #9
 800163e:	430a      	orrs	r2, r1
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	e027      	b.n	8001694 <HAL_RCC_OscConfig+0xd4>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	23a0      	movs	r3, #160	; 0xa0
 800164a:	02db      	lsls	r3, r3, #11
 800164c:	429a      	cmp	r2, r3
 800164e:	d10e      	bne.n	800166e <HAL_RCC_OscConfig+0xae>
 8001650:	4baf      	ldr	r3, [pc, #700]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4bae      	ldr	r3, [pc, #696]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 8001656:	2180      	movs	r1, #128	; 0x80
 8001658:	02c9      	lsls	r1, r1, #11
 800165a:	430a      	orrs	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	4bac      	ldr	r3, [pc, #688]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4bab      	ldr	r3, [pc, #684]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	0249      	lsls	r1, r1, #9
 8001668:	430a      	orrs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e012      	b.n	8001694 <HAL_RCC_OscConfig+0xd4>
 800166e:	4ba8      	ldr	r3, [pc, #672]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4ba7      	ldr	r3, [pc, #668]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 8001674:	49a7      	ldr	r1, [pc, #668]	; (8001914 <HAL_RCC_OscConfig+0x354>)
 8001676:	400a      	ands	r2, r1
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	4ba5      	ldr	r3, [pc, #660]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	025b      	lsls	r3, r3, #9
 8001682:	4013      	ands	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4ba1      	ldr	r3, [pc, #644]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4ba0      	ldr	r3, [pc, #640]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 800168e:	49a2      	ldr	r1, [pc, #648]	; (8001918 <HAL_RCC_OscConfig+0x358>)
 8001690:	400a      	ands	r2, r1
 8001692:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d015      	beq.n	80016c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fc00 	bl	8000ea0 <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016a4:	e009      	b.n	80016ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a6:	f7ff fbfb 	bl	8000ea0 <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b64      	cmp	r3, #100	; 0x64
 80016b2:	d902      	bls.n	80016ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	f000 fb38 	bl	8001d2a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016ba:	4b95      	ldr	r3, [pc, #596]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	029b      	lsls	r3, r3, #10
 80016c2:	4013      	ands	r3, r2
 80016c4:	d0ef      	beq.n	80016a6 <HAL_RCC_OscConfig+0xe6>
 80016c6:	e015      	b.n	80016f4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff fbea 	bl	8000ea0 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d2:	f7ff fbe5 	bl	8000ea0 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b64      	cmp	r3, #100	; 0x64
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e322      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016e4:	4b8a      	ldr	r3, [pc, #552]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	029b      	lsls	r3, r3, #10
 80016ec:	4013      	ands	r3, r2
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x112>
 80016f0:	e000      	b.n	80016f4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2202      	movs	r2, #2
 80016fa:	4013      	ands	r3, r2
 80016fc:	d100      	bne.n	8001700 <HAL_RCC_OscConfig+0x140>
 80016fe:	e08a      	b.n	8001816 <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	2b04      	cmp	r3, #4
 800170a:	d005      	beq.n	8001718 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	2b0c      	cmp	r3, #12
 8001710:	d13d      	bne.n	800178e <HAL_RCC_OscConfig+0x1ce>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d13a      	bne.n	800178e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001718:	4b7d      	ldr	r3, [pc, #500]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2204      	movs	r2, #4
 800171e:	4013      	ands	r3, r2
 8001720:	d004      	beq.n	800172c <HAL_RCC_OscConfig+0x16c>
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e2fe      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b78      	ldr	r3, [pc, #480]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a7a      	ldr	r2, [pc, #488]	; (800191c <HAL_RCC_OscConfig+0x35c>)
 8001732:	4013      	ands	r3, r2
 8001734:	0019      	movs	r1, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	021a      	lsls	r2, r3, #8
 800173c:	4b74      	ldr	r3, [pc, #464]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 800173e:	430a      	orrs	r2, r1
 8001740:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001742:	4b73      	ldr	r3, [pc, #460]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2209      	movs	r2, #9
 8001748:	4393      	bics	r3, r2
 800174a:	0019      	movs	r1, r3
 800174c:	4b70      	ldr	r3, [pc, #448]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	430a      	orrs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001754:	f000 fc1e 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8001758:	0001      	movs	r1, r0
 800175a:	4b6d      	ldr	r3, [pc, #436]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	091b      	lsrs	r3, r3, #4
 8001760:	220f      	movs	r2, #15
 8001762:	4013      	ands	r3, r2
 8001764:	4a6e      	ldr	r2, [pc, #440]	; (8001920 <HAL_RCC_OscConfig+0x360>)
 8001766:	5cd3      	ldrb	r3, [r2, r3]
 8001768:	000a      	movs	r2, r1
 800176a:	40da      	lsrs	r2, r3
 800176c:	4b6d      	ldr	r3, [pc, #436]	; (8001924 <HAL_RCC_OscConfig+0x364>)
 800176e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001770:	2513      	movs	r5, #19
 8001772:	197c      	adds	r4, r7, r5
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff fb4d 	bl	8000e14 <HAL_InitTick>
 800177a:	0003      	movs	r3, r0
 800177c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800177e:	197b      	adds	r3, r7, r5
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d047      	beq.n	8001816 <HAL_RCC_OscConfig+0x256>
      {
        return status;
 8001786:	2313      	movs	r3, #19
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	e2cd      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d027      	beq.n	80017e4 <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001794:	4b5e      	ldr	r3, [pc, #376]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2209      	movs	r2, #9
 800179a:	4393      	bics	r3, r2
 800179c:	0019      	movs	r1, r3
 800179e:	4b5c      	ldr	r3, [pc, #368]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff fb7b 	bl	8000ea0 <HAL_GetTick>
 80017aa:	0003      	movs	r3, r0
 80017ac:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff fb76 	bl	8000ea0 <HAL_GetTick>
 80017b4:	0002      	movs	r2, r0
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e2b3      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017c2:	4b53      	ldr	r3, [pc, #332]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2204      	movs	r2, #4
 80017c8:	4013      	ands	r3, r2
 80017ca:	d0f1      	beq.n	80017b0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017cc:	4b50      	ldr	r3, [pc, #320]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	4a52      	ldr	r2, [pc, #328]	; (800191c <HAL_RCC_OscConfig+0x35c>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	0019      	movs	r1, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	021a      	lsls	r2, r3, #8
 80017dc:	4b4c      	ldr	r3, [pc, #304]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 80017de:	430a      	orrs	r2, r1
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	e018      	b.n	8001816 <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e4:	4b4a      	ldr	r3, [pc, #296]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b49      	ldr	r3, [pc, #292]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 80017ea:	2101      	movs	r1, #1
 80017ec:	438a      	bics	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fb56 	bl	8000ea0 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fa:	f7ff fb51 	bl	8000ea0 <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e28e      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800180c:	4b40      	ldr	r3, [pc, #256]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2204      	movs	r2, #4
 8001812:	4013      	ands	r3, r2
 8001814:	d1f1      	bne.n	80017fa <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2210      	movs	r2, #16
 800181c:	4013      	ands	r3, r2
 800181e:	d100      	bne.n	8001822 <HAL_RCC_OscConfig+0x262>
 8001820:	e09e      	b.n	8001960 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d13f      	bne.n	80018a8 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001828:	4b39      	ldr	r3, [pc, #228]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4013      	ands	r3, r2
 8001832:	d005      	beq.n	8001840 <HAL_RCC_OscConfig+0x280>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e274      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001840:	4b33      	ldr	r3, [pc, #204]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	4a38      	ldr	r2, [pc, #224]	; (8001928 <HAL_RCC_OscConfig+0x368>)
 8001846:	4013      	ands	r3, r2
 8001848:	0019      	movs	r1, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800184e:	4b30      	ldr	r3, [pc, #192]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 8001850:	430a      	orrs	r2, r1
 8001852:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001854:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	0a19      	lsrs	r1, r3, #8
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	061a      	lsls	r2, r3, #24
 8001862:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 8001864:	430a      	orrs	r2, r1
 8001866:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	0b5b      	lsrs	r3, r3, #13
 800186e:	3301      	adds	r3, #1
 8001870:	2280      	movs	r2, #128	; 0x80
 8001872:	0212      	lsls	r2, r2, #8
 8001874:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001876:	4b26      	ldr	r3, [pc, #152]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	210f      	movs	r1, #15
 800187e:	400b      	ands	r3, r1
 8001880:	4927      	ldr	r1, [pc, #156]	; (8001920 <HAL_RCC_OscConfig+0x360>)
 8001882:	5ccb      	ldrb	r3, [r1, r3]
 8001884:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001886:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x364>)
 8001888:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800188a:	2513      	movs	r5, #19
 800188c:	197c      	adds	r4, r7, r5
 800188e:	2000      	movs	r0, #0
 8001890:	f7ff fac0 	bl	8000e14 <HAL_InitTick>
 8001894:	0003      	movs	r3, r0
 8001896:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001898:	197b      	adds	r3, r7, r5
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d05f      	beq.n	8001960 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 80018a0:	2313      	movs	r3, #19
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	e240      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d03d      	beq.n	800192c <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 80018b6:	2180      	movs	r1, #128	; 0x80
 80018b8:	0049      	lsls	r1, r1, #1
 80018ba:	430a      	orrs	r2, r1
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7ff faef 	bl	8000ea0 <HAL_GetTick>
 80018c2:	0003      	movs	r3, r0
 80018c4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018c8:	f7ff faea 	bl	8000ea0 <HAL_GetTick>
 80018cc:	0002      	movs	r2, r0
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e227      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4013      	ands	r3, r2
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4a0f      	ldr	r2, [pc, #60]	; (8001928 <HAL_RCC_OscConfig+0x368>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018fa:	4b05      	ldr	r3, [pc, #20]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	0a19      	lsrs	r1, r3, #8
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	061a      	lsls	r2, r3, #24
 8001908:	4b01      	ldr	r3, [pc, #4]	; (8001910 <HAL_RCC_OscConfig+0x350>)
 800190a:	430a      	orrs	r2, r1
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	e027      	b.n	8001960 <HAL_RCC_OscConfig+0x3a0>
 8001910:	40021000 	.word	0x40021000
 8001914:	fffeffff 	.word	0xfffeffff
 8001918:	fffbffff 	.word	0xfffbffff
 800191c:	ffffe0ff 	.word	0xffffe0ff
 8001920:	080040f8 	.word	0x080040f8
 8001924:	20000000 	.word	0x20000000
 8001928:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800192c:	4bbd      	ldr	r3, [pc, #756]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4bbc      	ldr	r3, [pc, #752]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001932:	49bd      	ldr	r1, [pc, #756]	; (8001c28 <HAL_RCC_OscConfig+0x668>)
 8001934:	400a      	ands	r2, r1
 8001936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff fab2 	bl	8000ea0 <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001942:	f7ff faad 	bl	8000ea0 <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e1ea      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001954:	4bb3      	ldr	r3, [pc, #716]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4013      	ands	r3, r2
 800195e:	d1f0      	bne.n	8001942 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2208      	movs	r2, #8
 8001966:	4013      	ands	r3, r2
 8001968:	d036      	beq.n	80019d8 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d019      	beq.n	80019a6 <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001972:	4bac      	ldr	r3, [pc, #688]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001974:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001976:	4bab      	ldr	r3, [pc, #684]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001978:	2101      	movs	r1, #1
 800197a:	430a      	orrs	r2, r1
 800197c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197e:	f7ff fa8f 	bl	8000ea0 <HAL_GetTick>
 8001982:	0003      	movs	r3, r0
 8001984:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001988:	f7ff fa8a 	bl	8000ea0 <HAL_GetTick>
 800198c:	0002      	movs	r2, r0
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e1c7      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800199a:	4ba2      	ldr	r3, [pc, #648]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 800199c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800199e:	2202      	movs	r2, #2
 80019a0:	4013      	ands	r3, r2
 80019a2:	d0f1      	beq.n	8001988 <HAL_RCC_OscConfig+0x3c8>
 80019a4:	e018      	b.n	80019d8 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a6:	4b9f      	ldr	r3, [pc, #636]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 80019a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019aa:	4b9e      	ldr	r3, [pc, #632]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 80019ac:	2101      	movs	r1, #1
 80019ae:	438a      	bics	r2, r1
 80019b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b2:	f7ff fa75 	bl	8000ea0 <HAL_GetTick>
 80019b6:	0003      	movs	r3, r0
 80019b8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019bc:	f7ff fa70 	bl	8000ea0 <HAL_GetTick>
 80019c0:	0002      	movs	r2, r0
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e1ad      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019ce:	4b95      	ldr	r3, [pc, #596]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 80019d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d2:	2202      	movs	r2, #2
 80019d4:	4013      	ands	r3, r2
 80019d6:	d1f1      	bne.n	80019bc <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2204      	movs	r2, #4
 80019de:	4013      	ands	r3, r2
 80019e0:	d100      	bne.n	80019e4 <HAL_RCC_OscConfig+0x424>
 80019e2:	e0af      	b.n	8001b44 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e4:	2327      	movs	r3, #39	; 0x27
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ec:	4b8d      	ldr	r3, [pc, #564]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 80019ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	055b      	lsls	r3, r3, #21
 80019f4:	4013      	ands	r3, r2
 80019f6:	d10a      	bne.n	8001a0e <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f8:	4b8a      	ldr	r3, [pc, #552]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 80019fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019fc:	4b89      	ldr	r3, [pc, #548]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 80019fe:	2180      	movs	r1, #128	; 0x80
 8001a00:	0549      	lsls	r1, r1, #21
 8001a02:	430a      	orrs	r2, r1
 8001a04:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a06:	2327      	movs	r3, #39	; 0x27
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0e:	4b87      	ldr	r3, [pc, #540]	; (8001c2c <HAL_RCC_OscConfig+0x66c>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4013      	ands	r3, r2
 8001a18:	d11a      	bne.n	8001a50 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1a:	4b84      	ldr	r3, [pc, #528]	; (8001c2c <HAL_RCC_OscConfig+0x66c>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4b83      	ldr	r3, [pc, #524]	; (8001c2c <HAL_RCC_OscConfig+0x66c>)
 8001a20:	2180      	movs	r1, #128	; 0x80
 8001a22:	0049      	lsls	r1, r1, #1
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a28:	f7ff fa3a 	bl	8000ea0 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a32:	f7ff fa35 	bl	8000ea0 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b64      	cmp	r3, #100	; 0x64
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e172      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a44:	4b79      	ldr	r3, [pc, #484]	; (8001c2c <HAL_RCC_OscConfig+0x66c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d107      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4ac>
 8001a5c:	4b71      	ldr	r3, [pc, #452]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001a5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a60:	4b70      	ldr	r3, [pc, #448]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001a62:	2180      	movs	r1, #128	; 0x80
 8001a64:	0049      	lsls	r1, r1, #1
 8001a66:	430a      	orrs	r2, r1
 8001a68:	651a      	str	r2, [r3, #80]	; 0x50
 8001a6a:	e031      	b.n	8001ad0 <HAL_RCC_OscConfig+0x510>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10c      	bne.n	8001a8e <HAL_RCC_OscConfig+0x4ce>
 8001a74:	4b6b      	ldr	r3, [pc, #428]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001a76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a78:	4b6a      	ldr	r3, [pc, #424]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001a7a:	496b      	ldr	r1, [pc, #428]	; (8001c28 <HAL_RCC_OscConfig+0x668>)
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	651a      	str	r2, [r3, #80]	; 0x50
 8001a80:	4b68      	ldr	r3, [pc, #416]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001a82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a84:	4b67      	ldr	r3, [pc, #412]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001a86:	496a      	ldr	r1, [pc, #424]	; (8001c30 <HAL_RCC_OscConfig+0x670>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	651a      	str	r2, [r3, #80]	; 0x50
 8001a8c:	e020      	b.n	8001ad0 <HAL_RCC_OscConfig+0x510>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	23a0      	movs	r3, #160	; 0xa0
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d10e      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4f8>
 8001a9a:	4b62      	ldr	r3, [pc, #392]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001a9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a9e:	4b61      	ldr	r3, [pc, #388]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	00c9      	lsls	r1, r1, #3
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	651a      	str	r2, [r3, #80]	; 0x50
 8001aa8:	4b5e      	ldr	r3, [pc, #376]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001aaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aac:	4b5d      	ldr	r3, [pc, #372]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001aae:	2180      	movs	r1, #128	; 0x80
 8001ab0:	0049      	lsls	r1, r1, #1
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	651a      	str	r2, [r3, #80]	; 0x50
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x510>
 8001ab8:	4b5a      	ldr	r3, [pc, #360]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001aba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001abc:	4b59      	ldr	r3, [pc, #356]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001abe:	495a      	ldr	r1, [pc, #360]	; (8001c28 <HAL_RCC_OscConfig+0x668>)
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ac4:	4b57      	ldr	r3, [pc, #348]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001ac6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ac8:	4b56      	ldr	r3, [pc, #344]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001aca:	4959      	ldr	r1, [pc, #356]	; (8001c30 <HAL_RCC_OscConfig+0x670>)
 8001acc:	400a      	ands	r2, r1
 8001ace:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d015      	beq.n	8001b04 <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad8:	f7ff f9e2 	bl	8000ea0 <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ae0:	e009      	b.n	8001af6 <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f7ff f9dd 	bl	8000ea0 <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	4a51      	ldr	r2, [pc, #324]	; (8001c34 <HAL_RCC_OscConfig+0x674>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e119      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001af6:	4b4b      	ldr	r3, [pc, #300]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001af8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4013      	ands	r3, r2
 8001b00:	d0ef      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x522>
 8001b02:	e014      	b.n	8001b2e <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b04:	f7ff f9cc 	bl	8000ea0 <HAL_GetTick>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b0c:	e009      	b.n	8001b22 <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7ff f9c7 	bl	8000ea0 <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	4a46      	ldr	r2, [pc, #280]	; (8001c34 <HAL_RCC_OscConfig+0x674>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e103      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b22:	4b40      	ldr	r3, [pc, #256]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001b24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d1ef      	bne.n	8001b0e <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b2e:	2327      	movs	r3, #39	; 0x27
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d105      	bne.n	8001b44 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b38:	4b3a      	ldr	r3, [pc, #232]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b3c:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001b3e:	493e      	ldr	r1, [pc, #248]	; (8001c38 <HAL_RCC_OscConfig+0x678>)
 8001b40:	400a      	ands	r2, r1
 8001b42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d049      	beq.n	8001be2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d026      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001b56:	4b33      	ldr	r3, [pc, #204]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b66:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001b68:	2101      	movs	r1, #1
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b6e:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001b70:	6a1a      	ldr	r2, [r3, #32]
 8001b72:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001b74:	2180      	movs	r1, #128	; 0x80
 8001b76:	0189      	lsls	r1, r1, #6
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f990 	bl	8000ea0 <HAL_GetTick>
 8001b80:	0003      	movs	r3, r0
 8001b82:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b86:	f7ff f98b 	bl	8000ea0 <HAL_GetTick>
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e0c8      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b98:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d0f1      	beq.n	8001b86 <HAL_RCC_OscConfig+0x5c6>
 8001ba2:	e01e      	b.n	8001be2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001baa:	2101      	movs	r1, #1
 8001bac:	438a      	bics	r2, r1
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001bb2:	6a1a      	ldr	r2, [r3, #32]
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <HAL_RCC_OscConfig+0x67c>)
 8001bb6:	4922      	ldr	r1, [pc, #136]	; (8001c40 <HAL_RCC_OscConfig+0x680>)
 8001bb8:	400a      	ands	r2, r1
 8001bba:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff f970 	bl	8000ea0 <HAL_GetTick>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bc6:	f7ff f96b 	bl	8000ea0 <HAL_GetTick>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e0a8      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	4013      	ands	r3, r2
 8001be0:	d1f1      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d100      	bne.n	8001bec <HAL_RCC_OscConfig+0x62c>
 8001bea:	e09d      	b.n	8001d28 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	2b0c      	cmp	r3, #12
 8001bf0:	d100      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x634>
 8001bf2:	e076      	b.n	8001ce2 <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d157      	bne.n	8001cac <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_RCC_OscConfig+0x664>)
 8001c02:	4910      	ldr	r1, [pc, #64]	; (8001c44 <HAL_RCC_OscConfig+0x684>)
 8001c04:	400a      	ands	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff f94a 	bl	8000ea0 <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c10:	e01a      	b.n	8001c48 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c12:	f7ff f945 	bl	8000ea0 <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d913      	bls.n	8001c48 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e082      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
 8001c24:	40021000 	.word	0x40021000
 8001c28:	fffffeff 	.word	0xfffffeff
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	fffffbff 	.word	0xfffffbff
 8001c34:	00001388 	.word	0x00001388
 8001c38:	efffffff 	.word	0xefffffff
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	ffffdfff 	.word	0xffffdfff
 8001c44:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c48:	4b3a      	ldr	r3, [pc, #232]	; (8001d34 <HAL_RCC_OscConfig+0x774>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	049b      	lsls	r3, r3, #18
 8001c50:	4013      	ands	r3, r2
 8001c52:	d1de      	bne.n	8001c12 <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c54:	4b37      	ldr	r3, [pc, #220]	; (8001d34 <HAL_RCC_OscConfig+0x774>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4a37      	ldr	r2, [pc, #220]	; (8001d38 <HAL_RCC_OscConfig+0x778>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <HAL_RCC_OscConfig+0x774>)
 8001c70:	430a      	orrs	r2, r1
 8001c72:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c74:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <HAL_RCC_OscConfig+0x774>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <HAL_RCC_OscConfig+0x774>)
 8001c7a:	2180      	movs	r1, #128	; 0x80
 8001c7c:	0449      	lsls	r1, r1, #17
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7ff f90d 	bl	8000ea0 <HAL_GetTick>
 8001c86:	0003      	movs	r3, r0
 8001c88:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7ff f908 	bl	8000ea0 <HAL_GetTick>
 8001c90:	0002      	movs	r2, r0
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e045      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c9e:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <HAL_RCC_OscConfig+0x774>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	049b      	lsls	r3, r3, #18
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x6cc>
 8001caa:	e03d      	b.n	8001d28 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cac:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_RCC_OscConfig+0x774>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_RCC_OscConfig+0x774>)
 8001cb2:	4922      	ldr	r1, [pc, #136]	; (8001d3c <HAL_RCC_OscConfig+0x77c>)
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff f8f2 	bl	8000ea0 <HAL_GetTick>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7ff f8ed 	bl	8000ea0 <HAL_GetTick>
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e02a      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_RCC_OscConfig+0x774>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	049b      	lsls	r3, r3, #18
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x702>
 8001ce0:	e022      	b.n	8001d28 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e01d      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_RCC_OscConfig+0x774>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	025b      	lsls	r3, r3, #9
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d10f      	bne.n	8001d24 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	23f0      	movs	r3, #240	; 0xf0
 8001d08:	039b      	lsls	r3, r3, #14
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d107      	bne.n	8001d24 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	23c0      	movs	r3, #192	; 0xc0
 8001d18:	041b      	lsls	r3, r3, #16
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b00a      	add	sp, #40	; 0x28
 8001d30:	bdb0      	pop	{r4, r5, r7, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	40021000 	.word	0x40021000
 8001d38:	ff02ffff 	.word	0xff02ffff
 8001d3c:	feffffff 	.word	0xfeffffff

08001d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b5b0      	push	{r4, r5, r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e10d      	b.n	8001f70 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d54:	4b88      	ldr	r3, [pc, #544]	; (8001f78 <HAL_RCC_ClockConfig+0x238>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d911      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b85      	ldr	r3, [pc, #532]	; (8001f78 <HAL_RCC_ClockConfig+0x238>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2201      	movs	r2, #1
 8001d68:	4393      	bics	r3, r2
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	4b82      	ldr	r3, [pc, #520]	; (8001f78 <HAL_RCC_ClockConfig+0x238>)
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d74:	4b80      	ldr	r3, [pc, #512]	; (8001f78 <HAL_RCC_ClockConfig+0x238>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0f4      	b.n	8001f70 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d009      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d90:	4b7a      	ldr	r3, [pc, #488]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	22f0      	movs	r2, #240	; 0xf0
 8001d96:	4393      	bics	r3, r2
 8001d98:	0019      	movs	r1, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	4b77      	ldr	r3, [pc, #476]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001da0:	430a      	orrs	r2, r1
 8001da2:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2201      	movs	r2, #1
 8001daa:	4013      	ands	r3, r2
 8001dac:	d100      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x70>
 8001dae:	e089      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d107      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001db8:	4b70      	ldr	r3, [pc, #448]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	029b      	lsls	r3, r3, #10
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d120      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0d3      	b.n	8001f70 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d107      	bne.n	8001de0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dd0:	4b6a      	ldr	r3, [pc, #424]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	049b      	lsls	r3, r3, #18
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d114      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0c7      	b.n	8001f70 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d106      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001de8:	4b64      	ldr	r3, [pc, #400]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2204      	movs	r2, #4
 8001dee:	4013      	ands	r3, r2
 8001df0:	d109      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0bc      	b.n	8001f70 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001df6:	4b61      	ldr	r3, [pc, #388]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0b4      	b.n	8001f70 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e06:	4b5d      	ldr	r3, [pc, #372]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	4393      	bics	r3, r2
 8001e0e:	0019      	movs	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	4b59      	ldr	r3, [pc, #356]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001e16:	430a      	orrs	r2, r1
 8001e18:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e1a:	f7ff f841 	bl	8000ea0 <HAL_GetTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d111      	bne.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e2a:	e009      	b.n	8001e40 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2c:	f7ff f838 	bl	8000ea0 <HAL_GetTick>
 8001e30:	0002      	movs	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	4a52      	ldr	r2, [pc, #328]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e097      	b.n	8001f70 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e40:	4b4e      	ldr	r3, [pc, #312]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	220c      	movs	r2, #12
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d1ef      	bne.n	8001e2c <HAL_RCC_ClockConfig+0xec>
 8001e4c:	e03a      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d111      	bne.n	8001e7a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e56:	e009      	b.n	8001e6c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e58:	f7ff f822 	bl	8000ea0 <HAL_GetTick>
 8001e5c:	0002      	movs	r2, r0
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	4a47      	ldr	r2, [pc, #284]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e081      	b.n	8001f70 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e6c:	4b43      	ldr	r3, [pc, #268]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	220c      	movs	r2, #12
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b0c      	cmp	r3, #12
 8001e76:	d1ef      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x118>
 8001e78:	e024      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d11b      	bne.n	8001eba <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e82:	e009      	b.n	8001e98 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e84:	f7ff f80c 	bl	8000ea0 <HAL_GetTick>
 8001e88:	0002      	movs	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	4a3c      	ldr	r2, [pc, #240]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e06b      	b.n	8001f70 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e98:	4b38      	ldr	r3, [pc, #224]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	220c      	movs	r2, #12
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d1ef      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x144>
 8001ea4:	e00e      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea6:	f7fe fffb 	bl	8000ea0 <HAL_GetTick>
 8001eaa:	0002      	movs	r2, r0
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	4a33      	ldr	r2, [pc, #204]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e05a      	b.n	8001f70 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001eba:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d1f0      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b2c      	ldr	r3, [pc, #176]	; (8001f78 <HAL_RCC_ClockConfig+0x238>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	4013      	ands	r3, r2
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d211      	bcs.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <HAL_RCC_ClockConfig+0x238>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4393      	bics	r3, r2
 8001eda:	0019      	movs	r1, r3
 8001edc:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <HAL_RCC_ClockConfig+0x238>)
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_RCC_ClockConfig+0x238>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4013      	ands	r3, r2
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e03c      	b.n	8001f70 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2204      	movs	r2, #4
 8001efc:	4013      	ands	r3, r2
 8001efe:	d009      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f00:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4a1f      	ldr	r2, [pc, #124]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001f10:	430a      	orrs	r2, r1
 8001f12:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2208      	movs	r2, #8
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d00a      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f1e:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	4a19      	ldr	r2, [pc, #100]	; (8001f88 <HAL_RCC_ClockConfig+0x248>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	00da      	lsls	r2, r3, #3
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001f30:	430a      	orrs	r2, r1
 8001f32:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f34:	f000 f82e 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8001f38:	0001      	movs	r1, r0
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <HAL_RCC_ClockConfig+0x23c>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	220f      	movs	r2, #15
 8001f42:	4013      	ands	r3, r2
 8001f44:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <HAL_RCC_ClockConfig+0x24c>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	000a      	movs	r2, r1
 8001f4a:	40da      	lsrs	r2, r3
 8001f4c:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <HAL_RCC_ClockConfig+0x250>)
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001f50:	250b      	movs	r5, #11
 8001f52:	197c      	adds	r4, r7, r5
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7fe ff5d 	bl	8000e14 <HAL_InitTick>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001f5e:	197b      	adds	r3, r7, r5
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001f66:	230b      	movs	r3, #11
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b004      	add	sp, #16
 8001f76:	bdb0      	pop	{r4, r5, r7, pc}
 8001f78:	40022000 	.word	0x40022000
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	00001388 	.word	0x00001388
 8001f84:	fffff8ff 	.word	0xfffff8ff
 8001f88:	ffffc7ff 	.word	0xffffc7ff
 8001f8c:	080040f8 	.word	0x080040f8
 8001f90:	20000000 	.word	0x20000000

08001f94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d00e      	beq.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001faa:	2b0c      	cmp	r3, #12
 8001fac:	d00f      	beq.n	8001fce <HAL_RCC_GetSysClockFreq+0x3a>
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d157      	bne.n	8002062 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001fb2:	4b35      	ldr	r3, [pc, #212]	; (8002088 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2210      	movs	r2, #16
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d002      	beq.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001fbc:	4b33      	ldr	r3, [pc, #204]	; (800208c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fbe:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001fc0:	e05d      	b.n	800207e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8001fc2:	4b33      	ldr	r3, [pc, #204]	; (8002090 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fc4:	613b      	str	r3, [r7, #16]
      break;
 8001fc6:	e05a      	b.n	800207e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fc8:	4b32      	ldr	r3, [pc, #200]	; (8002094 <HAL_RCC_GetSysClockFreq+0x100>)
 8001fca:	613b      	str	r3, [r7, #16]
      break;
 8001fcc:	e057      	b.n	800207e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	0c9b      	lsrs	r3, r3, #18
 8001fd2:	220f      	movs	r2, #15
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	4a30      	ldr	r2, [pc, #192]	; (8002098 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fd8:	5cd3      	ldrb	r3, [r2, r3]
 8001fda:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	0d9b      	lsrs	r3, r3, #22
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fe8:	4b27      	ldr	r3, [pc, #156]	; (8002088 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	025b      	lsls	r3, r3, #9
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d00f      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	000a      	movs	r2, r1
 8001ff8:	0152      	lsls	r2, r2, #5
 8001ffa:	1a52      	subs	r2, r2, r1
 8001ffc:	0193      	lsls	r3, r2, #6
 8001ffe:	1a9b      	subs	r3, r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	185b      	adds	r3, r3, r1
 8002004:	025b      	lsls	r3, r3, #9
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	0018      	movs	r0, r3
 800200a:	f7fe f87d 	bl	8000108 <__udivsi3>
 800200e:	0003      	movs	r3, r0
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	e023      	b.n	800205c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002014:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2210      	movs	r2, #16
 800201a:	4013      	ands	r3, r2
 800201c:	d00f      	beq.n	800203e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	000a      	movs	r2, r1
 8002022:	0152      	lsls	r2, r2, #5
 8002024:	1a52      	subs	r2, r2, r1
 8002026:	0193      	lsls	r3, r2, #6
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	185b      	adds	r3, r3, r1
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	0018      	movs	r0, r3
 8002034:	f7fe f868 	bl	8000108 <__udivsi3>
 8002038:	0003      	movs	r3, r0
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	e00e      	b.n	800205c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800203e:	68b9      	ldr	r1, [r7, #8]
 8002040:	000a      	movs	r2, r1
 8002042:	0152      	lsls	r2, r2, #5
 8002044:	1a52      	subs	r2, r2, r1
 8002046:	0193      	lsls	r3, r2, #6
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	185b      	adds	r3, r3, r1
 800204e:	029b      	lsls	r3, r3, #10
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	0018      	movs	r0, r3
 8002054:	f7fe f858 	bl	8000108 <__udivsi3>
 8002058:	0003      	movs	r3, r0
 800205a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	613b      	str	r3, [r7, #16]
      break;
 8002060:	e00d      	b.n	800207e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	0b5b      	lsrs	r3, r3, #13
 8002068:	2207      	movs	r2, #7
 800206a:	4013      	ands	r3, r2
 800206c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	3301      	adds	r3, #1
 8002072:	2280      	movs	r2, #128	; 0x80
 8002074:	0212      	lsls	r2, r2, #8
 8002076:	409a      	lsls	r2, r3
 8002078:	0013      	movs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
      break;
 800207c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800207e:	693b      	ldr	r3, [r7, #16]
}
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	b006      	add	sp, #24
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40021000 	.word	0x40021000
 800208c:	003d0900 	.word	0x003d0900
 8002090:	00f42400 	.word	0x00f42400
 8002094:	007a1200 	.word	0x007a1200
 8002098:	08004108 	.word	0x08004108

0800209c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e059      	b.n	8002162 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2251      	movs	r2, #81	; 0x51
 80020b8:	5c9b      	ldrb	r3, [r3, r2]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2250      	movs	r2, #80	; 0x50
 80020c4:	2100      	movs	r1, #0
 80020c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 f850 	bl	8002170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2251      	movs	r2, #81	; 0x51
 80020d4:	2102      	movs	r1, #2
 80020d6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2140      	movs	r1, #64	; 0x40
 80020e4:	438a      	bics	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6999      	ldr	r1, [r3, #24]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	400b      	ands	r3, r1
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	431a      	orrs	r2, r3
 800211c:	0011      	movs	r1, r2
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	0c1b      	lsrs	r3, r3, #16
 8002130:	2204      	movs	r2, #4
 8002132:	4013      	ands	r3, r2
 8002134:	0019      	movs	r1, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	69da      	ldr	r2, [r3, #28]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4907      	ldr	r1, [pc, #28]	; (800216c <HAL_SPI_Init+0xd0>)
 800214e:	400a      	ands	r2, r1
 8002150:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2251      	movs	r2, #81	; 0x51
 800215c:	2101      	movs	r1, #1
 800215e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	0018      	movs	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	b002      	add	sp, #8
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	fffff7ff 	.word	0xfffff7ff

08002170 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	b002      	add	sp, #8
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08c      	sub	sp, #48	; 0x30
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	001a      	movs	r2, r3
 800218e:	1cbb      	adds	r3, r7, #2
 8002190:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002192:	2301      	movs	r3, #1
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002196:	232b      	movs	r3, #43	; 0x2b
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2250      	movs	r2, #80	; 0x50
 80021a2:	5c9b      	ldrb	r3, [r3, r2]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_SPI_TransmitReceive+0x2c>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e1a1      	b.n	80024f0 <HAL_SPI_TransmitReceive+0x370>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2250      	movs	r2, #80	; 0x50
 80021b0:	2101      	movs	r1, #1
 80021b2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021b4:	f7fe fe74 	bl	8000ea0 <HAL_GetTick>
 80021b8:	0003      	movs	r3, r0
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021bc:	2023      	movs	r0, #35	; 0x23
 80021be:	183b      	adds	r3, r7, r0
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	2151      	movs	r1, #81	; 0x51
 80021c4:	5c52      	ldrb	r2, [r2, r1]
 80021c6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80021ce:	231a      	movs	r3, #26
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	1cba      	adds	r2, r7, #2
 80021d4:	8812      	ldrh	r2, [r2, #0]
 80021d6:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021d8:	183b      	adds	r3, r7, r0
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d012      	beq.n	8002206 <HAL_SPI_TransmitReceive+0x86>
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	2382      	movs	r3, #130	; 0x82
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d108      	bne.n	80021fc <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d104      	bne.n	80021fc <HAL_SPI_TransmitReceive+0x7c>
 80021f2:	2323      	movs	r3, #35	; 0x23
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d004      	beq.n	8002206 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 80021fc:	232b      	movs	r3, #43	; 0x2b
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	2202      	movs	r2, #2
 8002202:	701a      	strb	r2, [r3, #0]
    goto error;
 8002204:	e169      	b.n	80024da <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d006      	beq.n	800221a <HAL_SPI_TransmitReceive+0x9a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_SPI_TransmitReceive+0x9a>
 8002212:	1cbb      	adds	r3, r7, #2
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d104      	bne.n	8002224 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800221a:	232b      	movs	r3, #43	; 0x2b
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
    goto error;
 8002222:	e15a      	b.n	80024da <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2251      	movs	r2, #81	; 0x51
 8002228:	5c9b      	ldrb	r3, [r3, r2]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b04      	cmp	r3, #4
 800222e:	d003      	beq.n	8002238 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2251      	movs	r2, #81	; 0x51
 8002234:	2105      	movs	r1, #5
 8002236:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1cba      	adds	r2, r7, #2
 8002248:	8812      	ldrh	r2, [r2, #0]
 800224a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1cba      	adds	r2, r7, #2
 8002250:	8812      	ldrh	r2, [r2, #0]
 8002252:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1cba      	adds	r2, r7, #2
 800225e:	8812      	ldrh	r2, [r2, #0]
 8002260:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1cba      	adds	r2, r7, #2
 8002266:	8812      	ldrh	r2, [r2, #0]
 8002268:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2240      	movs	r2, #64	; 0x40
 800227e:	4013      	ands	r3, r2
 8002280:	2b40      	cmp	r3, #64	; 0x40
 8002282:	d007      	beq.n	8002294 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2140      	movs	r1, #64	; 0x40
 8002290:	430a      	orrs	r2, r1
 8002292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	429a      	cmp	r2, r3
 800229e:	d000      	beq.n	80022a2 <HAL_SPI_TransmitReceive+0x122>
 80022a0:	e07a      	b.n	8002398 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d004      	beq.n	80022b4 <HAL_SPI_TransmitReceive+0x134>
 80022aa:	231a      	movs	r3, #26
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d166      	bne.n	8002382 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	881a      	ldrh	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	1c9a      	adds	r2, r3, #2
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022d8:	e053      	b.n	8002382 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2202      	movs	r2, #2
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d11b      	bne.n	8002320 <HAL_SPI_TransmitReceive+0x1a0>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d016      	beq.n	8002320 <HAL_SPI_TransmitReceive+0x1a0>
 80022f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d113      	bne.n	8002320 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	881a      	ldrh	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	1c9a      	adds	r2, r3, #2
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2201      	movs	r2, #1
 8002328:	4013      	ands	r3, r2
 800232a:	2b01      	cmp	r3, #1
 800232c:	d119      	bne.n	8002362 <HAL_SPI_TransmitReceive+0x1e2>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002332:	b29b      	uxth	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d014      	beq.n	8002362 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002342:	b292      	uxth	r2, r2
 8002344:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	1c9a      	adds	r2, r3, #2
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800235e:	2301      	movs	r3, #1
 8002360:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002362:	f7fe fd9d 	bl	8000ea0 <HAL_GetTick>
 8002366:	0002      	movs	r2, r0
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800236e:	429a      	cmp	r2, r3
 8002370:	d807      	bhi.n	8002382 <HAL_SPI_TransmitReceive+0x202>
 8002372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002374:	3301      	adds	r3, #1
 8002376:	d004      	beq.n	8002382 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8002378:	232b      	movs	r3, #43	; 0x2b
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	2203      	movs	r2, #3
 800237e:	701a      	strb	r2, [r3, #0]
        goto error;
 8002380:	e0ab      	b.n	80024da <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002386:	b29b      	uxth	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1a6      	bne.n	80022da <HAL_SPI_TransmitReceive+0x15a>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002390:	b29b      	uxth	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1a1      	bne.n	80022da <HAL_SPI_TransmitReceive+0x15a>
 8002396:	e07f      	b.n	8002498 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_SPI_TransmitReceive+0x22c>
 80023a0:	231a      	movs	r3, #26
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d000      	beq.n	80023ac <HAL_SPI_TransmitReceive+0x22c>
 80023aa:	e06b      	b.n	8002484 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	330c      	adds	r3, #12
 80023b6:	7812      	ldrb	r2, [r2, #0]
 80023b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023d2:	e057      	b.n	8002484 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2202      	movs	r2, #2
 80023dc:	4013      	ands	r3, r2
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d11c      	bne.n	800241c <HAL_SPI_TransmitReceive+0x29c>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d017      	beq.n	800241c <HAL_SPI_TransmitReceive+0x29c>
 80023ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d114      	bne.n	800241c <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	330c      	adds	r3, #12
 80023fc:	7812      	ldrb	r2, [r2, #0]
 80023fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2201      	movs	r2, #1
 8002424:	4013      	ands	r3, r2
 8002426:	2b01      	cmp	r3, #1
 8002428:	d119      	bne.n	800245e <HAL_SPI_TransmitReceive+0x2de>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800242e:	b29b      	uxth	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d014      	beq.n	800245e <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800245a:	2301      	movs	r3, #1
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800245e:	f7fe fd1f 	bl	8000ea0 <HAL_GetTick>
 8002462:	0002      	movs	r2, r0
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800246a:	429a      	cmp	r2, r3
 800246c:	d802      	bhi.n	8002474 <HAL_SPI_TransmitReceive+0x2f4>
 800246e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002470:	3301      	adds	r3, #1
 8002472:	d102      	bne.n	800247a <HAL_SPI_TransmitReceive+0x2fa>
 8002474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002476:	2b00      	cmp	r3, #0
 8002478:	d104      	bne.n	8002484 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 800247a:	232b      	movs	r3, #43	; 0x2b
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	2203      	movs	r2, #3
 8002480:	701a      	strb	r2, [r3, #0]
        goto error;
 8002482:	e02a      	b.n	80024da <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1a2      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x254>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002492:	b29b      	uxth	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d19d      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	0018      	movs	r0, r3
 80024a0:	f000 f8a6 	bl	80025f0 <SPI_EndRxTxTransaction>
 80024a4:	1e03      	subs	r3, r0, #0
 80024a6:	d007      	beq.n	80024b8 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 80024a8:	232b      	movs	r3, #43	; 0x2b
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80024b6:	e010      	b.n	80024da <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10b      	bne.n	80024d8 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	e000      	b.n	80024da <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 80024d8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2251      	movs	r2, #81	; 0x51
 80024de:	2101      	movs	r1, #1
 80024e0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2250      	movs	r2, #80	; 0x50
 80024e6:	2100      	movs	r1, #0
 80024e8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80024ea:	232b      	movs	r3, #43	; 0x2b
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	781b      	ldrb	r3, [r3, #0]
}
 80024f0:	0018      	movs	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b00c      	add	sp, #48	; 0x30
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2251      	movs	r2, #81	; 0x51
 8002504:	5c9b      	ldrb	r3, [r3, r2]
 8002506:	b2db      	uxtb	r3, r3
}
 8002508:	0018      	movs	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	b002      	add	sp, #8
 800250e:	bd80      	pop	{r7, pc}

08002510 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	1dfb      	adds	r3, r7, #7
 800251e:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002520:	e050      	b.n	80025c4 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	d04d      	beq.n	80025c4 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002528:	f7fe fcba 	bl	8000ea0 <HAL_GetTick>
 800252c:	0002      	movs	r2, r0
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d902      	bls.n	800253e <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d142      	bne.n	80025c4 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	21e0      	movs	r1, #224	; 0xe0
 800254a:	438a      	bics	r2, r1
 800254c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	2382      	movs	r3, #130	; 0x82
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	429a      	cmp	r2, r3
 8002558:	d113      	bne.n	8002582 <SPI_WaitFlagStateUntilTimeout+0x72>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	429a      	cmp	r2, r3
 8002564:	d005      	beq.n	8002572 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	429a      	cmp	r2, r3
 8002570:	d107      	bne.n	8002582 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2140      	movs	r1, #64	; 0x40
 800257e:	438a      	bics	r2, r1
 8002580:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	019b      	lsls	r3, r3, #6
 800258a:	429a      	cmp	r2, r3
 800258c:	d110      	bne.n	80025b0 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4914      	ldr	r1, [pc, #80]	; (80025ec <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800259a:	400a      	ands	r2, r1
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2180      	movs	r1, #128	; 0x80
 80025aa:	0189      	lsls	r1, r1, #6
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2251      	movs	r2, #81	; 0x51
 80025b4:	2101      	movs	r1, #1
 80025b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2250      	movs	r2, #80	; 0x50
 80025bc:	2100      	movs	r1, #0
 80025be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e00f      	b.n	80025e4 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	4013      	ands	r3, r2
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	425a      	negs	r2, r3
 80025d4:	4153      	adcs	r3, r2
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	001a      	movs	r2, r3
 80025da:	1dfb      	adds	r3, r7, #7
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d19f      	bne.n	8002522 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b004      	add	sp, #16
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	ffffdfff 	.word	0xffffdfff

080025f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	2382      	movs	r3, #130	; 0x82
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	429a      	cmp	r2, r3
 8002606:	d112      	bne.n	800262e <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	0013      	movs	r3, r2
 8002612:	2200      	movs	r2, #0
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	f7ff ff7b 	bl	8002510 <SPI_WaitFlagStateUntilTimeout>
 800261a:	1e03      	subs	r3, r0, #0
 800261c:	d020      	beq.n	8002660 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	2220      	movs	r2, #32
 8002624:	431a      	orrs	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e019      	b.n	8002662 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2251      	movs	r2, #81	; 0x51
 8002632:	5c9b      	ldrb	r3, [r3, r2]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b05      	cmp	r3, #5
 8002638:	d112      	bne.n	8002660 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	0013      	movs	r3, r2
 8002644:	2200      	movs	r2, #0
 8002646:	2101      	movs	r1, #1
 8002648:	f7ff ff62 	bl	8002510 <SPI_WaitFlagStateUntilTimeout>
 800264c:	1e03      	subs	r3, r0, #0
 800264e:	d007      	beq.n	8002660 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	2220      	movs	r2, #32
 8002656:	431a      	orrs	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e000      	b.n	8002662 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	0018      	movs	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	b004      	add	sp, #16
 8002668:	bd80      	pop	{r7, pc}

0800266a <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800266a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800266c:	b08d      	sub	sp, #52	; 0x34
 800266e:	af00      	add	r7, sp, #0
 8002670:	0004      	movs	r4, r0
 8002672:	0008      	movs	r0, r1
 8002674:	0011      	movs	r1, r2
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	1dfb      	adds	r3, r7, #7
 800267a:	1c22      	adds	r2, r4, #0
 800267c:	701a      	strb	r2, [r3, #0]
 800267e:	1dbb      	adds	r3, r7, #6
 8002680:	1c02      	adds	r2, r0, #0
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	1d7b      	adds	r3, r7, #5
 8002686:	1c0a      	adds	r2, r1, #0
 8002688:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800268a:	2514      	movs	r5, #20
 800268c:	197b      	adds	r3, r7, r5
 800268e:	1dfa      	adds	r2, r7, #7
 8002690:	7812      	ldrb	r2, [r2, #0]
 8002692:	701a      	strb	r2, [r3, #0]
  cp.privacy_enabled = privacy_enabled;
 8002694:	197b      	adds	r3, r7, r5
 8002696:	1dba      	adds	r2, r7, #6
 8002698:	7812      	ldrb	r2, [r2, #0]
 800269a:	705a      	strb	r2, [r3, #1]
  cp.device_name_char_len = device_name_char_len;
 800269c:	197b      	adds	r3, r7, r5
 800269e:	1d7a      	adds	r2, r7, #5
 80026a0:	7812      	ldrb	r2, [r2, #0]
 80026a2:	709a      	strb	r2, [r3, #2]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80026a4:	260c      	movs	r6, #12
 80026a6:	19bb      	adds	r3, r7, r6
 80026a8:	2207      	movs	r2, #7
 80026aa:	2100      	movs	r1, #0
 80026ac:	0018      	movs	r0, r3
 80026ae:	f000 fde6 	bl	800327e <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80026b2:	2118      	movs	r1, #24
 80026b4:	000c      	movs	r4, r1
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	2218      	movs	r2, #24
 80026ba:	2100      	movs	r1, #0
 80026bc:	0018      	movs	r0, r3
 80026be:	f000 fdde 	bl	800327e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80026c2:	0021      	movs	r1, r4
 80026c4:	187b      	adds	r3, r7, r1
 80026c6:	223f      	movs	r2, #63	; 0x3f
 80026c8:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GAP_INIT;
 80026ca:	187b      	adds	r3, r7, r1
 80026cc:	228a      	movs	r2, #138	; 0x8a
 80026ce:	805a      	strh	r2, [r3, #2]
  rq.cparam = &cp;
 80026d0:	187b      	adds	r3, r7, r1
 80026d2:	197a      	adds	r2, r7, r5
 80026d4:	609a      	str	r2, [r3, #8]
  rq.clen = sizeof(cp);
 80026d6:	187b      	adds	r3, r7, r1
 80026d8:	2203      	movs	r2, #3
 80026da:	60da      	str	r2, [r3, #12]
  rq.rparam = &resp;
 80026dc:	187b      	adds	r3, r7, r1
 80026de:	19ba      	adds	r2, r7, r6
 80026e0:	611a      	str	r2, [r3, #16]
  rq.rlen = GAP_INIT_RP_SIZE;
 80026e2:	187b      	adds	r3, r7, r1
 80026e4:	2207      	movs	r2, #7
 80026e6:	615a      	str	r2, [r3, #20]
  
  if (hci_send_req(&rq, FALSE) < 0)
 80026e8:	187b      	adds	r3, r7, r1
 80026ea:	2100      	movs	r1, #0
 80026ec:	0018      	movs	r0, r3
 80026ee:	f000 fae1 	bl	8002cb4 <hci_send_req>
 80026f2:	1e03      	subs	r3, r0, #0
 80026f4:	da01      	bge.n	80026fa <aci_gap_init_IDB05A1+0x90>
    return BLE_STATUS_TIMEOUT;
 80026f6:	23ff      	movs	r3, #255	; 0xff
 80026f8:	e020      	b.n	800273c <aci_gap_init_IDB05A1+0xd2>
  
  if (resp.status) {
 80026fa:	230c      	movs	r3, #12
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <aci_gap_init_IDB05A1+0xa2>
    return resp.status;
 8002704:	230c      	movs	r3, #12
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	e017      	b.n	800273c <aci_gap_init_IDB05A1+0xd2>
  }
  
  *service_handle = btohs(resp.service_handle);
 800270c:	210c      	movs	r1, #12
 800270e:	187b      	adds	r3, r7, r1
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	0c1b      	lsrs	r3, r3, #16
 8002716:	b29a      	uxth	r2, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800271c:	187b      	adds	r3, r7, r1
 800271e:	78da      	ldrb	r2, [r3, #3]
 8002720:	791b      	ldrb	r3, [r3, #4]
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	4313      	orrs	r3, r2
 8002726:	b29a      	uxth	r2, r3
 8002728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800272a:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800272c:	187b      	adds	r3, r7, r1
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	0c1b      	lsrs	r3, r3, #16
 8002734:	b29a      	uxth	r2, r3
 8002736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002738:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800273a:	2300      	movs	r3, #0
}
 800273c:	0018      	movs	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	b00d      	add	sp, #52	; 0x34
 8002742:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002744 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8002744:	b5b0      	push	{r4, r5, r7, lr}
 8002746:	b090      	sub	sp, #64	; 0x40
 8002748:	af00      	add	r7, sp, #0
 800274a:	0004      	movs	r4, r0
 800274c:	0008      	movs	r0, r1
 800274e:	603a      	str	r2, [r7, #0]
 8002750:	0019      	movs	r1, r3
 8002752:	1dfb      	adds	r3, r7, #7
 8002754:	1c22      	adds	r2, r4, #0
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	1dbb      	adds	r3, r7, #6
 800275a:	1c02      	adds	r2, r0, #0
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	1d7b      	adds	r3, r7, #5
 8002760:	1c0a      	adds	r2, r1, #0
 8002762:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8002764:	240c      	movs	r4, #12
 8002766:	193b      	adds	r3, r7, r4
 8002768:	1dfa      	adds	r2, r7, #7
 800276a:	7812      	ldrb	r2, [r2, #0]
 800276c:	701a      	strb	r2, [r3, #0]
  cp.oob_enable = oob_enable;
 800276e:	193b      	adds	r3, r7, r4
 8002770:	1dba      	adds	r2, r7, #6
 8002772:	7812      	ldrb	r2, [r2, #0]
 8002774:	705a      	strb	r2, [r3, #1]
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8002776:	193b      	adds	r3, r7, r4
 8002778:	2202      	movs	r2, #2
 800277a:	6839      	ldr	r1, [r7, #0]
 800277c:	189b      	adds	r3, r3, r2
 800277e:	2210      	movs	r2, #16
 8002780:	0018      	movs	r0, r3
 8002782:	f000 fd73 	bl	800326c <memcpy>
  cp.min_encryption_key_size = min_encryption_key_size;
 8002786:	193b      	adds	r3, r7, r4
 8002788:	1d7a      	adds	r2, r7, #5
 800278a:	7812      	ldrb	r2, [r2, #0]
 800278c:	749a      	strb	r2, [r3, #18]
  cp.max_encryption_key_size = max_encryption_key_size;
 800278e:	193b      	adds	r3, r7, r4
 8002790:	2250      	movs	r2, #80	; 0x50
 8002792:	18ba      	adds	r2, r7, r2
 8002794:	7812      	ldrb	r2, [r2, #0]
 8002796:	74da      	strb	r2, [r3, #19]
  cp.use_fixed_pin = use_fixed_pin;
 8002798:	193b      	adds	r3, r7, r4
 800279a:	2254      	movs	r2, #84	; 0x54
 800279c:	18ba      	adds	r2, r7, r2
 800279e:	7812      	ldrb	r2, [r2, #0]
 80027a0:	751a      	strb	r2, [r3, #20]
  cp.fixed_pin = htobl(fixed_pin);
 80027a2:	193b      	adds	r3, r7, r4
 80027a4:	3315      	adds	r3, #21
 80027a6:	2258      	movs	r2, #88	; 0x58
 80027a8:	18ba      	adds	r2, r7, r2
 80027aa:	7810      	ldrb	r0, [r2, #0]
 80027ac:	781a      	ldrb	r2, [r3, #0]
 80027ae:	2100      	movs	r1, #0
 80027b0:	400a      	ands	r2, r1
 80027b2:	1c11      	adds	r1, r2, #0
 80027b4:	1c02      	adds	r2, r0, #0
 80027b6:	430a      	orrs	r2, r1
 80027b8:	701a      	strb	r2, [r3, #0]
 80027ba:	2259      	movs	r2, #89	; 0x59
 80027bc:	18ba      	adds	r2, r7, r2
 80027be:	7810      	ldrb	r0, [r2, #0]
 80027c0:	785a      	ldrb	r2, [r3, #1]
 80027c2:	2100      	movs	r1, #0
 80027c4:	400a      	ands	r2, r1
 80027c6:	1c11      	adds	r1, r2, #0
 80027c8:	1c02      	adds	r2, r0, #0
 80027ca:	430a      	orrs	r2, r1
 80027cc:	705a      	strb	r2, [r3, #1]
 80027ce:	225a      	movs	r2, #90	; 0x5a
 80027d0:	18ba      	adds	r2, r7, r2
 80027d2:	7810      	ldrb	r0, [r2, #0]
 80027d4:	789a      	ldrb	r2, [r3, #2]
 80027d6:	2100      	movs	r1, #0
 80027d8:	400a      	ands	r2, r1
 80027da:	1c11      	adds	r1, r2, #0
 80027dc:	1c02      	adds	r2, r0, #0
 80027de:	430a      	orrs	r2, r1
 80027e0:	709a      	strb	r2, [r3, #2]
 80027e2:	225b      	movs	r2, #91	; 0x5b
 80027e4:	18ba      	adds	r2, r7, r2
 80027e6:	7810      	ldrb	r0, [r2, #0]
 80027e8:	78da      	ldrb	r2, [r3, #3]
 80027ea:	2100      	movs	r1, #0
 80027ec:	400a      	ands	r2, r1
 80027ee:	1c11      	adds	r1, r2, #0
 80027f0:	1c02      	adds	r2, r0, #0
 80027f2:	430a      	orrs	r2, r1
 80027f4:	70da      	strb	r2, [r3, #3]
  cp.bonding_mode = bonding_mode;
 80027f6:	193b      	adds	r3, r7, r4
 80027f8:	225c      	movs	r2, #92	; 0x5c
 80027fa:	18ba      	adds	r2, r7, r2
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	765a      	strb	r2, [r3, #25]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002800:	2128      	movs	r1, #40	; 0x28
 8002802:	000d      	movs	r5, r1
 8002804:	187b      	adds	r3, r7, r1
 8002806:	2218      	movs	r2, #24
 8002808:	2100      	movs	r1, #0
 800280a:	0018      	movs	r0, r3
 800280c:	f000 fd37 	bl	800327e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8002810:	0029      	movs	r1, r5
 8002812:	187b      	adds	r3, r7, r1
 8002814:	223f      	movs	r2, #63	; 0x3f
 8002816:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8002818:	187b      	adds	r3, r7, r1
 800281a:	2286      	movs	r2, #134	; 0x86
 800281c:	805a      	strh	r2, [r3, #2]
  rq.cparam = &cp;
 800281e:	187b      	adds	r3, r7, r1
 8002820:	193a      	adds	r2, r7, r4
 8002822:	609a      	str	r2, [r3, #8]
  rq.clen = sizeof(cp);
 8002824:	187b      	adds	r3, r7, r1
 8002826:	221a      	movs	r2, #26
 8002828:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 800282a:	187b      	adds	r3, r7, r1
 800282c:	220b      	movs	r2, #11
 800282e:	18ba      	adds	r2, r7, r2
 8002830:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8002832:	187b      	adds	r3, r7, r1
 8002834:	2201      	movs	r2, #1
 8002836:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8002838:	187b      	adds	r3, r7, r1
 800283a:	2100      	movs	r1, #0
 800283c:	0018      	movs	r0, r3
 800283e:	f000 fa39 	bl	8002cb4 <hci_send_req>
 8002842:	1e03      	subs	r3, r0, #0
 8002844:	da01      	bge.n	800284a <aci_gap_set_auth_requirement+0x106>
    return BLE_STATUS_TIMEOUT;
 8002846:	23ff      	movs	r3, #255	; 0xff
 8002848:	e009      	b.n	800285e <aci_gap_set_auth_requirement+0x11a>

  if (status) {
 800284a:	230b      	movs	r3, #11
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <aci_gap_set_auth_requirement+0x118>
    return status;
 8002854:	230b      	movs	r3, #11
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	e000      	b.n	800285e <aci_gap_set_auth_requirement+0x11a>
  }
    
  return 0;
 800285c:	2300      	movs	r3, #0
}
 800285e:	0018      	movs	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	b010      	add	sp, #64	; 0x40
 8002864:	bdb0      	pop	{r4, r5, r7, pc}

08002866 <aci_gap_start_general_discovery_proc>:
  return status;
}

tBleStatus aci_gap_start_general_discovery_proc(uint16_t scanInterval, uint16_t scanWindow,
						uint8_t own_address_type, uint8_t filterDuplicates)
{
 8002866:	b5b0      	push	{r4, r5, r7, lr}
 8002868:	b08c      	sub	sp, #48	; 0x30
 800286a:	af00      	add	r7, sp, #0
 800286c:	0005      	movs	r5, r0
 800286e:	000c      	movs	r4, r1
 8002870:	0010      	movs	r0, r2
 8002872:	0019      	movs	r1, r3
 8002874:	1dbb      	adds	r3, r7, #6
 8002876:	1c2a      	adds	r2, r5, #0
 8002878:	801a      	strh	r2, [r3, #0]
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	1c22      	adds	r2, r4, #0
 800287e:	801a      	strh	r2, [r3, #0]
 8002880:	1cfb      	adds	r3, r7, #3
 8002882:	1c02      	adds	r2, r0, #0
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	1cbb      	adds	r3, r7, #2
 8002888:	1c0a      	adds	r2, r1, #0
 800288a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  gap_start_general_discovery_proc_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 800288c:	2510      	movs	r5, #16
 800288e:	197b      	adds	r3, r7, r5
 8002890:	1dba      	adds	r2, r7, #6
 8002892:	8812      	ldrh	r2, [r2, #0]
 8002894:	801a      	strh	r2, [r3, #0]
  cp.scanWindow = htobs(scanWindow);
 8002896:	197b      	adds	r3, r7, r5
 8002898:	1d3a      	adds	r2, r7, #4
 800289a:	8812      	ldrh	r2, [r2, #0]
 800289c:	805a      	strh	r2, [r3, #2]
  cp.own_address_type = own_address_type;
 800289e:	197b      	adds	r3, r7, r5
 80028a0:	1cfa      	adds	r2, r7, #3
 80028a2:	7812      	ldrb	r2, [r2, #0]
 80028a4:	711a      	strb	r2, [r3, #4]
  cp.filterDuplicates = filterDuplicates;
 80028a6:	197b      	adds	r3, r7, r5
 80028a8:	1cba      	adds	r2, r7, #2
 80028aa:	7812      	ldrb	r2, [r2, #0]
 80028ac:	715a      	strb	r2, [r3, #5]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80028ae:	2118      	movs	r1, #24
 80028b0:	000c      	movs	r4, r1
 80028b2:	187b      	adds	r3, r7, r1
 80028b4:	2218      	movs	r2, #24
 80028b6:	2100      	movs	r1, #0
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 fce0 	bl	800327e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80028be:	0021      	movs	r1, r4
 80028c0:	187b      	adds	r3, r7, r1
 80028c2:	223f      	movs	r2, #63	; 0x3f
 80028c4:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GAP_START_GENERAL_DISCOVERY_PROC;
 80028c6:	187b      	adds	r3, r7, r1
 80028c8:	2297      	movs	r2, #151	; 0x97
 80028ca:	805a      	strh	r2, [r3, #2]
  rq.cparam = &cp;
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	197a      	adds	r2, r7, r5
 80028d0:	609a      	str	r2, [r3, #8]
  rq.clen = sizeof(cp);
 80028d2:	187b      	adds	r3, r7, r1
 80028d4:	2206      	movs	r2, #6
 80028d6:	60da      	str	r2, [r3, #12]
  rq.event = EVT_CMD_STATUS;
 80028d8:	187b      	adds	r3, r7, r1
 80028da:	220f      	movs	r2, #15
 80028dc:	605a      	str	r2, [r3, #4]
  rq.rparam = &status;
 80028de:	187b      	adds	r3, r7, r1
 80028e0:	220f      	movs	r2, #15
 80028e2:	18ba      	adds	r2, r7, r2
 80028e4:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 80028e6:	187b      	adds	r3, r7, r1
 80028e8:	2201      	movs	r2, #1
 80028ea:	615a      	str	r2, [r3, #20]
  
  if (hci_send_req(&rq, FALSE) < 0)
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	2100      	movs	r1, #0
 80028f0:	0018      	movs	r0, r3
 80028f2:	f000 f9df 	bl	8002cb4 <hci_send_req>
 80028f6:	1e03      	subs	r3, r0, #0
 80028f8:	da01      	bge.n	80028fe <aci_gap_start_general_discovery_proc+0x98>
    return BLE_STATUS_TIMEOUT;
 80028fa:	23ff      	movs	r3, #255	; 0xff
 80028fc:	e002      	b.n	8002904 <aci_gap_start_general_discovery_proc+0x9e>

  return status;
 80028fe:	230f      	movs	r3, #15
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	781b      	ldrb	r3, [r3, #0]
}
 8002904:	0018      	movs	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	b00c      	add	sp, #48	; 0x30
 800290a:	bdb0      	pop	{r4, r5, r7, pc}

0800290c <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002912:	2108      	movs	r1, #8
 8002914:	000c      	movs	r4, r1
 8002916:	187b      	adds	r3, r7, r1
 8002918:	2218      	movs	r2, #24
 800291a:	2100      	movs	r1, #0
 800291c:	0018      	movs	r0, r3
 800291e:	f000 fcae 	bl	800327e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8002922:	0021      	movs	r1, r4
 8002924:	187b      	adds	r3, r7, r1
 8002926:	223f      	movs	r2, #63	; 0x3f
 8002928:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_GATT_INIT;
 800292a:	187b      	adds	r3, r7, r1
 800292c:	2202      	movs	r2, #2
 800292e:	32ff      	adds	r2, #255	; 0xff
 8002930:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 8002932:	187b      	adds	r3, r7, r1
 8002934:	1dfa      	adds	r2, r7, #7
 8002936:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8002938:	187b      	adds	r3, r7, r1
 800293a:	2201      	movs	r2, #1
 800293c:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 800293e:	187b      	adds	r3, r7, r1
 8002940:	2100      	movs	r1, #0
 8002942:	0018      	movs	r0, r3
 8002944:	f000 f9b6 	bl	8002cb4 <hci_send_req>
 8002948:	1e03      	subs	r3, r0, #0
 800294a:	da01      	bge.n	8002950 <aci_gatt_init+0x44>
    return BLE_STATUS_TIMEOUT;
 800294c:	23ff      	movs	r3, #255	; 0xff
 800294e:	e001      	b.n	8002954 <aci_gatt_init+0x48>

  return status;
 8002950:	1dfb      	adds	r3, r7, #7
 8002952:	781b      	ldrb	r3, [r3, #0]
}
 8002954:	0018      	movs	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	b009      	add	sp, #36	; 0x24
 800295a:	bd90      	pop	{r4, r7, pc}

0800295c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800295c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295e:	b0ab      	sub	sp, #172	; 0xac
 8002960:	af00      	add	r7, sp, #0
 8002962:	603a      	str	r2, [r7, #0]
 8002964:	1dfb      	adds	r3, r7, #7
 8002966:	1c02      	adds	r2, r0, #0
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	1dbb      	adds	r3, r7, #6
 800296c:	1c0a      	adds	r2, r1, #0
 800296e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8002970:	23a7      	movs	r3, #167	; 0xa7
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8002978:	1dbb      	adds	r3, r7, #6
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	3302      	adds	r3, #2
 800297e:	2b80      	cmp	r3, #128	; 0x80
 8002980:	dd01      	ble.n	8002986 <aci_hal_write_config_data+0x2a>
    return BLE_STATUS_INVALID_PARAMS;
 8002982:	2342      	movs	r3, #66	; 0x42
 8002984:	e051      	b.n	8002a2a <aci_hal_write_config_data+0xce>

  buffer[indx] = offset;
 8002986:	24a7      	movs	r4, #167	; 0xa7
 8002988:	193b      	adds	r3, r7, r4
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2608      	movs	r6, #8
 800298e:	19ba      	adds	r2, r7, r6
 8002990:	1df9      	adds	r1, r7, #7
 8002992:	7809      	ldrb	r1, [r1, #0]
 8002994:	54d1      	strb	r1, [r2, r3]
  indx++;
 8002996:	193b      	adds	r3, r7, r4
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	193b      	adds	r3, r7, r4
 800299c:	3201      	adds	r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
    
  buffer[indx] = len;
 80029a0:	193b      	adds	r3, r7, r4
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	19ba      	adds	r2, r7, r6
 80029a6:	1db9      	adds	r1, r7, #6
 80029a8:	7809      	ldrb	r1, [r1, #0]
 80029aa:	54d1      	strb	r1, [r2, r3]
  indx++;
 80029ac:	193b      	adds	r3, r7, r4
 80029ae:	781a      	ldrb	r2, [r3, #0]
 80029b0:	193b      	adds	r3, r7, r4
 80029b2:	3201      	adds	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
        
  BLUENRG_memcpy(buffer + indx, val, len);
 80029b6:	193b      	adds	r3, r7, r4
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	19ba      	adds	r2, r7, r6
 80029bc:	18d0      	adds	r0, r2, r3
 80029be:	1dbb      	adds	r3, r7, #6
 80029c0:	781a      	ldrb	r2, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	0019      	movs	r1, r3
 80029c6:	f000 fc51 	bl	800326c <memcpy>
  indx +=  len;
 80029ca:	193b      	adds	r3, r7, r4
 80029cc:	1939      	adds	r1, r7, r4
 80029ce:	1dba      	adds	r2, r7, #6
 80029d0:	7809      	ldrb	r1, [r1, #0]
 80029d2:	7812      	ldrb	r2, [r2, #0]
 80029d4:	188a      	adds	r2, r1, r2
 80029d6:	701a      	strb	r2, [r3, #0]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80029d8:	218c      	movs	r1, #140	; 0x8c
 80029da:	000d      	movs	r5, r1
 80029dc:	187b      	adds	r3, r7, r1
 80029de:	2218      	movs	r2, #24
 80029e0:	2100      	movs	r1, #0
 80029e2:	0018      	movs	r0, r3
 80029e4:	f000 fc4b 	bl	800327e <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80029e8:	0029      	movs	r1, r5
 80029ea:	187b      	adds	r3, r7, r1
 80029ec:	223f      	movs	r2, #63	; 0x3f
 80029ee:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 80029f0:	187b      	adds	r3, r7, r1
 80029f2:	220c      	movs	r2, #12
 80029f4:	805a      	strh	r2, [r3, #2]
  rq.cparam = (void *)buffer;
 80029f6:	187b      	adds	r3, r7, r1
 80029f8:	19ba      	adds	r2, r7, r6
 80029fa:	609a      	str	r2, [r3, #8]
  rq.clen = indx;
 80029fc:	193b      	adds	r3, r7, r4
 80029fe:	781a      	ldrb	r2, [r3, #0]
 8002a00:	187b      	adds	r3, r7, r1
 8002a02:	60da      	str	r2, [r3, #12]
  rq.rparam = &status;
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	228b      	movs	r2, #139	; 0x8b
 8002a08:	18ba      	adds	r2, r7, r2
 8002a0a:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8002a0c:	187b      	adds	r3, r7, r1
 8002a0e:	2201      	movs	r2, #1
 8002a10:	615a      	str	r2, [r3, #20]

  if (hci_send_req(&rq, FALSE) < 0)
 8002a12:	187b      	adds	r3, r7, r1
 8002a14:	2100      	movs	r1, #0
 8002a16:	0018      	movs	r0, r3
 8002a18:	f000 f94c 	bl	8002cb4 <hci_send_req>
 8002a1c:	1e03      	subs	r3, r0, #0
 8002a1e:	da01      	bge.n	8002a24 <aci_hal_write_config_data+0xc8>
    return BLE_STATUS_TIMEOUT;
 8002a20:	23ff      	movs	r3, #255	; 0xff
 8002a22:	e002      	b.n	8002a2a <aci_hal_write_config_data+0xce>

  return status;
 8002a24:	238b      	movs	r3, #139	; 0x8b
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	781b      	ldrb	r3, [r3, #0]
}
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b02b      	add	sp, #172	; 0xac
 8002a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a32 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8002a32:	b590      	push	{r4, r7, lr}
 8002a34:	b089      	sub	sp, #36	; 0x24
 8002a36:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002a38:	2108      	movs	r1, #8
 8002a3a:	000c      	movs	r4, r1
 8002a3c:	187b      	adds	r3, r7, r1
 8002a3e:	2218      	movs	r2, #24
 8002a40:	2100      	movs	r1, #0
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 fc1b 	bl	800327e <memset>
  rq.ogf = OGF_HOST_CTL;
 8002a48:	0021      	movs	r1, r4
 8002a4a:	187b      	adds	r3, r7, r1
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	801a      	strh	r2, [r3, #0]
  rq.ocf = OCF_RESET;
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	2203      	movs	r2, #3
 8002a54:	805a      	strh	r2, [r3, #2]
  rq.rparam = &status;
 8002a56:	187b      	adds	r3, r7, r1
 8002a58:	1dfa      	adds	r2, r7, #7
 8002a5a:	611a      	str	r2, [r3, #16]
  rq.rlen = 1;
 8002a5c:	187b      	adds	r3, r7, r1
 8002a5e:	2201      	movs	r2, #1
 8002a60:	615a      	str	r2, [r3, #20]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8002a62:	187b      	adds	r3, r7, r1
 8002a64:	2100      	movs	r1, #0
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 f924 	bl	8002cb4 <hci_send_req>
 8002a6c:	1e03      	subs	r3, r0, #0
 8002a6e:	da01      	bge.n	8002a74 <hci_reset+0x42>
    return BLE_STATUS_TIMEOUT;
 8002a70:	23ff      	movs	r3, #255	; 0xff
 8002a72:	e001      	b.n	8002a78 <hci_reset+0x46>
  
  return status;  
 8002a74:	1dfb      	adds	r3, r7, #7
 8002a76:	781b      	ldrb	r3, [r3, #0]
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b009      	add	sp, #36	; 0x24
 8002a7e:	bd90      	pop	{r4, r7, pc}

08002a80 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3308      	adds	r3, #8
 8002a8c:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d001      	beq.n	8002a9a <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8002a96:	2301      	movs	r3, #1
 8002a98:	e00c      	b.n	8002ab4 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	0019      	movs	r1, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2288      	movs	r2, #136	; 0x88
 8002aa6:	5c9b      	ldrb	r3, [r3, r2]
 8002aa8:	3b03      	subs	r3, #3
 8002aaa:	4299      	cmp	r1, r3
 8002aac:	d001      	beq.n	8002ab2 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e000      	b.n	8002ab4 <verify_packet+0x34>
  
  return 0;      
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b004      	add	sp, #16
 8002aba:	bd80      	pop	{r7, pc}

08002abc <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8002abc:	b5b0      	push	{r4, r5, r7, lr}
 8002abe:	b0a6      	sub	sp, #152	; 0x98
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	0004      	movs	r4, r0
 8002ac4:	0008      	movs	r0, r1
 8002ac6:	0011      	movs	r1, r2
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	250e      	movs	r5, #14
 8002acc:	197b      	adds	r3, r7, r5
 8002ace:	1c22      	adds	r2, r4, #0
 8002ad0:	801a      	strh	r2, [r3, #0]
 8002ad2:	240c      	movs	r4, #12
 8002ad4:	193b      	adds	r3, r7, r4
 8002ad6:	1c02      	adds	r2, r0, #0
 8002ad8:	801a      	strh	r2, [r3, #0]
 8002ada:	200b      	movs	r0, #11
 8002adc:	183b      	adds	r3, r7, r0
 8002ade:	1c0a      	adds	r2, r1, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8002ae2:	193b      	adds	r3, r7, r4
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ae8:	059b      	lsls	r3, r3, #22
 8002aea:	0d9b      	lsrs	r3, r3, #22
 8002aec:	b21a      	sxth	r2, r3
 8002aee:	197b      	adds	r3, r7, r5
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	029b      	lsls	r3, r3, #10
 8002af4:	b21b      	sxth	r3, r3
 8002af6:	4313      	orrs	r3, r2
 8002af8:	b21b      	sxth	r3, r3
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	2114      	movs	r1, #20
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	801a      	strh	r2, [r3, #0]
  hc.plen = plen;
 8002b02:	187b      	adds	r3, r7, r1
 8002b04:	0004      	movs	r4, r0
 8002b06:	183a      	adds	r2, r7, r0
 8002b08:	7812      	ldrb	r2, [r2, #0]
 8002b0a:	709a      	strb	r2, [r3, #2]

  payload[0] = HCI_COMMAND_PKT;
 8002b0c:	2518      	movs	r5, #24
 8002b0e:	197b      	adds	r3, r7, r5
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8002b14:	197b      	adds	r3, r7, r5
 8002b16:	3301      	adds	r3, #1
 8002b18:	187a      	adds	r2, r7, r1
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	0011      	movs	r1, r2
 8002b1e:	2303      	movs	r3, #3
 8002b20:	001a      	movs	r2, r3
 8002b22:	f000 fba3 	bl	800326c <memcpy>
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8002b26:	197b      	adds	r3, r7, r5
 8002b28:	3304      	adds	r3, #4
 8002b2a:	0020      	movs	r0, r4
 8002b2c:	183a      	adds	r2, r7, r0
 8002b2e:	7812      	ldrb	r2, [r2, #0]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	0018      	movs	r0, r3
 8002b34:	f000 fb9a 	bl	800326c <memcpy>
  
  if (hciContext.io.Send)
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <send_cmd+0xa4>)
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00b      	beq.n	8002b58 <send_cmd+0x9c>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8002b40:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <send_cmd+0xa4>)
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	220b      	movs	r2, #11
 8002b46:	18ba      	adds	r2, r7, r2
 8002b48:	7812      	ldrb	r2, [r2, #0]
 8002b4a:	b292      	uxth	r2, r2
 8002b4c:	3204      	adds	r2, #4
 8002b4e:	b291      	uxth	r1, r2
 8002b50:	2218      	movs	r2, #24
 8002b52:	18ba      	adds	r2, r7, r2
 8002b54:	0010      	movs	r0, r2
 8002b56:	4798      	blx	r3
  }
}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b026      	add	sp, #152	; 0x98
 8002b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b60:	20000450 	.word	0x20000450

08002b64 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8002b6e:	e00c      	b.n	8002b8a <move_list+0x26>
  {
    list_remove_tail(src_list, &tmp_node);
 8002b70:	230c      	movs	r3, #12
 8002b72:	18fa      	adds	r2, r7, r3
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	0011      	movs	r1, r2
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f000 fb03 	bl	8003184 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	0011      	movs	r1, r2
 8002b84:	0018      	movs	r0, r3
 8002b86:	f000 fa77 	bl	8003078 <list_insert_head>
  while (!list_is_empty(src_list))
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f000 fa4f 	bl	8003030 <list_is_empty>
 8002b92:	1e03      	subs	r3, r0, #0
 8002b94:	d0ec      	beq.n	8002b70 <move_list+0xc>
  }
}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b004      	add	sp, #16
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8002ba6:	e00b      	b.n	8002bc0 <free_event_list+0x20>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8002ba8:	1d3a      	adds	r2, r7, #4
 8002baa:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <free_event_list+0x38>)
 8002bac:	0011      	movs	r1, r2
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f000 fac3 	bl	800313a <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <free_event_list+0x3c>)
 8002bb8:	0011      	movs	r1, r2
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f000 fa7e 	bl	80030bc <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <free_event_list+0x3c>)
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 fb03 	bl	80031ce <list_get_size>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	ddec      	ble.n	8002ba8 <free_event_list+0x8>
  }
}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b002      	add	sp, #8
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	20000524 	.word	0x20000524
 8002bdc:	2000051c 	.word	0x2000051c

08002be0 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8002bf0:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <hci_init+0x88>)
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	61da      	str	r2, [r3, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8002bf6:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <hci_init+0x8c>)
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f000 fa0b 	bl	8003014 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <hci_init+0x90>)
 8002c00:	0018      	movs	r0, r3
 8002c02:	f000 fa07 	bl	8003014 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8002c06:	f7fd fc8d 	bl	8000524 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8002c0a:	230f      	movs	r3, #15
 8002c0c:	18fb      	adds	r3, r7, r3
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
 8002c12:	e010      	b.n	8002c36 <hci_init+0x56>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8002c14:	240f      	movs	r4, #15
 8002c16:	193b      	adds	r3, r7, r4
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	228c      	movs	r2, #140	; 0x8c
 8002c1c:	435a      	muls	r2, r3
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <hci_init+0x94>)
 8002c20:	18d2      	adds	r2, r2, r3
 8002c22:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <hci_init+0x8c>)
 8002c24:	0011      	movs	r1, r2
 8002c26:	0018      	movs	r0, r3
 8002c28:	f000 fa48 	bl	80030bc <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8002c2c:	193b      	adds	r3, r7, r4
 8002c2e:	781a      	ldrb	r2, [r3, #0]
 8002c30:	193b      	adds	r3, r7, r4
 8002c32:	3201      	adds	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	230f      	movs	r3, #15
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d9e9      	bls.n	8002c14 <hci_init+0x34>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <hci_init+0x88>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <hci_init+0x70>
 8002c48:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <hci_init+0x88>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <hci_init+0x88>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <hci_init+0x7e>
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <hci_init+0x88>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4798      	blx	r3
}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	46bd      	mov	sp, r7
 8002c62:	b005      	add	sp, #20
 8002c64:	bd90      	pop	{r4, r7, pc}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	20000450 	.word	0x20000450
 8002c6c:	2000051c 	.word	0x2000051c
 8002c70:	20000524 	.word	0x20000524
 8002c74:	20000194 	.word	0x20000194

08002c78 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <hci_register_io_bus+0x38>)
 8002c86:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <hci_register_io_bus+0x38>)
 8002c8e:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <hci_register_io_bus+0x38>)
 8002c96:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699a      	ldr	r2, [r3, #24]
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <hci_register_io_bus+0x38>)
 8002c9e:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	4b02      	ldr	r3, [pc, #8]	; (8002cb0 <hci_register_io_bus+0x38>)
 8002ca6:	609a      	str	r2, [r3, #8]
}
 8002ca8:	46c0      	nop			; (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b002      	add	sp, #8
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000450 	.word	0x20000450

08002cb4 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08e      	sub	sp, #56	; 0x38
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	000a      	movs	r2, r1
 8002cbe:	1cfb      	adds	r3, r7, #3
 8002cc0:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	885b      	ldrh	r3, [r3, #2]
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	059b      	lsls	r3, r3, #22
 8002cca:	0d9b      	lsrs	r3, r3, #22
 8002ccc:	b21a      	sxth	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	029b      	lsls	r3, r3, #10
 8002cd4:	b21b      	sxth	r3, r3
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	b21a      	sxth	r2, r3
 8002cda:	2336      	movs	r3, #54	; 0x36
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	801a      	strh	r2, [r3, #0]
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8002ce4:	2308      	movs	r3, #8
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 f993 	bl	8003014 <list_init_head>

  free_event_list();
 8002cee:	f7ff ff57 	bl	8002ba0 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	8818      	ldrh	r0, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	8859      	ldrh	r1, [r3, #2]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f7ff feda 	bl	8002abc <send_cmd>
  
  if (async)
 8002d08:	1cfb      	adds	r3, r7, #3
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <hci_send_req+0x60>
  {
    return 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e0f4      	b.n	8002efe <hci_send_req+0x24a>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8002d14:	f7fe f8c4 	bl	8000ea0 <HAL_GetTick>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8002d1c:	f7fe f8c0 	bl	8000ea0 <HAL_GetTick>
 8002d20:	0002      	movs	r2, r0
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	1ad2      	subs	r2, r2, r3
 8002d26:	23fa      	movs	r3, #250	; 0xfa
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d900      	bls.n	8002d30 <hci_send_req+0x7c>
 8002d2e:	e0be      	b.n	8002eae <hci_send_req+0x1fa>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8002d30:	4b75      	ldr	r3, [pc, #468]	; (8002f08 <hci_send_req+0x254>)
 8002d32:	0018      	movs	r0, r3
 8002d34:	f000 f97c 	bl	8003030 <list_is_empty>
 8002d38:	1e03      	subs	r3, r0, #0
 8002d3a:	d000      	beq.n	8002d3e <hci_send_req+0x8a>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8002d3c:	e7ee      	b.n	8002d1c <hci_send_req+0x68>
      {
        break;
 8002d3e:	46c0      	nop			; (mov r8, r8)
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8002d40:	2310      	movs	r3, #16
 8002d42:	18fa      	adds	r2, r7, r3
 8002d44:	4b70      	ldr	r3, [pc, #448]	; (8002f08 <hci_send_req+0x254>)
 8002d46:	0011      	movs	r1, r2
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 f9f6 	bl	800313a <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	3308      	adds	r3, #8
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d000      	beq.n	8002d5e <hci_send_req+0xaa>
 8002d5c:	e083      	b.n	8002e66 <hci_send_req+0x1b2>
    {
      event_pckt = (void *)(hci_hdr->data);
 8002d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d60:	3301      	adds	r3, #1
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	3308      	adds	r3, #8
 8002d68:	3303      	adds	r3, #3
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2288      	movs	r2, #136	; 0x88
 8002d70:	5c9b      	ldrb	r3, [r3, r2]
 8002d72:	3b03      	subs	r3, #3
 8002d74:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8002d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b0f      	cmp	r3, #15
 8002d7c:	d009      	beq.n	8002d92 <hci_send_req+0xde>
 8002d7e:	dc02      	bgt.n	8002d86 <hci_send_req+0xd2>
 8002d80:	2b0e      	cmp	r3, #14
 8002d82:	d02e      	beq.n	8002de2 <hci_send_req+0x12e>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8002d84:	e074      	b.n	8002e70 <hci_send_req+0x1bc>
      switch (event_pckt->evt) 
 8002d86:	2b10      	cmp	r3, #16
 8002d88:	d100      	bne.n	8002d8c <hci_send_req+0xd8>
 8002d8a:	e092      	b.n	8002eb2 <hci_send_req+0x1fe>
 8002d8c:	2b3e      	cmp	r3, #62	; 0x3e
 8002d8e:	d04c      	beq.n	8002e2a <hci_send_req+0x176>
        break;
 8002d90:	e06e      	b.n	8002e70 <hci_send_req+0x1bc>
        cs = (void *) ptr;
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	61bb      	str	r3, [r7, #24]
        if (cs->opcode != opcode)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	789a      	ldrb	r2, [r3, #2]
 8002d9a:	78db      	ldrb	r3, [r3, #3]
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2236      	movs	r2, #54	; 0x36
 8002da4:	18ba      	adds	r2, r7, r2
 8002da6:	8812      	ldrh	r2, [r2, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d000      	beq.n	8002dae <hci_send_req+0xfa>
 8002dac:	e083      	b.n	8002eb6 <hci_send_req+0x202>
        if (r->event != EVT_CMD_STATUS) {
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b0f      	cmp	r3, #15
 8002db4:	d004      	beq.n	8002dc0 <hci_send_req+0x10c>
          if (cs->status) {
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d055      	beq.n	8002e6a <hci_send_req+0x1b6>
            goto failed;
 8002dbe:	e07d      	b.n	8002ebc <hci_send_req+0x208>
        r->rlen = MIN(len, r->rlen);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d900      	bls.n	8002dcc <hci_send_req+0x118>
 8002dca:	0013      	movs	r3, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6918      	ldr	r0, [r3, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	0019      	movs	r1, r3
 8002ddc:	f000 fa46 	bl	800326c <memcpy>
        goto done;
 8002de0:	e07f      	b.n	8002ee2 <hci_send_req+0x22e>
        cc = (void *) ptr;
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	617b      	str	r3, [r7, #20]
        if (cc->opcode != opcode)
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	785a      	ldrb	r2, [r3, #1]
 8002dea:	789b      	ldrb	r3, [r3, #2]
 8002dec:	021b      	lsls	r3, r3, #8
 8002dee:	4313      	orrs	r3, r2
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2236      	movs	r2, #54	; 0x36
 8002df4:	18ba      	adds	r2, r7, r2
 8002df6:	8812      	ldrh	r2, [r2, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d15e      	bne.n	8002eba <hci_send_req+0x206>
        ptr += EVT_CMD_COMPLETE_SIZE;
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	3303      	adds	r3, #3
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	3b03      	subs	r3, #3
 8002e06:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d900      	bls.n	8002e14 <hci_send_req+0x160>
 8002e12:	0013      	movs	r3, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6918      	ldr	r0, [r3, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	0019      	movs	r1, r3
 8002e24:	f000 fa22 	bl	800326c <memcpy>
        goto done;
 8002e28:	e05b      	b.n	8002ee2 <hci_send_req+0x22e>
        me = (void *) ptr;
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	61fb      	str	r3, [r7, #28]
        if (me->subevent != r->event)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	001a      	movs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d118      	bne.n	8002e6e <hci_send_req+0x1ba>
        len -= 1;
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d900      	bls.n	8002e4e <hci_send_req+0x19a>
 8002e4c:	0013      	movs	r3, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6153      	str	r3, [r2, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6918      	ldr	r0, [r3, #16]
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	1c59      	adds	r1, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	001a      	movs	r2, r3
 8002e60:	f000 fa04 	bl	800326c <memcpy>
        goto done;
 8002e64:	e03d      	b.n	8002ee2 <hci_send_req+0x22e>
      }
    }
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	e002      	b.n	8002e70 <hci_send_req+0x1bc>
          break;
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	e000      	b.n	8002e70 <hci_send_req+0x1bc>
          break;
 8002e6e:	46c0      	nop			; (mov r8, r8)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8002e70:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <hci_send_req+0x258>)
 8002e72:	0018      	movs	r0, r3
 8002e74:	f000 f8dc 	bl	8003030 <list_is_empty>
 8002e78:	1e03      	subs	r3, r0, #0
 8002e7a:	d00e      	beq.n	8002e9a <hci_send_req+0x1e6>
 8002e7c:	4b22      	ldr	r3, [pc, #136]	; (8002f08 <hci_send_req+0x254>)
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f000 f8d6 	bl	8003030 <list_is_empty>
 8002e84:	1e03      	subs	r3, r0, #0
 8002e86:	d008      	beq.n	8002e9a <hci_send_req+0x1e6>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <hci_send_req+0x258>)
 8002e8c:	0011      	movs	r1, r2
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f000 f914 	bl	80030bc <list_insert_tail>
      hciReadPacket=NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	e008      	b.n	8002eac <hci_send_req+0x1f8>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	2308      	movs	r3, #8
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	0011      	movs	r1, r2
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f000 f90a 	bl	80030bc <list_insert_tail>
      hciReadPacket=NULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	613b      	str	r3, [r7, #16]
  {
 8002eac:	e732      	b.n	8002d14 <hci_send_req+0x60>
        goto failed;
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	e004      	b.n	8002ebc <hci_send_req+0x208>
        goto failed;
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	e002      	b.n	8002ebc <hci_send_req+0x208>
          goto failed;
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	e000      	b.n	8002ebc <hci_send_req+0x208>
          goto failed;
 8002eba:	46c0      	nop			; (mov r8, r8)
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <hci_send_req+0x21a>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <hci_send_req+0x258>)
 8002ec6:	0011      	movs	r1, r2
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f000 f8d5 	bl	8003078 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8002ece:	2308      	movs	r3, #8
 8002ed0:	18fa      	adds	r2, r7, r3
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <hci_send_req+0x254>)
 8002ed4:	0011      	movs	r1, r2
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7ff fe44 	bl	8002b64 <move_list>

  return -1;
 8002edc:	2301      	movs	r3, #1
 8002ede:	425b      	negs	r3, r3
 8002ee0:	e00d      	b.n	8002efe <hci_send_req+0x24a>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <hci_send_req+0x258>)
 8002ee6:	0011      	movs	r1, r2
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f000 f8c5 	bl	8003078 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8002eee:	2308      	movs	r3, #8
 8002ef0:	18fa      	adds	r2, r7, r3
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <hci_send_req+0x254>)
 8002ef4:	0011      	movs	r1, r2
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f7ff fe34 	bl	8002b64 <move_list>

  return 0;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	0018      	movs	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b00e      	add	sp, #56	; 0x38
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	20000524 	.word	0x20000524
 8002f0c:	2000051c 	.word	0x2000051c

08002f10 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8002f1a:	e015      	b.n	8002f48 <hci_user_evt_proc+0x38>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8002f1c:	1d3a      	adds	r2, r7, #4
 8002f1e:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <hci_user_evt_proc+0x4c>)
 8002f20:	0011      	movs	r1, r2
 8002f22:	0018      	movs	r0, r3
 8002f24:	f000 f909 	bl	800313a <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8002f28:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <hci_user_evt_proc+0x50>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <hci_user_evt_proc+0x2c>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <hci_user_evt_proc+0x50>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	3208      	adds	r2, #8
 8002f38:	0010      	movs	r0, r2
 8002f3a:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <hci_user_evt_proc+0x54>)
 8002f40:	0011      	movs	r1, r2
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 f8ba 	bl	80030bc <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8002f48:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <hci_user_evt_proc+0x4c>)
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f000 f870 	bl	8003030 <list_is_empty>
 8002f50:	1e03      	subs	r3, r0, #0
 8002f52:	d0e3      	beq.n	8002f1c <hci_user_evt_proc+0xc>
  }
}
 8002f54:	46c0      	nop			; (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b002      	add	sp, #8
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000524 	.word	0x20000524
 8002f60:	20000450 	.word	0x20000450
 8002f64:	2000051c 	.word	0x2000051c

08002f68 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8002f78:	4b23      	ldr	r3, [pc, #140]	; (8003008 <hci_notify_asynch_evt+0xa0>)
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f000 f858 	bl	8003030 <list_is_empty>
 8002f80:	1e03      	subs	r3, r0, #0
 8002f82:	d13a      	bne.n	8002ffa <hci_notify_asynch_evt+0x92>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8002f84:	230c      	movs	r3, #12
 8002f86:	18fa      	adds	r2, r7, r3
 8002f88:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <hci_notify_asynch_evt+0xa0>)
 8002f8a:	0011      	movs	r1, r2
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 f8d4 	bl	800313a <list_remove_head>
    
    if (hciContext.io.Receive)
 8002f92:	4b1e      	ldr	r3, [pc, #120]	; (800300c <hci_notify_asynch_evt+0xa4>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d031      	beq.n	8002ffe <hci_notify_asynch_evt+0x96>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8002f9a:	4b1c      	ldr	r3, [pc, #112]	; (800300c <hci_notify_asynch_evt+0xa4>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	3208      	adds	r2, #8
 8002fa2:	2180      	movs	r1, #128	; 0x80
 8002fa4:	0010      	movs	r0, r2
 8002fa6:	4798      	blx	r3
 8002fa8:	0002      	movs	r2, r0
 8002faa:	2113      	movs	r1, #19
 8002fac:	187b      	adds	r3, r7, r1
 8002fae:	701a      	strb	r2, [r3, #0]
      if (data_len > 0)
 8002fb0:	187b      	adds	r3, r7, r1
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d019      	beq.n	8002fec <hci_notify_asynch_evt+0x84>
      {                    
        hciReadPacket->data_len = data_len;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2213      	movs	r2, #19
 8002fbc:	18ba      	adds	r2, r7, r2
 8002fbe:	2188      	movs	r1, #136	; 0x88
 8002fc0:	7812      	ldrb	r2, [r2, #0]
 8002fc2:	545a      	strb	r2, [r3, r1]
        if (verify_packet(hciReadPacket) == 0)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f7ff fd5a 	bl	8002a80 <verify_packet>
 8002fcc:	1e03      	subs	r3, r0, #0
 8002fce:	d106      	bne.n	8002fde <hci_notify_asynch_evt+0x76>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <hci_notify_asynch_evt+0xa8>)
 8002fd4:	0011      	movs	r1, r2
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f000 f870 	bl	80030bc <list_insert_tail>
 8002fdc:	e00f      	b.n	8002ffe <hci_notify_asynch_evt+0x96>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4b09      	ldr	r3, [pc, #36]	; (8003008 <hci_notify_asynch_evt+0xa0>)
 8002fe2:	0011      	movs	r1, r2
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f000 f847 	bl	8003078 <list_insert_head>
 8002fea:	e008      	b.n	8002ffe <hci_notify_asynch_evt+0x96>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <hci_notify_asynch_evt+0xa0>)
 8002ff0:	0011      	movs	r1, r2
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f000 f840 	bl	8003078 <list_insert_head>
 8002ff8:	e001      	b.n	8002ffe <hci_notify_asynch_evt+0x96>
      }
    }
  }
  else 
  {
    ret = 1;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8002ffe:	697b      	ldr	r3, [r7, #20]

}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b006      	add	sp, #24
 8003006:	bd80      	pop	{r7, pc}
 8003008:	2000051c 	.word	0x2000051c
 800300c:	20000450 	.word	0x20000450
 8003010:	20000524 	.word	0x20000524

08003014 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	605a      	str	r2, [r3, #4]
}
 8003028:	46c0      	nop			; (mov r8, r8)
 800302a:	46bd      	mov	sp, r7
 800302c:	b002      	add	sp, #8
 800302e:	bd80      	pop	{r7, pc}

08003030 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003038:	f3ef 8310 	mrs	r3, PRIMASK
 800303c:	60fb      	str	r3, [r7, #12]
  return(result);
 800303e:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003040:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003042:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	429a      	cmp	r2, r3
 800304c:	d104      	bne.n	8003058 <list_is_empty+0x28>
  {
    return_value = 1;
 800304e:	2317      	movs	r3, #23
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	2201      	movs	r2, #1
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	e003      	b.n	8003060 <list_is_empty+0x30>
  }
  else
  {
    return_value = 0;
 8003058:	2317      	movs	r3, #23
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800306a:	2317      	movs	r3, #23
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	781b      	ldrb	r3, [r3, #0]
}
 8003070:	0018      	movs	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	b006      	add	sp, #24
 8003076:	bd80      	pop	{r7, pc}

08003078 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003082:	f3ef 8310 	mrs	r3, PRIMASK
 8003086:	60fb      	str	r3, [r7, #12]
  return(result);
 8003088:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800308a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800308c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80030b4:	46c0      	nop			; (mov r8, r8)
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b006      	add	sp, #24
 80030ba:	bd80      	pop	{r7, pc}

080030bc <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030c6:	f3ef 8310 	mrs	r3, PRIMASK
 80030ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80030cc:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80030ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80030d0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80030f8:	46c0      	nop			; (mov r8, r8)
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b006      	add	sp, #24
 80030fe:	bd80      	pop	{r7, pc}

08003100 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003108:	f3ef 8310 	mrs	r3, PRIMASK
 800310c:	60fb      	str	r3, [r7, #12]
  return(result);
 800310e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003110:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003112:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6852      	ldr	r2, [r2, #4]
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	46bd      	mov	sp, r7
 8003136:	b006      	add	sp, #24
 8003138:	bd80      	pop	{r7, pc}

0800313a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003144:	f3ef 8310 	mrs	r3, PRIMASK
 8003148:	60fb      	str	r3, [r7, #12]
  return(result);
 800314a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800314c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800314e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	0018      	movs	r0, r3
 800315e:	f7ff ffcf 	bl	8003100 <list_remove_node>
  (*node)->next = NULL;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2200      	movs	r2, #0
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b006      	add	sp, #24
 8003182:	bd80      	pop	{r7, pc}

08003184 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800318e:	f3ef 8310 	mrs	r3, PRIMASK
 8003192:	60fb      	str	r3, [r7, #12]
  return(result);
 8003194:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003196:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003198:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7ff ffaa 	bl	8003100 <list_remove_node>
  (*node)->next = NULL;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2200      	movs	r2, #0
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b006      	add	sp, #24
 80031cc:	bd80      	pop	{r7, pc}

080031ce <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b088      	sub	sp, #32
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  int size = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031da:	f3ef 8310 	mrs	r3, PRIMASK
 80031de:	613b      	str	r3, [r7, #16]
  return(result);
 80031e0:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80031e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80031e4:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80031ec:	e005      	b.n	80031fa <list_get_size+0x2c>
  {
    size++;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3301      	adds	r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d1f5      	bne.n	80031ee <list_get_size+0x20>
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800320c:	69fb      	ldr	r3, [r7, #28]
}
 800320e:	0018      	movs	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	b008      	add	sp, #32
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <__errno>:
 8003218:	4b01      	ldr	r3, [pc, #4]	; (8003220 <__errno+0x8>)
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	4770      	bx	lr
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	2000000c 	.word	0x2000000c

08003224 <__libc_init_array>:
 8003224:	b570      	push	{r4, r5, r6, lr}
 8003226:	2600      	movs	r6, #0
 8003228:	4d0c      	ldr	r5, [pc, #48]	; (800325c <__libc_init_array+0x38>)
 800322a:	4c0d      	ldr	r4, [pc, #52]	; (8003260 <__libc_init_array+0x3c>)
 800322c:	1b64      	subs	r4, r4, r5
 800322e:	10a4      	asrs	r4, r4, #2
 8003230:	42a6      	cmp	r6, r4
 8003232:	d109      	bne.n	8003248 <__libc_init_array+0x24>
 8003234:	2600      	movs	r6, #0
 8003236:	f000 ff43 	bl	80040c0 <_init>
 800323a:	4d0a      	ldr	r5, [pc, #40]	; (8003264 <__libc_init_array+0x40>)
 800323c:	4c0a      	ldr	r4, [pc, #40]	; (8003268 <__libc_init_array+0x44>)
 800323e:	1b64      	subs	r4, r4, r5
 8003240:	10a4      	asrs	r4, r4, #2
 8003242:	42a6      	cmp	r6, r4
 8003244:	d105      	bne.n	8003252 <__libc_init_array+0x2e>
 8003246:	bd70      	pop	{r4, r5, r6, pc}
 8003248:	00b3      	lsls	r3, r6, #2
 800324a:	58eb      	ldr	r3, [r5, r3]
 800324c:	4798      	blx	r3
 800324e:	3601      	adds	r6, #1
 8003250:	e7ee      	b.n	8003230 <__libc_init_array+0xc>
 8003252:	00b3      	lsls	r3, r6, #2
 8003254:	58eb      	ldr	r3, [r5, r3]
 8003256:	4798      	blx	r3
 8003258:	3601      	adds	r6, #1
 800325a:	e7f2      	b.n	8003242 <__libc_init_array+0x1e>
 800325c:	080041ac 	.word	0x080041ac
 8003260:	080041ac 	.word	0x080041ac
 8003264:	080041ac 	.word	0x080041ac
 8003268:	080041b0 	.word	0x080041b0

0800326c <memcpy>:
 800326c:	2300      	movs	r3, #0
 800326e:	b510      	push	{r4, lr}
 8003270:	429a      	cmp	r2, r3
 8003272:	d100      	bne.n	8003276 <memcpy+0xa>
 8003274:	bd10      	pop	{r4, pc}
 8003276:	5ccc      	ldrb	r4, [r1, r3]
 8003278:	54c4      	strb	r4, [r0, r3]
 800327a:	3301      	adds	r3, #1
 800327c:	e7f8      	b.n	8003270 <memcpy+0x4>

0800327e <memset>:
 800327e:	0003      	movs	r3, r0
 8003280:	1812      	adds	r2, r2, r0
 8003282:	4293      	cmp	r3, r2
 8003284:	d100      	bne.n	8003288 <memset+0xa>
 8003286:	4770      	bx	lr
 8003288:	7019      	strb	r1, [r3, #0]
 800328a:	3301      	adds	r3, #1
 800328c:	e7f9      	b.n	8003282 <memset+0x4>
	...

08003290 <iprintf>:
 8003290:	b40f      	push	{r0, r1, r2, r3}
 8003292:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <iprintf+0x30>)
 8003294:	b513      	push	{r0, r1, r4, lr}
 8003296:	681c      	ldr	r4, [r3, #0]
 8003298:	2c00      	cmp	r4, #0
 800329a:	d005      	beq.n	80032a8 <iprintf+0x18>
 800329c:	69a3      	ldr	r3, [r4, #24]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <iprintf+0x18>
 80032a2:	0020      	movs	r0, r4
 80032a4:	f000 f850 	bl	8003348 <__sinit>
 80032a8:	ab05      	add	r3, sp, #20
 80032aa:	9a04      	ldr	r2, [sp, #16]
 80032ac:	68a1      	ldr	r1, [r4, #8]
 80032ae:	0020      	movs	r0, r4
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	f000 f963 	bl	800357c <_vfiprintf_r>
 80032b6:	bc16      	pop	{r1, r2, r4}
 80032b8:	bc08      	pop	{r3}
 80032ba:	b004      	add	sp, #16
 80032bc:	4718      	bx	r3
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	2000000c 	.word	0x2000000c

080032c4 <std>:
 80032c4:	2300      	movs	r3, #0
 80032c6:	b510      	push	{r4, lr}
 80032c8:	0004      	movs	r4, r0
 80032ca:	6003      	str	r3, [r0, #0]
 80032cc:	6043      	str	r3, [r0, #4]
 80032ce:	6083      	str	r3, [r0, #8]
 80032d0:	8181      	strh	r1, [r0, #12]
 80032d2:	6643      	str	r3, [r0, #100]	; 0x64
 80032d4:	81c2      	strh	r2, [r0, #14]
 80032d6:	6103      	str	r3, [r0, #16]
 80032d8:	6143      	str	r3, [r0, #20]
 80032da:	6183      	str	r3, [r0, #24]
 80032dc:	0019      	movs	r1, r3
 80032de:	2208      	movs	r2, #8
 80032e0:	305c      	adds	r0, #92	; 0x5c
 80032e2:	f7ff ffcc 	bl	800327e <memset>
 80032e6:	4b05      	ldr	r3, [pc, #20]	; (80032fc <std+0x38>)
 80032e8:	6224      	str	r4, [r4, #32]
 80032ea:	6263      	str	r3, [r4, #36]	; 0x24
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <std+0x3c>)
 80032ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <std+0x40>)
 80032f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <std+0x44>)
 80032f6:	6323      	str	r3, [r4, #48]	; 0x30
 80032f8:	bd10      	pop	{r4, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	08003ab9 	.word	0x08003ab9
 8003300:	08003ae1 	.word	0x08003ae1
 8003304:	08003b19 	.word	0x08003b19
 8003308:	08003b45 	.word	0x08003b45

0800330c <_cleanup_r>:
 800330c:	b510      	push	{r4, lr}
 800330e:	4902      	ldr	r1, [pc, #8]	; (8003318 <_cleanup_r+0xc>)
 8003310:	f000 f88c 	bl	800342c <_fwalk_reent>
 8003314:	bd10      	pop	{r4, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	08003e49 	.word	0x08003e49

0800331c <__sfmoreglue>:
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	2568      	movs	r5, #104	; 0x68
 8003320:	1e4a      	subs	r2, r1, #1
 8003322:	4355      	muls	r5, r2
 8003324:	000e      	movs	r6, r1
 8003326:	0029      	movs	r1, r5
 8003328:	3174      	adds	r1, #116	; 0x74
 800332a:	f000 f8a1 	bl	8003470 <_malloc_r>
 800332e:	1e04      	subs	r4, r0, #0
 8003330:	d008      	beq.n	8003344 <__sfmoreglue+0x28>
 8003332:	2100      	movs	r1, #0
 8003334:	002a      	movs	r2, r5
 8003336:	6001      	str	r1, [r0, #0]
 8003338:	6046      	str	r6, [r0, #4]
 800333a:	300c      	adds	r0, #12
 800333c:	60a0      	str	r0, [r4, #8]
 800333e:	3268      	adds	r2, #104	; 0x68
 8003340:	f7ff ff9d 	bl	800327e <memset>
 8003344:	0020      	movs	r0, r4
 8003346:	bd70      	pop	{r4, r5, r6, pc}

08003348 <__sinit>:
 8003348:	6983      	ldr	r3, [r0, #24]
 800334a:	b513      	push	{r0, r1, r4, lr}
 800334c:	0004      	movs	r4, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d128      	bne.n	80033a4 <__sinit+0x5c>
 8003352:	6483      	str	r3, [r0, #72]	; 0x48
 8003354:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003356:	6503      	str	r3, [r0, #80]	; 0x50
 8003358:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <__sinit+0x60>)
 800335a:	4a14      	ldr	r2, [pc, #80]	; (80033ac <__sinit+0x64>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6282      	str	r2, [r0, #40]	; 0x28
 8003360:	9301      	str	r3, [sp, #4]
 8003362:	4298      	cmp	r0, r3
 8003364:	d101      	bne.n	800336a <__sinit+0x22>
 8003366:	2301      	movs	r3, #1
 8003368:	6183      	str	r3, [r0, #24]
 800336a:	0020      	movs	r0, r4
 800336c:	f000 f820 	bl	80033b0 <__sfp>
 8003370:	6060      	str	r0, [r4, #4]
 8003372:	0020      	movs	r0, r4
 8003374:	f000 f81c 	bl	80033b0 <__sfp>
 8003378:	60a0      	str	r0, [r4, #8]
 800337a:	0020      	movs	r0, r4
 800337c:	f000 f818 	bl	80033b0 <__sfp>
 8003380:	2200      	movs	r2, #0
 8003382:	60e0      	str	r0, [r4, #12]
 8003384:	2104      	movs	r1, #4
 8003386:	6860      	ldr	r0, [r4, #4]
 8003388:	f7ff ff9c 	bl	80032c4 <std>
 800338c:	2201      	movs	r2, #1
 800338e:	2109      	movs	r1, #9
 8003390:	68a0      	ldr	r0, [r4, #8]
 8003392:	f7ff ff97 	bl	80032c4 <std>
 8003396:	2202      	movs	r2, #2
 8003398:	2112      	movs	r1, #18
 800339a:	68e0      	ldr	r0, [r4, #12]
 800339c:	f7ff ff92 	bl	80032c4 <std>
 80033a0:	2301      	movs	r3, #1
 80033a2:	61a3      	str	r3, [r4, #24]
 80033a4:	bd13      	pop	{r0, r1, r4, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	08004114 	.word	0x08004114
 80033ac:	0800330d 	.word	0x0800330d

080033b0 <__sfp>:
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b2:	4b1c      	ldr	r3, [pc, #112]	; (8003424 <__sfp+0x74>)
 80033b4:	0007      	movs	r7, r0
 80033b6:	681e      	ldr	r6, [r3, #0]
 80033b8:	69b3      	ldr	r3, [r6, #24]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d102      	bne.n	80033c4 <__sfp+0x14>
 80033be:	0030      	movs	r0, r6
 80033c0:	f7ff ffc2 	bl	8003348 <__sinit>
 80033c4:	3648      	adds	r6, #72	; 0x48
 80033c6:	68b4      	ldr	r4, [r6, #8]
 80033c8:	6873      	ldr	r3, [r6, #4]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	d504      	bpl.n	80033d8 <__sfp+0x28>
 80033ce:	6833      	ldr	r3, [r6, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d007      	beq.n	80033e4 <__sfp+0x34>
 80033d4:	6836      	ldr	r6, [r6, #0]
 80033d6:	e7f6      	b.n	80033c6 <__sfp+0x16>
 80033d8:	220c      	movs	r2, #12
 80033da:	5ea5      	ldrsh	r5, [r4, r2]
 80033dc:	2d00      	cmp	r5, #0
 80033de:	d00d      	beq.n	80033fc <__sfp+0x4c>
 80033e0:	3468      	adds	r4, #104	; 0x68
 80033e2:	e7f2      	b.n	80033ca <__sfp+0x1a>
 80033e4:	2104      	movs	r1, #4
 80033e6:	0038      	movs	r0, r7
 80033e8:	f7ff ff98 	bl	800331c <__sfmoreglue>
 80033ec:	6030      	str	r0, [r6, #0]
 80033ee:	2800      	cmp	r0, #0
 80033f0:	d1f0      	bne.n	80033d4 <__sfp+0x24>
 80033f2:	230c      	movs	r3, #12
 80033f4:	0004      	movs	r4, r0
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	0020      	movs	r0, r4
 80033fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033fc:	0020      	movs	r0, r4
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <__sfp+0x78>)
 8003400:	6665      	str	r5, [r4, #100]	; 0x64
 8003402:	6025      	str	r5, [r4, #0]
 8003404:	6065      	str	r5, [r4, #4]
 8003406:	60a5      	str	r5, [r4, #8]
 8003408:	60e3      	str	r3, [r4, #12]
 800340a:	6125      	str	r5, [r4, #16]
 800340c:	6165      	str	r5, [r4, #20]
 800340e:	61a5      	str	r5, [r4, #24]
 8003410:	2208      	movs	r2, #8
 8003412:	0029      	movs	r1, r5
 8003414:	305c      	adds	r0, #92	; 0x5c
 8003416:	f7ff ff32 	bl	800327e <memset>
 800341a:	6365      	str	r5, [r4, #52]	; 0x34
 800341c:	63a5      	str	r5, [r4, #56]	; 0x38
 800341e:	64a5      	str	r5, [r4, #72]	; 0x48
 8003420:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003422:	e7e9      	b.n	80033f8 <__sfp+0x48>
 8003424:	08004114 	.word	0x08004114
 8003428:	ffff0001 	.word	0xffff0001

0800342c <_fwalk_reent>:
 800342c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800342e:	0004      	movs	r4, r0
 8003430:	0007      	movs	r7, r0
 8003432:	2600      	movs	r6, #0
 8003434:	9101      	str	r1, [sp, #4]
 8003436:	3448      	adds	r4, #72	; 0x48
 8003438:	2c00      	cmp	r4, #0
 800343a:	d101      	bne.n	8003440 <_fwalk_reent+0x14>
 800343c:	0030      	movs	r0, r6
 800343e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003440:	6863      	ldr	r3, [r4, #4]
 8003442:	68a5      	ldr	r5, [r4, #8]
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	9b00      	ldr	r3, [sp, #0]
 8003448:	3b01      	subs	r3, #1
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	d501      	bpl.n	8003452 <_fwalk_reent+0x26>
 800344e:	6824      	ldr	r4, [r4, #0]
 8003450:	e7f2      	b.n	8003438 <_fwalk_reent+0xc>
 8003452:	89ab      	ldrh	r3, [r5, #12]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d908      	bls.n	800346a <_fwalk_reent+0x3e>
 8003458:	220e      	movs	r2, #14
 800345a:	5eab      	ldrsh	r3, [r5, r2]
 800345c:	3301      	adds	r3, #1
 800345e:	d004      	beq.n	800346a <_fwalk_reent+0x3e>
 8003460:	0029      	movs	r1, r5
 8003462:	0038      	movs	r0, r7
 8003464:	9b01      	ldr	r3, [sp, #4]
 8003466:	4798      	blx	r3
 8003468:	4306      	orrs	r6, r0
 800346a:	3568      	adds	r5, #104	; 0x68
 800346c:	e7eb      	b.n	8003446 <_fwalk_reent+0x1a>
	...

08003470 <_malloc_r>:
 8003470:	2303      	movs	r3, #3
 8003472:	b570      	push	{r4, r5, r6, lr}
 8003474:	1ccd      	adds	r5, r1, #3
 8003476:	439d      	bics	r5, r3
 8003478:	3508      	adds	r5, #8
 800347a:	0006      	movs	r6, r0
 800347c:	2d0c      	cmp	r5, #12
 800347e:	d21e      	bcs.n	80034be <_malloc_r+0x4e>
 8003480:	250c      	movs	r5, #12
 8003482:	42a9      	cmp	r1, r5
 8003484:	d81d      	bhi.n	80034c2 <_malloc_r+0x52>
 8003486:	0030      	movs	r0, r6
 8003488:	f000 fd95 	bl	8003fb6 <__malloc_lock>
 800348c:	4a25      	ldr	r2, [pc, #148]	; (8003524 <_malloc_r+0xb4>)
 800348e:	6814      	ldr	r4, [r2, #0]
 8003490:	0021      	movs	r1, r4
 8003492:	2900      	cmp	r1, #0
 8003494:	d119      	bne.n	80034ca <_malloc_r+0x5a>
 8003496:	4c24      	ldr	r4, [pc, #144]	; (8003528 <_malloc_r+0xb8>)
 8003498:	6823      	ldr	r3, [r4, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d103      	bne.n	80034a6 <_malloc_r+0x36>
 800349e:	0030      	movs	r0, r6
 80034a0:	f000 faf8 	bl	8003a94 <_sbrk_r>
 80034a4:	6020      	str	r0, [r4, #0]
 80034a6:	0029      	movs	r1, r5
 80034a8:	0030      	movs	r0, r6
 80034aa:	f000 faf3 	bl	8003a94 <_sbrk_r>
 80034ae:	1c43      	adds	r3, r0, #1
 80034b0:	d12b      	bne.n	800350a <_malloc_r+0x9a>
 80034b2:	230c      	movs	r3, #12
 80034b4:	0030      	movs	r0, r6
 80034b6:	6033      	str	r3, [r6, #0]
 80034b8:	f000 fd7e 	bl	8003fb8 <__malloc_unlock>
 80034bc:	e003      	b.n	80034c6 <_malloc_r+0x56>
 80034be:	2d00      	cmp	r5, #0
 80034c0:	dadf      	bge.n	8003482 <_malloc_r+0x12>
 80034c2:	230c      	movs	r3, #12
 80034c4:	6033      	str	r3, [r6, #0]
 80034c6:	2000      	movs	r0, #0
 80034c8:	bd70      	pop	{r4, r5, r6, pc}
 80034ca:	680b      	ldr	r3, [r1, #0]
 80034cc:	1b5b      	subs	r3, r3, r5
 80034ce:	d419      	bmi.n	8003504 <_malloc_r+0x94>
 80034d0:	2b0b      	cmp	r3, #11
 80034d2:	d903      	bls.n	80034dc <_malloc_r+0x6c>
 80034d4:	600b      	str	r3, [r1, #0]
 80034d6:	18cc      	adds	r4, r1, r3
 80034d8:	6025      	str	r5, [r4, #0]
 80034da:	e003      	b.n	80034e4 <_malloc_r+0x74>
 80034dc:	684b      	ldr	r3, [r1, #4]
 80034de:	428c      	cmp	r4, r1
 80034e0:	d10d      	bne.n	80034fe <_malloc_r+0x8e>
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	0030      	movs	r0, r6
 80034e6:	f000 fd67 	bl	8003fb8 <__malloc_unlock>
 80034ea:	0020      	movs	r0, r4
 80034ec:	2207      	movs	r2, #7
 80034ee:	300b      	adds	r0, #11
 80034f0:	1d23      	adds	r3, r4, #4
 80034f2:	4390      	bics	r0, r2
 80034f4:	1ac3      	subs	r3, r0, r3
 80034f6:	d0e7      	beq.n	80034c8 <_malloc_r+0x58>
 80034f8:	425a      	negs	r2, r3
 80034fa:	50e2      	str	r2, [r4, r3]
 80034fc:	e7e4      	b.n	80034c8 <_malloc_r+0x58>
 80034fe:	6063      	str	r3, [r4, #4]
 8003500:	000c      	movs	r4, r1
 8003502:	e7ef      	b.n	80034e4 <_malloc_r+0x74>
 8003504:	000c      	movs	r4, r1
 8003506:	6849      	ldr	r1, [r1, #4]
 8003508:	e7c3      	b.n	8003492 <_malloc_r+0x22>
 800350a:	2303      	movs	r3, #3
 800350c:	1cc4      	adds	r4, r0, #3
 800350e:	439c      	bics	r4, r3
 8003510:	42a0      	cmp	r0, r4
 8003512:	d0e1      	beq.n	80034d8 <_malloc_r+0x68>
 8003514:	1a21      	subs	r1, r4, r0
 8003516:	0030      	movs	r0, r6
 8003518:	f000 fabc 	bl	8003a94 <_sbrk_r>
 800351c:	1c43      	adds	r3, r0, #1
 800351e:	d1db      	bne.n	80034d8 <_malloc_r+0x68>
 8003520:	e7c7      	b.n	80034b2 <_malloc_r+0x42>
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	20000470 	.word	0x20000470
 8003528:	20000474 	.word	0x20000474

0800352c <__sfputc_r>:
 800352c:	6893      	ldr	r3, [r2, #8]
 800352e:	b510      	push	{r4, lr}
 8003530:	3b01      	subs	r3, #1
 8003532:	6093      	str	r3, [r2, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	da04      	bge.n	8003542 <__sfputc_r+0x16>
 8003538:	6994      	ldr	r4, [r2, #24]
 800353a:	42a3      	cmp	r3, r4
 800353c:	db07      	blt.n	800354e <__sfputc_r+0x22>
 800353e:	290a      	cmp	r1, #10
 8003540:	d005      	beq.n	800354e <__sfputc_r+0x22>
 8003542:	6813      	ldr	r3, [r2, #0]
 8003544:	1c58      	adds	r0, r3, #1
 8003546:	6010      	str	r0, [r2, #0]
 8003548:	7019      	strb	r1, [r3, #0]
 800354a:	0008      	movs	r0, r1
 800354c:	bd10      	pop	{r4, pc}
 800354e:	f000 faff 	bl	8003b50 <__swbuf_r>
 8003552:	0001      	movs	r1, r0
 8003554:	e7f9      	b.n	800354a <__sfputc_r+0x1e>

08003556 <__sfputs_r>:
 8003556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003558:	0006      	movs	r6, r0
 800355a:	000f      	movs	r7, r1
 800355c:	0014      	movs	r4, r2
 800355e:	18d5      	adds	r5, r2, r3
 8003560:	42ac      	cmp	r4, r5
 8003562:	d101      	bne.n	8003568 <__sfputs_r+0x12>
 8003564:	2000      	movs	r0, #0
 8003566:	e007      	b.n	8003578 <__sfputs_r+0x22>
 8003568:	7821      	ldrb	r1, [r4, #0]
 800356a:	003a      	movs	r2, r7
 800356c:	0030      	movs	r0, r6
 800356e:	f7ff ffdd 	bl	800352c <__sfputc_r>
 8003572:	3401      	adds	r4, #1
 8003574:	1c43      	adds	r3, r0, #1
 8003576:	d1f3      	bne.n	8003560 <__sfputs_r+0xa>
 8003578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800357c <_vfiprintf_r>:
 800357c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800357e:	b0a1      	sub	sp, #132	; 0x84
 8003580:	9003      	str	r0, [sp, #12]
 8003582:	000f      	movs	r7, r1
 8003584:	0016      	movs	r6, r2
 8003586:	001d      	movs	r5, r3
 8003588:	2800      	cmp	r0, #0
 800358a:	d005      	beq.n	8003598 <_vfiprintf_r+0x1c>
 800358c:	6983      	ldr	r3, [r0, #24]
 800358e:	9305      	str	r3, [sp, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <_vfiprintf_r+0x1c>
 8003594:	f7ff fed8 	bl	8003348 <__sinit>
 8003598:	4b7b      	ldr	r3, [pc, #492]	; (8003788 <_vfiprintf_r+0x20c>)
 800359a:	429f      	cmp	r7, r3
 800359c:	d15c      	bne.n	8003658 <_vfiprintf_r+0xdc>
 800359e:	9b03      	ldr	r3, [sp, #12]
 80035a0:	685f      	ldr	r7, [r3, #4]
 80035a2:	89bb      	ldrh	r3, [r7, #12]
 80035a4:	071b      	lsls	r3, r3, #28
 80035a6:	d563      	bpl.n	8003670 <_vfiprintf_r+0xf4>
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d060      	beq.n	8003670 <_vfiprintf_r+0xf4>
 80035ae:	2300      	movs	r3, #0
 80035b0:	ac08      	add	r4, sp, #32
 80035b2:	6163      	str	r3, [r4, #20]
 80035b4:	3320      	adds	r3, #32
 80035b6:	7663      	strb	r3, [r4, #25]
 80035b8:	3310      	adds	r3, #16
 80035ba:	76a3      	strb	r3, [r4, #26]
 80035bc:	9507      	str	r5, [sp, #28]
 80035be:	0035      	movs	r5, r6
 80035c0:	782b      	ldrb	r3, [r5, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <_vfiprintf_r+0x4e>
 80035c6:	2b25      	cmp	r3, #37	; 0x25
 80035c8:	d15c      	bne.n	8003684 <_vfiprintf_r+0x108>
 80035ca:	1bab      	subs	r3, r5, r6
 80035cc:	9305      	str	r3, [sp, #20]
 80035ce:	d00c      	beq.n	80035ea <_vfiprintf_r+0x6e>
 80035d0:	0032      	movs	r2, r6
 80035d2:	0039      	movs	r1, r7
 80035d4:	9803      	ldr	r0, [sp, #12]
 80035d6:	f7ff ffbe 	bl	8003556 <__sfputs_r>
 80035da:	1c43      	adds	r3, r0, #1
 80035dc:	d100      	bne.n	80035e0 <_vfiprintf_r+0x64>
 80035de:	e0c4      	b.n	800376a <_vfiprintf_r+0x1ee>
 80035e0:	6962      	ldr	r2, [r4, #20]
 80035e2:	9b05      	ldr	r3, [sp, #20]
 80035e4:	4694      	mov	ip, r2
 80035e6:	4463      	add	r3, ip
 80035e8:	6163      	str	r3, [r4, #20]
 80035ea:	782b      	ldrb	r3, [r5, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d100      	bne.n	80035f2 <_vfiprintf_r+0x76>
 80035f0:	e0bb      	b.n	800376a <_vfiprintf_r+0x1ee>
 80035f2:	2201      	movs	r2, #1
 80035f4:	2300      	movs	r3, #0
 80035f6:	4252      	negs	r2, r2
 80035f8:	6062      	str	r2, [r4, #4]
 80035fa:	a904      	add	r1, sp, #16
 80035fc:	3254      	adds	r2, #84	; 0x54
 80035fe:	1852      	adds	r2, r2, r1
 8003600:	1c6e      	adds	r6, r5, #1
 8003602:	6023      	str	r3, [r4, #0]
 8003604:	60e3      	str	r3, [r4, #12]
 8003606:	60a3      	str	r3, [r4, #8]
 8003608:	7013      	strb	r3, [r2, #0]
 800360a:	65a3      	str	r3, [r4, #88]	; 0x58
 800360c:	7831      	ldrb	r1, [r6, #0]
 800360e:	2205      	movs	r2, #5
 8003610:	485e      	ldr	r0, [pc, #376]	; (800378c <_vfiprintf_r+0x210>)
 8003612:	f000 fcc5 	bl	8003fa0 <memchr>
 8003616:	1c75      	adds	r5, r6, #1
 8003618:	2800      	cmp	r0, #0
 800361a:	d135      	bne.n	8003688 <_vfiprintf_r+0x10c>
 800361c:	6822      	ldr	r2, [r4, #0]
 800361e:	06d3      	lsls	r3, r2, #27
 8003620:	d504      	bpl.n	800362c <_vfiprintf_r+0xb0>
 8003622:	2353      	movs	r3, #83	; 0x53
 8003624:	a904      	add	r1, sp, #16
 8003626:	185b      	adds	r3, r3, r1
 8003628:	2120      	movs	r1, #32
 800362a:	7019      	strb	r1, [r3, #0]
 800362c:	0713      	lsls	r3, r2, #28
 800362e:	d504      	bpl.n	800363a <_vfiprintf_r+0xbe>
 8003630:	2353      	movs	r3, #83	; 0x53
 8003632:	a904      	add	r1, sp, #16
 8003634:	185b      	adds	r3, r3, r1
 8003636:	212b      	movs	r1, #43	; 0x2b
 8003638:	7019      	strb	r1, [r3, #0]
 800363a:	7833      	ldrb	r3, [r6, #0]
 800363c:	2b2a      	cmp	r3, #42	; 0x2a
 800363e:	d02c      	beq.n	800369a <_vfiprintf_r+0x11e>
 8003640:	0035      	movs	r5, r6
 8003642:	2100      	movs	r1, #0
 8003644:	200a      	movs	r0, #10
 8003646:	68e3      	ldr	r3, [r4, #12]
 8003648:	782a      	ldrb	r2, [r5, #0]
 800364a:	1c6e      	adds	r6, r5, #1
 800364c:	3a30      	subs	r2, #48	; 0x30
 800364e:	2a09      	cmp	r2, #9
 8003650:	d964      	bls.n	800371c <_vfiprintf_r+0x1a0>
 8003652:	2900      	cmp	r1, #0
 8003654:	d02e      	beq.n	80036b4 <_vfiprintf_r+0x138>
 8003656:	e026      	b.n	80036a6 <_vfiprintf_r+0x12a>
 8003658:	4b4d      	ldr	r3, [pc, #308]	; (8003790 <_vfiprintf_r+0x214>)
 800365a:	429f      	cmp	r7, r3
 800365c:	d102      	bne.n	8003664 <_vfiprintf_r+0xe8>
 800365e:	9b03      	ldr	r3, [sp, #12]
 8003660:	689f      	ldr	r7, [r3, #8]
 8003662:	e79e      	b.n	80035a2 <_vfiprintf_r+0x26>
 8003664:	4b4b      	ldr	r3, [pc, #300]	; (8003794 <_vfiprintf_r+0x218>)
 8003666:	429f      	cmp	r7, r3
 8003668:	d19b      	bne.n	80035a2 <_vfiprintf_r+0x26>
 800366a:	9b03      	ldr	r3, [sp, #12]
 800366c:	68df      	ldr	r7, [r3, #12]
 800366e:	e798      	b.n	80035a2 <_vfiprintf_r+0x26>
 8003670:	0039      	movs	r1, r7
 8003672:	9803      	ldr	r0, [sp, #12]
 8003674:	f000 fad6 	bl	8003c24 <__swsetup_r>
 8003678:	2800      	cmp	r0, #0
 800367a:	d098      	beq.n	80035ae <_vfiprintf_r+0x32>
 800367c:	2001      	movs	r0, #1
 800367e:	4240      	negs	r0, r0
 8003680:	b021      	add	sp, #132	; 0x84
 8003682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003684:	3501      	adds	r5, #1
 8003686:	e79b      	b.n	80035c0 <_vfiprintf_r+0x44>
 8003688:	4b40      	ldr	r3, [pc, #256]	; (800378c <_vfiprintf_r+0x210>)
 800368a:	6822      	ldr	r2, [r4, #0]
 800368c:	1ac0      	subs	r0, r0, r3
 800368e:	2301      	movs	r3, #1
 8003690:	4083      	lsls	r3, r0
 8003692:	4313      	orrs	r3, r2
 8003694:	6023      	str	r3, [r4, #0]
 8003696:	002e      	movs	r6, r5
 8003698:	e7b8      	b.n	800360c <_vfiprintf_r+0x90>
 800369a:	9b07      	ldr	r3, [sp, #28]
 800369c:	1d19      	adds	r1, r3, #4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	9107      	str	r1, [sp, #28]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	db01      	blt.n	80036aa <_vfiprintf_r+0x12e>
 80036a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80036a8:	e004      	b.n	80036b4 <_vfiprintf_r+0x138>
 80036aa:	425b      	negs	r3, r3
 80036ac:	60e3      	str	r3, [r4, #12]
 80036ae:	2302      	movs	r3, #2
 80036b0:	4313      	orrs	r3, r2
 80036b2:	6023      	str	r3, [r4, #0]
 80036b4:	782b      	ldrb	r3, [r5, #0]
 80036b6:	2b2e      	cmp	r3, #46	; 0x2e
 80036b8:	d10a      	bne.n	80036d0 <_vfiprintf_r+0x154>
 80036ba:	786b      	ldrb	r3, [r5, #1]
 80036bc:	2b2a      	cmp	r3, #42	; 0x2a
 80036be:	d135      	bne.n	800372c <_vfiprintf_r+0x1b0>
 80036c0:	9b07      	ldr	r3, [sp, #28]
 80036c2:	3502      	adds	r5, #2
 80036c4:	1d1a      	adds	r2, r3, #4
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	9207      	str	r2, [sp, #28]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	db2b      	blt.n	8003726 <_vfiprintf_r+0x1aa>
 80036ce:	9309      	str	r3, [sp, #36]	; 0x24
 80036d0:	4e31      	ldr	r6, [pc, #196]	; (8003798 <_vfiprintf_r+0x21c>)
 80036d2:	7829      	ldrb	r1, [r5, #0]
 80036d4:	2203      	movs	r2, #3
 80036d6:	0030      	movs	r0, r6
 80036d8:	f000 fc62 	bl	8003fa0 <memchr>
 80036dc:	2800      	cmp	r0, #0
 80036de:	d006      	beq.n	80036ee <_vfiprintf_r+0x172>
 80036e0:	2340      	movs	r3, #64	; 0x40
 80036e2:	1b80      	subs	r0, r0, r6
 80036e4:	4083      	lsls	r3, r0
 80036e6:	6822      	ldr	r2, [r4, #0]
 80036e8:	3501      	adds	r5, #1
 80036ea:	4313      	orrs	r3, r2
 80036ec:	6023      	str	r3, [r4, #0]
 80036ee:	7829      	ldrb	r1, [r5, #0]
 80036f0:	2206      	movs	r2, #6
 80036f2:	482a      	ldr	r0, [pc, #168]	; (800379c <_vfiprintf_r+0x220>)
 80036f4:	1c6e      	adds	r6, r5, #1
 80036f6:	7621      	strb	r1, [r4, #24]
 80036f8:	f000 fc52 	bl	8003fa0 <memchr>
 80036fc:	2800      	cmp	r0, #0
 80036fe:	d03a      	beq.n	8003776 <_vfiprintf_r+0x1fa>
 8003700:	4b27      	ldr	r3, [pc, #156]	; (80037a0 <_vfiprintf_r+0x224>)
 8003702:	2b00      	cmp	r3, #0
 8003704:	d125      	bne.n	8003752 <_vfiprintf_r+0x1d6>
 8003706:	2207      	movs	r2, #7
 8003708:	9b07      	ldr	r3, [sp, #28]
 800370a:	3307      	adds	r3, #7
 800370c:	4393      	bics	r3, r2
 800370e:	3308      	adds	r3, #8
 8003710:	9307      	str	r3, [sp, #28]
 8003712:	6963      	ldr	r3, [r4, #20]
 8003714:	9a04      	ldr	r2, [sp, #16]
 8003716:	189b      	adds	r3, r3, r2
 8003718:	6163      	str	r3, [r4, #20]
 800371a:	e750      	b.n	80035be <_vfiprintf_r+0x42>
 800371c:	4343      	muls	r3, r0
 800371e:	2101      	movs	r1, #1
 8003720:	189b      	adds	r3, r3, r2
 8003722:	0035      	movs	r5, r6
 8003724:	e790      	b.n	8003648 <_vfiprintf_r+0xcc>
 8003726:	2301      	movs	r3, #1
 8003728:	425b      	negs	r3, r3
 800372a:	e7d0      	b.n	80036ce <_vfiprintf_r+0x152>
 800372c:	2300      	movs	r3, #0
 800372e:	200a      	movs	r0, #10
 8003730:	001a      	movs	r2, r3
 8003732:	3501      	adds	r5, #1
 8003734:	6063      	str	r3, [r4, #4]
 8003736:	7829      	ldrb	r1, [r5, #0]
 8003738:	1c6e      	adds	r6, r5, #1
 800373a:	3930      	subs	r1, #48	; 0x30
 800373c:	2909      	cmp	r1, #9
 800373e:	d903      	bls.n	8003748 <_vfiprintf_r+0x1cc>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0c5      	beq.n	80036d0 <_vfiprintf_r+0x154>
 8003744:	9209      	str	r2, [sp, #36]	; 0x24
 8003746:	e7c3      	b.n	80036d0 <_vfiprintf_r+0x154>
 8003748:	4342      	muls	r2, r0
 800374a:	2301      	movs	r3, #1
 800374c:	1852      	adds	r2, r2, r1
 800374e:	0035      	movs	r5, r6
 8003750:	e7f1      	b.n	8003736 <_vfiprintf_r+0x1ba>
 8003752:	ab07      	add	r3, sp, #28
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	003a      	movs	r2, r7
 8003758:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <_vfiprintf_r+0x228>)
 800375a:	0021      	movs	r1, r4
 800375c:	9803      	ldr	r0, [sp, #12]
 800375e:	e000      	b.n	8003762 <_vfiprintf_r+0x1e6>
 8003760:	bf00      	nop
 8003762:	9004      	str	r0, [sp, #16]
 8003764:	9b04      	ldr	r3, [sp, #16]
 8003766:	3301      	adds	r3, #1
 8003768:	d1d3      	bne.n	8003712 <_vfiprintf_r+0x196>
 800376a:	89bb      	ldrh	r3, [r7, #12]
 800376c:	065b      	lsls	r3, r3, #25
 800376e:	d500      	bpl.n	8003772 <_vfiprintf_r+0x1f6>
 8003770:	e784      	b.n	800367c <_vfiprintf_r+0x100>
 8003772:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003774:	e784      	b.n	8003680 <_vfiprintf_r+0x104>
 8003776:	ab07      	add	r3, sp, #28
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	003a      	movs	r2, r7
 800377c:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <_vfiprintf_r+0x228>)
 800377e:	0021      	movs	r1, r4
 8003780:	9803      	ldr	r0, [sp, #12]
 8003782:	f000 f87f 	bl	8003884 <_printf_i>
 8003786:	e7ec      	b.n	8003762 <_vfiprintf_r+0x1e6>
 8003788:	08004138 	.word	0x08004138
 800378c:	08004178 	.word	0x08004178
 8003790:	08004158 	.word	0x08004158
 8003794:	08004118 	.word	0x08004118
 8003798:	0800417e 	.word	0x0800417e
 800379c:	08004182 	.word	0x08004182
 80037a0:	00000000 	.word	0x00000000
 80037a4:	08003557 	.word	0x08003557

080037a8 <_printf_common>:
 80037a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037aa:	0015      	movs	r5, r2
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	688a      	ldr	r2, [r1, #8]
 80037b0:	690b      	ldr	r3, [r1, #16]
 80037b2:	9000      	str	r0, [sp, #0]
 80037b4:	000c      	movs	r4, r1
 80037b6:	4293      	cmp	r3, r2
 80037b8:	da00      	bge.n	80037bc <_printf_common+0x14>
 80037ba:	0013      	movs	r3, r2
 80037bc:	0022      	movs	r2, r4
 80037be:	602b      	str	r3, [r5, #0]
 80037c0:	3243      	adds	r2, #67	; 0x43
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	2a00      	cmp	r2, #0
 80037c6:	d001      	beq.n	80037cc <_printf_common+0x24>
 80037c8:	3301      	adds	r3, #1
 80037ca:	602b      	str	r3, [r5, #0]
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	069b      	lsls	r3, r3, #26
 80037d0:	d502      	bpl.n	80037d8 <_printf_common+0x30>
 80037d2:	682b      	ldr	r3, [r5, #0]
 80037d4:	3302      	adds	r3, #2
 80037d6:	602b      	str	r3, [r5, #0]
 80037d8:	2706      	movs	r7, #6
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	401f      	ands	r7, r3
 80037de:	d027      	beq.n	8003830 <_printf_common+0x88>
 80037e0:	0023      	movs	r3, r4
 80037e2:	3343      	adds	r3, #67	; 0x43
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	1e5a      	subs	r2, r3, #1
 80037e8:	4193      	sbcs	r3, r2
 80037ea:	6822      	ldr	r2, [r4, #0]
 80037ec:	0692      	lsls	r2, r2, #26
 80037ee:	d430      	bmi.n	8003852 <_printf_common+0xaa>
 80037f0:	0022      	movs	r2, r4
 80037f2:	9901      	ldr	r1, [sp, #4]
 80037f4:	3243      	adds	r2, #67	; 0x43
 80037f6:	9800      	ldr	r0, [sp, #0]
 80037f8:	9e08      	ldr	r6, [sp, #32]
 80037fa:	47b0      	blx	r6
 80037fc:	1c43      	adds	r3, r0, #1
 80037fe:	d025      	beq.n	800384c <_printf_common+0xa4>
 8003800:	2306      	movs	r3, #6
 8003802:	6820      	ldr	r0, [r4, #0]
 8003804:	682a      	ldr	r2, [r5, #0]
 8003806:	68e1      	ldr	r1, [r4, #12]
 8003808:	4003      	ands	r3, r0
 800380a:	2500      	movs	r5, #0
 800380c:	2b04      	cmp	r3, #4
 800380e:	d103      	bne.n	8003818 <_printf_common+0x70>
 8003810:	1a8d      	subs	r5, r1, r2
 8003812:	43eb      	mvns	r3, r5
 8003814:	17db      	asrs	r3, r3, #31
 8003816:	401d      	ands	r5, r3
 8003818:	68a3      	ldr	r3, [r4, #8]
 800381a:	6922      	ldr	r2, [r4, #16]
 800381c:	4293      	cmp	r3, r2
 800381e:	dd01      	ble.n	8003824 <_printf_common+0x7c>
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	18ed      	adds	r5, r5, r3
 8003824:	2700      	movs	r7, #0
 8003826:	42bd      	cmp	r5, r7
 8003828:	d120      	bne.n	800386c <_printf_common+0xc4>
 800382a:	2000      	movs	r0, #0
 800382c:	e010      	b.n	8003850 <_printf_common+0xa8>
 800382e:	3701      	adds	r7, #1
 8003830:	68e3      	ldr	r3, [r4, #12]
 8003832:	682a      	ldr	r2, [r5, #0]
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	42bb      	cmp	r3, r7
 8003838:	ddd2      	ble.n	80037e0 <_printf_common+0x38>
 800383a:	0022      	movs	r2, r4
 800383c:	2301      	movs	r3, #1
 800383e:	3219      	adds	r2, #25
 8003840:	9901      	ldr	r1, [sp, #4]
 8003842:	9800      	ldr	r0, [sp, #0]
 8003844:	9e08      	ldr	r6, [sp, #32]
 8003846:	47b0      	blx	r6
 8003848:	1c43      	adds	r3, r0, #1
 800384a:	d1f0      	bne.n	800382e <_printf_common+0x86>
 800384c:	2001      	movs	r0, #1
 800384e:	4240      	negs	r0, r0
 8003850:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003852:	2030      	movs	r0, #48	; 0x30
 8003854:	18e1      	adds	r1, r4, r3
 8003856:	3143      	adds	r1, #67	; 0x43
 8003858:	7008      	strb	r0, [r1, #0]
 800385a:	0021      	movs	r1, r4
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	3145      	adds	r1, #69	; 0x45
 8003860:	7809      	ldrb	r1, [r1, #0]
 8003862:	18a2      	adds	r2, r4, r2
 8003864:	3243      	adds	r2, #67	; 0x43
 8003866:	3302      	adds	r3, #2
 8003868:	7011      	strb	r1, [r2, #0]
 800386a:	e7c1      	b.n	80037f0 <_printf_common+0x48>
 800386c:	0022      	movs	r2, r4
 800386e:	2301      	movs	r3, #1
 8003870:	321a      	adds	r2, #26
 8003872:	9901      	ldr	r1, [sp, #4]
 8003874:	9800      	ldr	r0, [sp, #0]
 8003876:	9e08      	ldr	r6, [sp, #32]
 8003878:	47b0      	blx	r6
 800387a:	1c43      	adds	r3, r0, #1
 800387c:	d0e6      	beq.n	800384c <_printf_common+0xa4>
 800387e:	3701      	adds	r7, #1
 8003880:	e7d1      	b.n	8003826 <_printf_common+0x7e>
	...

08003884 <_printf_i>:
 8003884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003886:	b089      	sub	sp, #36	; 0x24
 8003888:	9204      	str	r2, [sp, #16]
 800388a:	000a      	movs	r2, r1
 800388c:	3243      	adds	r2, #67	; 0x43
 800388e:	9305      	str	r3, [sp, #20]
 8003890:	9003      	str	r0, [sp, #12]
 8003892:	9202      	str	r2, [sp, #8]
 8003894:	7e0a      	ldrb	r2, [r1, #24]
 8003896:	000c      	movs	r4, r1
 8003898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800389a:	2a6e      	cmp	r2, #110	; 0x6e
 800389c:	d100      	bne.n	80038a0 <_printf_i+0x1c>
 800389e:	e086      	b.n	80039ae <_printf_i+0x12a>
 80038a0:	d81f      	bhi.n	80038e2 <_printf_i+0x5e>
 80038a2:	2a63      	cmp	r2, #99	; 0x63
 80038a4:	d033      	beq.n	800390e <_printf_i+0x8a>
 80038a6:	d808      	bhi.n	80038ba <_printf_i+0x36>
 80038a8:	2a00      	cmp	r2, #0
 80038aa:	d100      	bne.n	80038ae <_printf_i+0x2a>
 80038ac:	e08c      	b.n	80039c8 <_printf_i+0x144>
 80038ae:	2a58      	cmp	r2, #88	; 0x58
 80038b0:	d04d      	beq.n	800394e <_printf_i+0xca>
 80038b2:	0025      	movs	r5, r4
 80038b4:	3542      	adds	r5, #66	; 0x42
 80038b6:	702a      	strb	r2, [r5, #0]
 80038b8:	e030      	b.n	800391c <_printf_i+0x98>
 80038ba:	2a64      	cmp	r2, #100	; 0x64
 80038bc:	d001      	beq.n	80038c2 <_printf_i+0x3e>
 80038be:	2a69      	cmp	r2, #105	; 0x69
 80038c0:	d1f7      	bne.n	80038b2 <_printf_i+0x2e>
 80038c2:	6819      	ldr	r1, [r3, #0]
 80038c4:	6825      	ldr	r5, [r4, #0]
 80038c6:	1d0a      	adds	r2, r1, #4
 80038c8:	0628      	lsls	r0, r5, #24
 80038ca:	d529      	bpl.n	8003920 <_printf_i+0x9c>
 80038cc:	6808      	ldr	r0, [r1, #0]
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	2800      	cmp	r0, #0
 80038d2:	da03      	bge.n	80038dc <_printf_i+0x58>
 80038d4:	232d      	movs	r3, #45	; 0x2d
 80038d6:	9a02      	ldr	r2, [sp, #8]
 80038d8:	4240      	negs	r0, r0
 80038da:	7013      	strb	r3, [r2, #0]
 80038dc:	4e6b      	ldr	r6, [pc, #428]	; (8003a8c <_printf_i+0x208>)
 80038de:	270a      	movs	r7, #10
 80038e0:	e04f      	b.n	8003982 <_printf_i+0xfe>
 80038e2:	2a73      	cmp	r2, #115	; 0x73
 80038e4:	d074      	beq.n	80039d0 <_printf_i+0x14c>
 80038e6:	d808      	bhi.n	80038fa <_printf_i+0x76>
 80038e8:	2a6f      	cmp	r2, #111	; 0x6f
 80038ea:	d01f      	beq.n	800392c <_printf_i+0xa8>
 80038ec:	2a70      	cmp	r2, #112	; 0x70
 80038ee:	d1e0      	bne.n	80038b2 <_printf_i+0x2e>
 80038f0:	2220      	movs	r2, #32
 80038f2:	6809      	ldr	r1, [r1, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	6022      	str	r2, [r4, #0]
 80038f8:	e003      	b.n	8003902 <_printf_i+0x7e>
 80038fa:	2a75      	cmp	r2, #117	; 0x75
 80038fc:	d016      	beq.n	800392c <_printf_i+0xa8>
 80038fe:	2a78      	cmp	r2, #120	; 0x78
 8003900:	d1d7      	bne.n	80038b2 <_printf_i+0x2e>
 8003902:	0022      	movs	r2, r4
 8003904:	2178      	movs	r1, #120	; 0x78
 8003906:	3245      	adds	r2, #69	; 0x45
 8003908:	7011      	strb	r1, [r2, #0]
 800390a:	4e61      	ldr	r6, [pc, #388]	; (8003a90 <_printf_i+0x20c>)
 800390c:	e022      	b.n	8003954 <_printf_i+0xd0>
 800390e:	0025      	movs	r5, r4
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	3542      	adds	r5, #66	; 0x42
 8003914:	1d11      	adds	r1, r2, #4
 8003916:	6019      	str	r1, [r3, #0]
 8003918:	6813      	ldr	r3, [r2, #0]
 800391a:	702b      	strb	r3, [r5, #0]
 800391c:	2301      	movs	r3, #1
 800391e:	e065      	b.n	80039ec <_printf_i+0x168>
 8003920:	6808      	ldr	r0, [r1, #0]
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	0669      	lsls	r1, r5, #25
 8003926:	d5d3      	bpl.n	80038d0 <_printf_i+0x4c>
 8003928:	b200      	sxth	r0, r0
 800392a:	e7d1      	b.n	80038d0 <_printf_i+0x4c>
 800392c:	6819      	ldr	r1, [r3, #0]
 800392e:	6825      	ldr	r5, [r4, #0]
 8003930:	1d08      	adds	r0, r1, #4
 8003932:	6018      	str	r0, [r3, #0]
 8003934:	6808      	ldr	r0, [r1, #0]
 8003936:	062e      	lsls	r6, r5, #24
 8003938:	d505      	bpl.n	8003946 <_printf_i+0xc2>
 800393a:	4e54      	ldr	r6, [pc, #336]	; (8003a8c <_printf_i+0x208>)
 800393c:	2708      	movs	r7, #8
 800393e:	2a6f      	cmp	r2, #111	; 0x6f
 8003940:	d01b      	beq.n	800397a <_printf_i+0xf6>
 8003942:	270a      	movs	r7, #10
 8003944:	e019      	b.n	800397a <_printf_i+0xf6>
 8003946:	066d      	lsls	r5, r5, #25
 8003948:	d5f7      	bpl.n	800393a <_printf_i+0xb6>
 800394a:	b280      	uxth	r0, r0
 800394c:	e7f5      	b.n	800393a <_printf_i+0xb6>
 800394e:	3145      	adds	r1, #69	; 0x45
 8003950:	4e4e      	ldr	r6, [pc, #312]	; (8003a8c <_printf_i+0x208>)
 8003952:	700a      	strb	r2, [r1, #0]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	6822      	ldr	r2, [r4, #0]
 8003958:	1d01      	adds	r1, r0, #4
 800395a:	6800      	ldr	r0, [r0, #0]
 800395c:	6019      	str	r1, [r3, #0]
 800395e:	0615      	lsls	r5, r2, #24
 8003960:	d521      	bpl.n	80039a6 <_printf_i+0x122>
 8003962:	07d3      	lsls	r3, r2, #31
 8003964:	d502      	bpl.n	800396c <_printf_i+0xe8>
 8003966:	2320      	movs	r3, #32
 8003968:	431a      	orrs	r2, r3
 800396a:	6022      	str	r2, [r4, #0]
 800396c:	2710      	movs	r7, #16
 800396e:	2800      	cmp	r0, #0
 8003970:	d103      	bne.n	800397a <_printf_i+0xf6>
 8003972:	2320      	movs	r3, #32
 8003974:	6822      	ldr	r2, [r4, #0]
 8003976:	439a      	bics	r2, r3
 8003978:	6022      	str	r2, [r4, #0]
 800397a:	0023      	movs	r3, r4
 800397c:	2200      	movs	r2, #0
 800397e:	3343      	adds	r3, #67	; 0x43
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	6863      	ldr	r3, [r4, #4]
 8003984:	60a3      	str	r3, [r4, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	db58      	blt.n	8003a3c <_printf_i+0x1b8>
 800398a:	2204      	movs	r2, #4
 800398c:	6821      	ldr	r1, [r4, #0]
 800398e:	4391      	bics	r1, r2
 8003990:	6021      	str	r1, [r4, #0]
 8003992:	2800      	cmp	r0, #0
 8003994:	d154      	bne.n	8003a40 <_printf_i+0x1bc>
 8003996:	9d02      	ldr	r5, [sp, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d05a      	beq.n	8003a52 <_printf_i+0x1ce>
 800399c:	0025      	movs	r5, r4
 800399e:	7833      	ldrb	r3, [r6, #0]
 80039a0:	3542      	adds	r5, #66	; 0x42
 80039a2:	702b      	strb	r3, [r5, #0]
 80039a4:	e055      	b.n	8003a52 <_printf_i+0x1ce>
 80039a6:	0655      	lsls	r5, r2, #25
 80039a8:	d5db      	bpl.n	8003962 <_printf_i+0xde>
 80039aa:	b280      	uxth	r0, r0
 80039ac:	e7d9      	b.n	8003962 <_printf_i+0xde>
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	680d      	ldr	r5, [r1, #0]
 80039b2:	1d10      	adds	r0, r2, #4
 80039b4:	6949      	ldr	r1, [r1, #20]
 80039b6:	6018      	str	r0, [r3, #0]
 80039b8:	6813      	ldr	r3, [r2, #0]
 80039ba:	062e      	lsls	r6, r5, #24
 80039bc:	d501      	bpl.n	80039c2 <_printf_i+0x13e>
 80039be:	6019      	str	r1, [r3, #0]
 80039c0:	e002      	b.n	80039c8 <_printf_i+0x144>
 80039c2:	066d      	lsls	r5, r5, #25
 80039c4:	d5fb      	bpl.n	80039be <_printf_i+0x13a>
 80039c6:	8019      	strh	r1, [r3, #0]
 80039c8:	2300      	movs	r3, #0
 80039ca:	9d02      	ldr	r5, [sp, #8]
 80039cc:	6123      	str	r3, [r4, #16]
 80039ce:	e04f      	b.n	8003a70 <_printf_i+0x1ec>
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	1d11      	adds	r1, r2, #4
 80039d4:	6019      	str	r1, [r3, #0]
 80039d6:	6815      	ldr	r5, [r2, #0]
 80039d8:	2100      	movs	r1, #0
 80039da:	6862      	ldr	r2, [r4, #4]
 80039dc:	0028      	movs	r0, r5
 80039de:	f000 fadf 	bl	8003fa0 <memchr>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d001      	beq.n	80039ea <_printf_i+0x166>
 80039e6:	1b40      	subs	r0, r0, r5
 80039e8:	6060      	str	r0, [r4, #4]
 80039ea:	6863      	ldr	r3, [r4, #4]
 80039ec:	6123      	str	r3, [r4, #16]
 80039ee:	2300      	movs	r3, #0
 80039f0:	9a02      	ldr	r2, [sp, #8]
 80039f2:	7013      	strb	r3, [r2, #0]
 80039f4:	e03c      	b.n	8003a70 <_printf_i+0x1ec>
 80039f6:	6923      	ldr	r3, [r4, #16]
 80039f8:	002a      	movs	r2, r5
 80039fa:	9904      	ldr	r1, [sp, #16]
 80039fc:	9803      	ldr	r0, [sp, #12]
 80039fe:	9d05      	ldr	r5, [sp, #20]
 8003a00:	47a8      	blx	r5
 8003a02:	1c43      	adds	r3, r0, #1
 8003a04:	d03e      	beq.n	8003a84 <_printf_i+0x200>
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	079b      	lsls	r3, r3, #30
 8003a0a:	d415      	bmi.n	8003a38 <_printf_i+0x1b4>
 8003a0c:	9b07      	ldr	r3, [sp, #28]
 8003a0e:	68e0      	ldr	r0, [r4, #12]
 8003a10:	4298      	cmp	r0, r3
 8003a12:	da39      	bge.n	8003a88 <_printf_i+0x204>
 8003a14:	0018      	movs	r0, r3
 8003a16:	e037      	b.n	8003a88 <_printf_i+0x204>
 8003a18:	0022      	movs	r2, r4
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	3219      	adds	r2, #25
 8003a1e:	9904      	ldr	r1, [sp, #16]
 8003a20:	9803      	ldr	r0, [sp, #12]
 8003a22:	9e05      	ldr	r6, [sp, #20]
 8003a24:	47b0      	blx	r6
 8003a26:	1c43      	adds	r3, r0, #1
 8003a28:	d02c      	beq.n	8003a84 <_printf_i+0x200>
 8003a2a:	3501      	adds	r5, #1
 8003a2c:	68e3      	ldr	r3, [r4, #12]
 8003a2e:	9a07      	ldr	r2, [sp, #28]
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	42ab      	cmp	r3, r5
 8003a34:	dcf0      	bgt.n	8003a18 <_printf_i+0x194>
 8003a36:	e7e9      	b.n	8003a0c <_printf_i+0x188>
 8003a38:	2500      	movs	r5, #0
 8003a3a:	e7f7      	b.n	8003a2c <_printf_i+0x1a8>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d0ad      	beq.n	800399c <_printf_i+0x118>
 8003a40:	9d02      	ldr	r5, [sp, #8]
 8003a42:	0039      	movs	r1, r7
 8003a44:	f7fc fbe6 	bl	8000214 <__aeabi_uidivmod>
 8003a48:	5c73      	ldrb	r3, [r6, r1]
 8003a4a:	3d01      	subs	r5, #1
 8003a4c:	702b      	strb	r3, [r5, #0]
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	d1f7      	bne.n	8003a42 <_printf_i+0x1be>
 8003a52:	2f08      	cmp	r7, #8
 8003a54:	d109      	bne.n	8003a6a <_printf_i+0x1e6>
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	07db      	lsls	r3, r3, #31
 8003a5a:	d506      	bpl.n	8003a6a <_printf_i+0x1e6>
 8003a5c:	6863      	ldr	r3, [r4, #4]
 8003a5e:	6922      	ldr	r2, [r4, #16]
 8003a60:	4293      	cmp	r3, r2
 8003a62:	dc02      	bgt.n	8003a6a <_printf_i+0x1e6>
 8003a64:	2330      	movs	r3, #48	; 0x30
 8003a66:	3d01      	subs	r5, #1
 8003a68:	702b      	strb	r3, [r5, #0]
 8003a6a:	9b02      	ldr	r3, [sp, #8]
 8003a6c:	1b5b      	subs	r3, r3, r5
 8003a6e:	6123      	str	r3, [r4, #16]
 8003a70:	9b05      	ldr	r3, [sp, #20]
 8003a72:	aa07      	add	r2, sp, #28
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	0021      	movs	r1, r4
 8003a78:	9b04      	ldr	r3, [sp, #16]
 8003a7a:	9803      	ldr	r0, [sp, #12]
 8003a7c:	f7ff fe94 	bl	80037a8 <_printf_common>
 8003a80:	1c43      	adds	r3, r0, #1
 8003a82:	d1b8      	bne.n	80039f6 <_printf_i+0x172>
 8003a84:	2001      	movs	r0, #1
 8003a86:	4240      	negs	r0, r0
 8003a88:	b009      	add	sp, #36	; 0x24
 8003a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a8c:	08004189 	.word	0x08004189
 8003a90:	0800419a 	.word	0x0800419a

08003a94 <_sbrk_r>:
 8003a94:	2300      	movs	r3, #0
 8003a96:	b570      	push	{r4, r5, r6, lr}
 8003a98:	4c06      	ldr	r4, [pc, #24]	; (8003ab4 <_sbrk_r+0x20>)
 8003a9a:	0005      	movs	r5, r0
 8003a9c:	0008      	movs	r0, r1
 8003a9e:	6023      	str	r3, [r4, #0]
 8003aa0:	f7fd f8fa 	bl	8000c98 <_sbrk>
 8003aa4:	1c43      	adds	r3, r0, #1
 8003aa6:	d103      	bne.n	8003ab0 <_sbrk_r+0x1c>
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d000      	beq.n	8003ab0 <_sbrk_r+0x1c>
 8003aae:	602b      	str	r3, [r5, #0]
 8003ab0:	bd70      	pop	{r4, r5, r6, pc}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	2000052c 	.word	0x2000052c

08003ab8 <__sread>:
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	000c      	movs	r4, r1
 8003abc:	250e      	movs	r5, #14
 8003abe:	5f49      	ldrsh	r1, [r1, r5]
 8003ac0:	f000 fac6 	bl	8004050 <_read_r>
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	db03      	blt.n	8003ad0 <__sread+0x18>
 8003ac8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003aca:	181b      	adds	r3, r3, r0
 8003acc:	6563      	str	r3, [r4, #84]	; 0x54
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
 8003ad0:	89a3      	ldrh	r3, [r4, #12]
 8003ad2:	4a02      	ldr	r2, [pc, #8]	; (8003adc <__sread+0x24>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	81a3      	strh	r3, [r4, #12]
 8003ad8:	e7f9      	b.n	8003ace <__sread+0x16>
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	ffffefff 	.word	0xffffefff

08003ae0 <__swrite>:
 8003ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae2:	001f      	movs	r7, r3
 8003ae4:	898b      	ldrh	r3, [r1, #12]
 8003ae6:	0005      	movs	r5, r0
 8003ae8:	000c      	movs	r4, r1
 8003aea:	0016      	movs	r6, r2
 8003aec:	05db      	lsls	r3, r3, #23
 8003aee:	d505      	bpl.n	8003afc <__swrite+0x1c>
 8003af0:	230e      	movs	r3, #14
 8003af2:	5ec9      	ldrsh	r1, [r1, r3]
 8003af4:	2200      	movs	r2, #0
 8003af6:	2302      	movs	r3, #2
 8003af8:	f000 f9d2 	bl	8003ea0 <_lseek_r>
 8003afc:	89a3      	ldrh	r3, [r4, #12]
 8003afe:	4a05      	ldr	r2, [pc, #20]	; (8003b14 <__swrite+0x34>)
 8003b00:	0028      	movs	r0, r5
 8003b02:	4013      	ands	r3, r2
 8003b04:	81a3      	strh	r3, [r4, #12]
 8003b06:	0032      	movs	r2, r6
 8003b08:	230e      	movs	r3, #14
 8003b0a:	5ee1      	ldrsh	r1, [r4, r3]
 8003b0c:	003b      	movs	r3, r7
 8003b0e:	f000 f875 	bl	8003bfc <_write_r>
 8003b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b14:	ffffefff 	.word	0xffffefff

08003b18 <__sseek>:
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	000c      	movs	r4, r1
 8003b1c:	250e      	movs	r5, #14
 8003b1e:	5f49      	ldrsh	r1, [r1, r5]
 8003b20:	f000 f9be 	bl	8003ea0 <_lseek_r>
 8003b24:	89a3      	ldrh	r3, [r4, #12]
 8003b26:	1c42      	adds	r2, r0, #1
 8003b28:	d103      	bne.n	8003b32 <__sseek+0x1a>
 8003b2a:	4a05      	ldr	r2, [pc, #20]	; (8003b40 <__sseek+0x28>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	81a3      	strh	r3, [r4, #12]
 8003b30:	bd70      	pop	{r4, r5, r6, pc}
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	0152      	lsls	r2, r2, #5
 8003b36:	4313      	orrs	r3, r2
 8003b38:	81a3      	strh	r3, [r4, #12]
 8003b3a:	6560      	str	r0, [r4, #84]	; 0x54
 8003b3c:	e7f8      	b.n	8003b30 <__sseek+0x18>
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	ffffefff 	.word	0xffffefff

08003b44 <__sclose>:
 8003b44:	b510      	push	{r4, lr}
 8003b46:	230e      	movs	r3, #14
 8003b48:	5ec9      	ldrsh	r1, [r1, r3]
 8003b4a:	f000 f8e1 	bl	8003d10 <_close_r>
 8003b4e:	bd10      	pop	{r4, pc}

08003b50 <__swbuf_r>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	0005      	movs	r5, r0
 8003b54:	000e      	movs	r6, r1
 8003b56:	0014      	movs	r4, r2
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	d004      	beq.n	8003b66 <__swbuf_r+0x16>
 8003b5c:	6983      	ldr	r3, [r0, #24]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <__swbuf_r+0x16>
 8003b62:	f7ff fbf1 	bl	8003348 <__sinit>
 8003b66:	4b22      	ldr	r3, [pc, #136]	; (8003bf0 <__swbuf_r+0xa0>)
 8003b68:	429c      	cmp	r4, r3
 8003b6a:	d12d      	bne.n	8003bc8 <__swbuf_r+0x78>
 8003b6c:	686c      	ldr	r4, [r5, #4]
 8003b6e:	69a3      	ldr	r3, [r4, #24]
 8003b70:	60a3      	str	r3, [r4, #8]
 8003b72:	89a3      	ldrh	r3, [r4, #12]
 8003b74:	071b      	lsls	r3, r3, #28
 8003b76:	d531      	bpl.n	8003bdc <__swbuf_r+0x8c>
 8003b78:	6923      	ldr	r3, [r4, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d02e      	beq.n	8003bdc <__swbuf_r+0x8c>
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	6922      	ldr	r2, [r4, #16]
 8003b82:	b2f7      	uxtb	r7, r6
 8003b84:	1a98      	subs	r0, r3, r2
 8003b86:	6963      	ldr	r3, [r4, #20]
 8003b88:	b2f6      	uxtb	r6, r6
 8003b8a:	4283      	cmp	r3, r0
 8003b8c:	dc05      	bgt.n	8003b9a <__swbuf_r+0x4a>
 8003b8e:	0021      	movs	r1, r4
 8003b90:	0028      	movs	r0, r5
 8003b92:	f000 f959 	bl	8003e48 <_fflush_r>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d126      	bne.n	8003be8 <__swbuf_r+0x98>
 8003b9a:	68a3      	ldr	r3, [r4, #8]
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	60a3      	str	r3, [r4, #8]
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	6022      	str	r2, [r4, #0]
 8003ba8:	701f      	strb	r7, [r3, #0]
 8003baa:	6963      	ldr	r3, [r4, #20]
 8003bac:	4283      	cmp	r3, r0
 8003bae:	d004      	beq.n	8003bba <__swbuf_r+0x6a>
 8003bb0:	89a3      	ldrh	r3, [r4, #12]
 8003bb2:	07db      	lsls	r3, r3, #31
 8003bb4:	d51a      	bpl.n	8003bec <__swbuf_r+0x9c>
 8003bb6:	2e0a      	cmp	r6, #10
 8003bb8:	d118      	bne.n	8003bec <__swbuf_r+0x9c>
 8003bba:	0021      	movs	r1, r4
 8003bbc:	0028      	movs	r0, r5
 8003bbe:	f000 f943 	bl	8003e48 <_fflush_r>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d012      	beq.n	8003bec <__swbuf_r+0x9c>
 8003bc6:	e00f      	b.n	8003be8 <__swbuf_r+0x98>
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <__swbuf_r+0xa4>)
 8003bca:	429c      	cmp	r4, r3
 8003bcc:	d101      	bne.n	8003bd2 <__swbuf_r+0x82>
 8003bce:	68ac      	ldr	r4, [r5, #8]
 8003bd0:	e7cd      	b.n	8003b6e <__swbuf_r+0x1e>
 8003bd2:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <__swbuf_r+0xa8>)
 8003bd4:	429c      	cmp	r4, r3
 8003bd6:	d1ca      	bne.n	8003b6e <__swbuf_r+0x1e>
 8003bd8:	68ec      	ldr	r4, [r5, #12]
 8003bda:	e7c8      	b.n	8003b6e <__swbuf_r+0x1e>
 8003bdc:	0021      	movs	r1, r4
 8003bde:	0028      	movs	r0, r5
 8003be0:	f000 f820 	bl	8003c24 <__swsetup_r>
 8003be4:	2800      	cmp	r0, #0
 8003be6:	d0ca      	beq.n	8003b7e <__swbuf_r+0x2e>
 8003be8:	2601      	movs	r6, #1
 8003bea:	4276      	negs	r6, r6
 8003bec:	0030      	movs	r0, r6
 8003bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bf0:	08004138 	.word	0x08004138
 8003bf4:	08004158 	.word	0x08004158
 8003bf8:	08004118 	.word	0x08004118

08003bfc <_write_r>:
 8003bfc:	b570      	push	{r4, r5, r6, lr}
 8003bfe:	0005      	movs	r5, r0
 8003c00:	0008      	movs	r0, r1
 8003c02:	0011      	movs	r1, r2
 8003c04:	2200      	movs	r2, #0
 8003c06:	4c06      	ldr	r4, [pc, #24]	; (8003c20 <_write_r+0x24>)
 8003c08:	6022      	str	r2, [r4, #0]
 8003c0a:	001a      	movs	r2, r3
 8003c0c:	f7fc fffc 	bl	8000c08 <_write>
 8003c10:	1c43      	adds	r3, r0, #1
 8003c12:	d103      	bne.n	8003c1c <_write_r+0x20>
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d000      	beq.n	8003c1c <_write_r+0x20>
 8003c1a:	602b      	str	r3, [r5, #0]
 8003c1c:	bd70      	pop	{r4, r5, r6, pc}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	2000052c 	.word	0x2000052c

08003c24 <__swsetup_r>:
 8003c24:	4b36      	ldr	r3, [pc, #216]	; (8003d00 <__swsetup_r+0xdc>)
 8003c26:	b570      	push	{r4, r5, r6, lr}
 8003c28:	681d      	ldr	r5, [r3, #0]
 8003c2a:	0006      	movs	r6, r0
 8003c2c:	000c      	movs	r4, r1
 8003c2e:	2d00      	cmp	r5, #0
 8003c30:	d005      	beq.n	8003c3e <__swsetup_r+0x1a>
 8003c32:	69ab      	ldr	r3, [r5, #24]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <__swsetup_r+0x1a>
 8003c38:	0028      	movs	r0, r5
 8003c3a:	f7ff fb85 	bl	8003348 <__sinit>
 8003c3e:	4b31      	ldr	r3, [pc, #196]	; (8003d04 <__swsetup_r+0xe0>)
 8003c40:	429c      	cmp	r4, r3
 8003c42:	d10f      	bne.n	8003c64 <__swsetup_r+0x40>
 8003c44:	686c      	ldr	r4, [r5, #4]
 8003c46:	230c      	movs	r3, #12
 8003c48:	5ee2      	ldrsh	r2, [r4, r3]
 8003c4a:	b293      	uxth	r3, r2
 8003c4c:	0719      	lsls	r1, r3, #28
 8003c4e:	d42d      	bmi.n	8003cac <__swsetup_r+0x88>
 8003c50:	06d9      	lsls	r1, r3, #27
 8003c52:	d411      	bmi.n	8003c78 <__swsetup_r+0x54>
 8003c54:	2309      	movs	r3, #9
 8003c56:	2001      	movs	r0, #1
 8003c58:	6033      	str	r3, [r6, #0]
 8003c5a:	3337      	adds	r3, #55	; 0x37
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	81a3      	strh	r3, [r4, #12]
 8003c60:	4240      	negs	r0, r0
 8003c62:	bd70      	pop	{r4, r5, r6, pc}
 8003c64:	4b28      	ldr	r3, [pc, #160]	; (8003d08 <__swsetup_r+0xe4>)
 8003c66:	429c      	cmp	r4, r3
 8003c68:	d101      	bne.n	8003c6e <__swsetup_r+0x4a>
 8003c6a:	68ac      	ldr	r4, [r5, #8]
 8003c6c:	e7eb      	b.n	8003c46 <__swsetup_r+0x22>
 8003c6e:	4b27      	ldr	r3, [pc, #156]	; (8003d0c <__swsetup_r+0xe8>)
 8003c70:	429c      	cmp	r4, r3
 8003c72:	d1e8      	bne.n	8003c46 <__swsetup_r+0x22>
 8003c74:	68ec      	ldr	r4, [r5, #12]
 8003c76:	e7e6      	b.n	8003c46 <__swsetup_r+0x22>
 8003c78:	075b      	lsls	r3, r3, #29
 8003c7a:	d513      	bpl.n	8003ca4 <__swsetup_r+0x80>
 8003c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c7e:	2900      	cmp	r1, #0
 8003c80:	d008      	beq.n	8003c94 <__swsetup_r+0x70>
 8003c82:	0023      	movs	r3, r4
 8003c84:	3344      	adds	r3, #68	; 0x44
 8003c86:	4299      	cmp	r1, r3
 8003c88:	d002      	beq.n	8003c90 <__swsetup_r+0x6c>
 8003c8a:	0030      	movs	r0, r6
 8003c8c:	f000 f996 	bl	8003fbc <_free_r>
 8003c90:	2300      	movs	r3, #0
 8003c92:	6363      	str	r3, [r4, #52]	; 0x34
 8003c94:	2224      	movs	r2, #36	; 0x24
 8003c96:	89a3      	ldrh	r3, [r4, #12]
 8003c98:	4393      	bics	r3, r2
 8003c9a:	81a3      	strh	r3, [r4, #12]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	6063      	str	r3, [r4, #4]
 8003ca0:	6923      	ldr	r3, [r4, #16]
 8003ca2:	6023      	str	r3, [r4, #0]
 8003ca4:	2308      	movs	r3, #8
 8003ca6:	89a2      	ldrh	r2, [r4, #12]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	81a3      	strh	r3, [r4, #12]
 8003cac:	6923      	ldr	r3, [r4, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10b      	bne.n	8003cca <__swsetup_r+0xa6>
 8003cb2:	21a0      	movs	r1, #160	; 0xa0
 8003cb4:	2280      	movs	r2, #128	; 0x80
 8003cb6:	89a3      	ldrh	r3, [r4, #12]
 8003cb8:	0089      	lsls	r1, r1, #2
 8003cba:	0092      	lsls	r2, r2, #2
 8003cbc:	400b      	ands	r3, r1
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d003      	beq.n	8003cca <__swsetup_r+0xa6>
 8003cc2:	0021      	movs	r1, r4
 8003cc4:	0030      	movs	r0, r6
 8003cc6:	f000 f927 	bl	8003f18 <__smakebuf_r>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	89a2      	ldrh	r2, [r4, #12]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	d011      	beq.n	8003cf6 <__swsetup_r+0xd2>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60a3      	str	r3, [r4, #8]
 8003cd6:	6963      	ldr	r3, [r4, #20]
 8003cd8:	425b      	negs	r3, r3
 8003cda:	61a3      	str	r3, [r4, #24]
 8003cdc:	2000      	movs	r0, #0
 8003cde:	6923      	ldr	r3, [r4, #16]
 8003ce0:	4283      	cmp	r3, r0
 8003ce2:	d1be      	bne.n	8003c62 <__swsetup_r+0x3e>
 8003ce4:	230c      	movs	r3, #12
 8003ce6:	5ee2      	ldrsh	r2, [r4, r3]
 8003ce8:	0613      	lsls	r3, r2, #24
 8003cea:	d5ba      	bpl.n	8003c62 <__swsetup_r+0x3e>
 8003cec:	2340      	movs	r3, #64	; 0x40
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	81a3      	strh	r3, [r4, #12]
 8003cf2:	3801      	subs	r0, #1
 8003cf4:	e7b5      	b.n	8003c62 <__swsetup_r+0x3e>
 8003cf6:	0792      	lsls	r2, r2, #30
 8003cf8:	d400      	bmi.n	8003cfc <__swsetup_r+0xd8>
 8003cfa:	6963      	ldr	r3, [r4, #20]
 8003cfc:	60a3      	str	r3, [r4, #8]
 8003cfe:	e7ed      	b.n	8003cdc <__swsetup_r+0xb8>
 8003d00:	2000000c 	.word	0x2000000c
 8003d04:	08004138 	.word	0x08004138
 8003d08:	08004158 	.word	0x08004158
 8003d0c:	08004118 	.word	0x08004118

08003d10 <_close_r>:
 8003d10:	2300      	movs	r3, #0
 8003d12:	b570      	push	{r4, r5, r6, lr}
 8003d14:	4c06      	ldr	r4, [pc, #24]	; (8003d30 <_close_r+0x20>)
 8003d16:	0005      	movs	r5, r0
 8003d18:	0008      	movs	r0, r1
 8003d1a:	6023      	str	r3, [r4, #0]
 8003d1c:	f7fc ff90 	bl	8000c40 <_close>
 8003d20:	1c43      	adds	r3, r0, #1
 8003d22:	d103      	bne.n	8003d2c <_close_r+0x1c>
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d000      	beq.n	8003d2c <_close_r+0x1c>
 8003d2a:	602b      	str	r3, [r5, #0]
 8003d2c:	bd70      	pop	{r4, r5, r6, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	2000052c 	.word	0x2000052c

08003d34 <__sflush_r>:
 8003d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d36:	898a      	ldrh	r2, [r1, #12]
 8003d38:	0005      	movs	r5, r0
 8003d3a:	000c      	movs	r4, r1
 8003d3c:	0713      	lsls	r3, r2, #28
 8003d3e:	d460      	bmi.n	8003e02 <__sflush_r+0xce>
 8003d40:	684b      	ldr	r3, [r1, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	dc04      	bgt.n	8003d50 <__sflush_r+0x1c>
 8003d46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	dc01      	bgt.n	8003d50 <__sflush_r+0x1c>
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d50:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003d52:	2f00      	cmp	r7, #0
 8003d54:	d0fa      	beq.n	8003d4c <__sflush_r+0x18>
 8003d56:	2300      	movs	r3, #0
 8003d58:	682e      	ldr	r6, [r5, #0]
 8003d5a:	602b      	str	r3, [r5, #0]
 8003d5c:	2380      	movs	r3, #128	; 0x80
 8003d5e:	015b      	lsls	r3, r3, #5
 8003d60:	6a21      	ldr	r1, [r4, #32]
 8003d62:	401a      	ands	r2, r3
 8003d64:	d034      	beq.n	8003dd0 <__sflush_r+0x9c>
 8003d66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d68:	89a3      	ldrh	r3, [r4, #12]
 8003d6a:	075b      	lsls	r3, r3, #29
 8003d6c:	d506      	bpl.n	8003d7c <__sflush_r+0x48>
 8003d6e:	6863      	ldr	r3, [r4, #4]
 8003d70:	1ac0      	subs	r0, r0, r3
 8003d72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <__sflush_r+0x48>
 8003d78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d7a:	1ac0      	subs	r0, r0, r3
 8003d7c:	0002      	movs	r2, r0
 8003d7e:	6a21      	ldr	r1, [r4, #32]
 8003d80:	2300      	movs	r3, #0
 8003d82:	0028      	movs	r0, r5
 8003d84:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003d86:	47b8      	blx	r7
 8003d88:	89a1      	ldrh	r1, [r4, #12]
 8003d8a:	1c43      	adds	r3, r0, #1
 8003d8c:	d106      	bne.n	8003d9c <__sflush_r+0x68>
 8003d8e:	682b      	ldr	r3, [r5, #0]
 8003d90:	2b1d      	cmp	r3, #29
 8003d92:	d830      	bhi.n	8003df6 <__sflush_r+0xc2>
 8003d94:	4a2b      	ldr	r2, [pc, #172]	; (8003e44 <__sflush_r+0x110>)
 8003d96:	40da      	lsrs	r2, r3
 8003d98:	07d3      	lsls	r3, r2, #31
 8003d9a:	d52c      	bpl.n	8003df6 <__sflush_r+0xc2>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	6063      	str	r3, [r4, #4]
 8003da0:	6923      	ldr	r3, [r4, #16]
 8003da2:	6023      	str	r3, [r4, #0]
 8003da4:	04cb      	lsls	r3, r1, #19
 8003da6:	d505      	bpl.n	8003db4 <__sflush_r+0x80>
 8003da8:	1c43      	adds	r3, r0, #1
 8003daa:	d102      	bne.n	8003db2 <__sflush_r+0x7e>
 8003dac:	682b      	ldr	r3, [r5, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d100      	bne.n	8003db4 <__sflush_r+0x80>
 8003db2:	6560      	str	r0, [r4, #84]	; 0x54
 8003db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003db6:	602e      	str	r6, [r5, #0]
 8003db8:	2900      	cmp	r1, #0
 8003dba:	d0c7      	beq.n	8003d4c <__sflush_r+0x18>
 8003dbc:	0023      	movs	r3, r4
 8003dbe:	3344      	adds	r3, #68	; 0x44
 8003dc0:	4299      	cmp	r1, r3
 8003dc2:	d002      	beq.n	8003dca <__sflush_r+0x96>
 8003dc4:	0028      	movs	r0, r5
 8003dc6:	f000 f8f9 	bl	8003fbc <_free_r>
 8003dca:	2000      	movs	r0, #0
 8003dcc:	6360      	str	r0, [r4, #52]	; 0x34
 8003dce:	e7be      	b.n	8003d4e <__sflush_r+0x1a>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	0028      	movs	r0, r5
 8003dd4:	47b8      	blx	r7
 8003dd6:	1c43      	adds	r3, r0, #1
 8003dd8:	d1c6      	bne.n	8003d68 <__sflush_r+0x34>
 8003dda:	682b      	ldr	r3, [r5, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0c3      	beq.n	8003d68 <__sflush_r+0x34>
 8003de0:	2b1d      	cmp	r3, #29
 8003de2:	d001      	beq.n	8003de8 <__sflush_r+0xb4>
 8003de4:	2b16      	cmp	r3, #22
 8003de6:	d101      	bne.n	8003dec <__sflush_r+0xb8>
 8003de8:	602e      	str	r6, [r5, #0]
 8003dea:	e7af      	b.n	8003d4c <__sflush_r+0x18>
 8003dec:	2340      	movs	r3, #64	; 0x40
 8003dee:	89a2      	ldrh	r2, [r4, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	81a3      	strh	r3, [r4, #12]
 8003df4:	e7ab      	b.n	8003d4e <__sflush_r+0x1a>
 8003df6:	2340      	movs	r3, #64	; 0x40
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	2001      	movs	r0, #1
 8003dfc:	81a3      	strh	r3, [r4, #12]
 8003dfe:	4240      	negs	r0, r0
 8003e00:	e7a5      	b.n	8003d4e <__sflush_r+0x1a>
 8003e02:	690f      	ldr	r7, [r1, #16]
 8003e04:	2f00      	cmp	r7, #0
 8003e06:	d0a1      	beq.n	8003d4c <__sflush_r+0x18>
 8003e08:	680b      	ldr	r3, [r1, #0]
 8003e0a:	600f      	str	r7, [r1, #0]
 8003e0c:	1bdb      	subs	r3, r3, r7
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	2300      	movs	r3, #0
 8003e12:	0792      	lsls	r2, r2, #30
 8003e14:	d100      	bne.n	8003e18 <__sflush_r+0xe4>
 8003e16:	694b      	ldr	r3, [r1, #20]
 8003e18:	60a3      	str	r3, [r4, #8]
 8003e1a:	9b01      	ldr	r3, [sp, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	dc00      	bgt.n	8003e22 <__sflush_r+0xee>
 8003e20:	e794      	b.n	8003d4c <__sflush_r+0x18>
 8003e22:	9b01      	ldr	r3, [sp, #4]
 8003e24:	003a      	movs	r2, r7
 8003e26:	6a21      	ldr	r1, [r4, #32]
 8003e28:	0028      	movs	r0, r5
 8003e2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e2c:	47b0      	blx	r6
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	dc03      	bgt.n	8003e3a <__sflush_r+0x106>
 8003e32:	2340      	movs	r3, #64	; 0x40
 8003e34:	89a2      	ldrh	r2, [r4, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	e7df      	b.n	8003dfa <__sflush_r+0xc6>
 8003e3a:	9b01      	ldr	r3, [sp, #4]
 8003e3c:	183f      	adds	r7, r7, r0
 8003e3e:	1a1b      	subs	r3, r3, r0
 8003e40:	9301      	str	r3, [sp, #4]
 8003e42:	e7ea      	b.n	8003e1a <__sflush_r+0xe6>
 8003e44:	20400001 	.word	0x20400001

08003e48 <_fflush_r>:
 8003e48:	690b      	ldr	r3, [r1, #16]
 8003e4a:	b570      	push	{r4, r5, r6, lr}
 8003e4c:	0005      	movs	r5, r0
 8003e4e:	000c      	movs	r4, r1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <_fflush_r+0x10>
 8003e54:	2000      	movs	r0, #0
 8003e56:	bd70      	pop	{r4, r5, r6, pc}
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	d004      	beq.n	8003e66 <_fflush_r+0x1e>
 8003e5c:	6983      	ldr	r3, [r0, #24]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <_fflush_r+0x1e>
 8003e62:	f7ff fa71 	bl	8003348 <__sinit>
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <_fflush_r+0x4c>)
 8003e68:	429c      	cmp	r4, r3
 8003e6a:	d109      	bne.n	8003e80 <_fflush_r+0x38>
 8003e6c:	686c      	ldr	r4, [r5, #4]
 8003e6e:	220c      	movs	r2, #12
 8003e70:	5ea3      	ldrsh	r3, [r4, r2]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0ee      	beq.n	8003e54 <_fflush_r+0xc>
 8003e76:	0021      	movs	r1, r4
 8003e78:	0028      	movs	r0, r5
 8003e7a:	f7ff ff5b 	bl	8003d34 <__sflush_r>
 8003e7e:	e7ea      	b.n	8003e56 <_fflush_r+0xe>
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <_fflush_r+0x50>)
 8003e82:	429c      	cmp	r4, r3
 8003e84:	d101      	bne.n	8003e8a <_fflush_r+0x42>
 8003e86:	68ac      	ldr	r4, [r5, #8]
 8003e88:	e7f1      	b.n	8003e6e <_fflush_r+0x26>
 8003e8a:	4b04      	ldr	r3, [pc, #16]	; (8003e9c <_fflush_r+0x54>)
 8003e8c:	429c      	cmp	r4, r3
 8003e8e:	d1ee      	bne.n	8003e6e <_fflush_r+0x26>
 8003e90:	68ec      	ldr	r4, [r5, #12]
 8003e92:	e7ec      	b.n	8003e6e <_fflush_r+0x26>
 8003e94:	08004138 	.word	0x08004138
 8003e98:	08004158 	.word	0x08004158
 8003e9c:	08004118 	.word	0x08004118

08003ea0 <_lseek_r>:
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	0005      	movs	r5, r0
 8003ea4:	0008      	movs	r0, r1
 8003ea6:	0011      	movs	r1, r2
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	4c06      	ldr	r4, [pc, #24]	; (8003ec4 <_lseek_r+0x24>)
 8003eac:	6022      	str	r2, [r4, #0]
 8003eae:	001a      	movs	r2, r3
 8003eb0:	f7fc fee7 	bl	8000c82 <_lseek>
 8003eb4:	1c43      	adds	r3, r0, #1
 8003eb6:	d103      	bne.n	8003ec0 <_lseek_r+0x20>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d000      	beq.n	8003ec0 <_lseek_r+0x20>
 8003ebe:	602b      	str	r3, [r5, #0]
 8003ec0:	bd70      	pop	{r4, r5, r6, pc}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	2000052c 	.word	0x2000052c

08003ec8 <__swhatbuf_r>:
 8003ec8:	b570      	push	{r4, r5, r6, lr}
 8003eca:	000e      	movs	r6, r1
 8003ecc:	001d      	movs	r5, r3
 8003ece:	230e      	movs	r3, #14
 8003ed0:	5ec9      	ldrsh	r1, [r1, r3]
 8003ed2:	b096      	sub	sp, #88	; 0x58
 8003ed4:	0014      	movs	r4, r2
 8003ed6:	2900      	cmp	r1, #0
 8003ed8:	da07      	bge.n	8003eea <__swhatbuf_r+0x22>
 8003eda:	2300      	movs	r3, #0
 8003edc:	602b      	str	r3, [r5, #0]
 8003ede:	89b3      	ldrh	r3, [r6, #12]
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	d411      	bmi.n	8003f08 <__swhatbuf_r+0x40>
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	e00f      	b.n	8003f0a <__swhatbuf_r+0x42>
 8003eea:	466a      	mov	r2, sp
 8003eec:	f000 f8c4 	bl	8004078 <_fstat_r>
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	dbf2      	blt.n	8003eda <__swhatbuf_r+0x12>
 8003ef4:	22f0      	movs	r2, #240	; 0xf0
 8003ef6:	9b01      	ldr	r3, [sp, #4]
 8003ef8:	0212      	lsls	r2, r2, #8
 8003efa:	4013      	ands	r3, r2
 8003efc:	4a05      	ldr	r2, [pc, #20]	; (8003f14 <__swhatbuf_r+0x4c>)
 8003efe:	189b      	adds	r3, r3, r2
 8003f00:	425a      	negs	r2, r3
 8003f02:	4153      	adcs	r3, r2
 8003f04:	602b      	str	r3, [r5, #0]
 8003f06:	e7ed      	b.n	8003ee4 <__swhatbuf_r+0x1c>
 8003f08:	2340      	movs	r3, #64	; 0x40
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	6023      	str	r3, [r4, #0]
 8003f0e:	b016      	add	sp, #88	; 0x58
 8003f10:	bd70      	pop	{r4, r5, r6, pc}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	ffffe000 	.word	0xffffe000

08003f18 <__smakebuf_r>:
 8003f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f1a:	2602      	movs	r6, #2
 8003f1c:	898b      	ldrh	r3, [r1, #12]
 8003f1e:	0005      	movs	r5, r0
 8003f20:	000c      	movs	r4, r1
 8003f22:	4233      	tst	r3, r6
 8003f24:	d006      	beq.n	8003f34 <__smakebuf_r+0x1c>
 8003f26:	0023      	movs	r3, r4
 8003f28:	3347      	adds	r3, #71	; 0x47
 8003f2a:	6023      	str	r3, [r4, #0]
 8003f2c:	6123      	str	r3, [r4, #16]
 8003f2e:	2301      	movs	r3, #1
 8003f30:	6163      	str	r3, [r4, #20]
 8003f32:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003f34:	ab01      	add	r3, sp, #4
 8003f36:	466a      	mov	r2, sp
 8003f38:	f7ff ffc6 	bl	8003ec8 <__swhatbuf_r>
 8003f3c:	9900      	ldr	r1, [sp, #0]
 8003f3e:	0007      	movs	r7, r0
 8003f40:	0028      	movs	r0, r5
 8003f42:	f7ff fa95 	bl	8003470 <_malloc_r>
 8003f46:	2800      	cmp	r0, #0
 8003f48:	d108      	bne.n	8003f5c <__smakebuf_r+0x44>
 8003f4a:	220c      	movs	r2, #12
 8003f4c:	5ea3      	ldrsh	r3, [r4, r2]
 8003f4e:	059a      	lsls	r2, r3, #22
 8003f50:	d4ef      	bmi.n	8003f32 <__smakebuf_r+0x1a>
 8003f52:	2203      	movs	r2, #3
 8003f54:	4393      	bics	r3, r2
 8003f56:	431e      	orrs	r6, r3
 8003f58:	81a6      	strh	r6, [r4, #12]
 8003f5a:	e7e4      	b.n	8003f26 <__smakebuf_r+0xe>
 8003f5c:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <__smakebuf_r+0x84>)
 8003f5e:	62ab      	str	r3, [r5, #40]	; 0x28
 8003f60:	2380      	movs	r3, #128	; 0x80
 8003f62:	89a2      	ldrh	r2, [r4, #12]
 8003f64:	6020      	str	r0, [r4, #0]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	81a3      	strh	r3, [r4, #12]
 8003f6a:	9b00      	ldr	r3, [sp, #0]
 8003f6c:	6120      	str	r0, [r4, #16]
 8003f6e:	6163      	str	r3, [r4, #20]
 8003f70:	9b01      	ldr	r3, [sp, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00d      	beq.n	8003f92 <__smakebuf_r+0x7a>
 8003f76:	230e      	movs	r3, #14
 8003f78:	5ee1      	ldrsh	r1, [r4, r3]
 8003f7a:	0028      	movs	r0, r5
 8003f7c:	f000 f88e 	bl	800409c <_isatty_r>
 8003f80:	2800      	cmp	r0, #0
 8003f82:	d006      	beq.n	8003f92 <__smakebuf_r+0x7a>
 8003f84:	2203      	movs	r2, #3
 8003f86:	89a3      	ldrh	r3, [r4, #12]
 8003f88:	4393      	bics	r3, r2
 8003f8a:	001a      	movs	r2, r3
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	81a3      	strh	r3, [r4, #12]
 8003f92:	89a0      	ldrh	r0, [r4, #12]
 8003f94:	4338      	orrs	r0, r7
 8003f96:	81a0      	strh	r0, [r4, #12]
 8003f98:	e7cb      	b.n	8003f32 <__smakebuf_r+0x1a>
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	0800330d 	.word	0x0800330d

08003fa0 <memchr>:
 8003fa0:	b2c9      	uxtb	r1, r1
 8003fa2:	1882      	adds	r2, r0, r2
 8003fa4:	4290      	cmp	r0, r2
 8003fa6:	d101      	bne.n	8003fac <memchr+0xc>
 8003fa8:	2000      	movs	r0, #0
 8003faa:	4770      	bx	lr
 8003fac:	7803      	ldrb	r3, [r0, #0]
 8003fae:	428b      	cmp	r3, r1
 8003fb0:	d0fb      	beq.n	8003faa <memchr+0xa>
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	e7f6      	b.n	8003fa4 <memchr+0x4>

08003fb6 <__malloc_lock>:
 8003fb6:	4770      	bx	lr

08003fb8 <__malloc_unlock>:
 8003fb8:	4770      	bx	lr
	...

08003fbc <_free_r>:
 8003fbc:	b570      	push	{r4, r5, r6, lr}
 8003fbe:	0005      	movs	r5, r0
 8003fc0:	2900      	cmp	r1, #0
 8003fc2:	d010      	beq.n	8003fe6 <_free_r+0x2a>
 8003fc4:	1f0c      	subs	r4, r1, #4
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	da00      	bge.n	8003fce <_free_r+0x12>
 8003fcc:	18e4      	adds	r4, r4, r3
 8003fce:	0028      	movs	r0, r5
 8003fd0:	f7ff fff1 	bl	8003fb6 <__malloc_lock>
 8003fd4:	4a1d      	ldr	r2, [pc, #116]	; (800404c <_free_r+0x90>)
 8003fd6:	6813      	ldr	r3, [r2, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <_free_r+0x2c>
 8003fdc:	6063      	str	r3, [r4, #4]
 8003fde:	6014      	str	r4, [r2, #0]
 8003fe0:	0028      	movs	r0, r5
 8003fe2:	f7ff ffe9 	bl	8003fb8 <__malloc_unlock>
 8003fe6:	bd70      	pop	{r4, r5, r6, pc}
 8003fe8:	42a3      	cmp	r3, r4
 8003fea:	d909      	bls.n	8004000 <_free_r+0x44>
 8003fec:	6821      	ldr	r1, [r4, #0]
 8003fee:	1860      	adds	r0, r4, r1
 8003ff0:	4283      	cmp	r3, r0
 8003ff2:	d1f3      	bne.n	8003fdc <_free_r+0x20>
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	1841      	adds	r1, r0, r1
 8003ffa:	6021      	str	r1, [r4, #0]
 8003ffc:	e7ee      	b.n	8003fdc <_free_r+0x20>
 8003ffe:	0013      	movs	r3, r2
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	2a00      	cmp	r2, #0
 8004004:	d001      	beq.n	800400a <_free_r+0x4e>
 8004006:	42a2      	cmp	r2, r4
 8004008:	d9f9      	bls.n	8003ffe <_free_r+0x42>
 800400a:	6819      	ldr	r1, [r3, #0]
 800400c:	1858      	adds	r0, r3, r1
 800400e:	42a0      	cmp	r0, r4
 8004010:	d10b      	bne.n	800402a <_free_r+0x6e>
 8004012:	6820      	ldr	r0, [r4, #0]
 8004014:	1809      	adds	r1, r1, r0
 8004016:	1858      	adds	r0, r3, r1
 8004018:	6019      	str	r1, [r3, #0]
 800401a:	4282      	cmp	r2, r0
 800401c:	d1e0      	bne.n	8003fe0 <_free_r+0x24>
 800401e:	6810      	ldr	r0, [r2, #0]
 8004020:	6852      	ldr	r2, [r2, #4]
 8004022:	1841      	adds	r1, r0, r1
 8004024:	6019      	str	r1, [r3, #0]
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	e7da      	b.n	8003fe0 <_free_r+0x24>
 800402a:	42a0      	cmp	r0, r4
 800402c:	d902      	bls.n	8004034 <_free_r+0x78>
 800402e:	230c      	movs	r3, #12
 8004030:	602b      	str	r3, [r5, #0]
 8004032:	e7d5      	b.n	8003fe0 <_free_r+0x24>
 8004034:	6821      	ldr	r1, [r4, #0]
 8004036:	1860      	adds	r0, r4, r1
 8004038:	4282      	cmp	r2, r0
 800403a:	d103      	bne.n	8004044 <_free_r+0x88>
 800403c:	6810      	ldr	r0, [r2, #0]
 800403e:	6852      	ldr	r2, [r2, #4]
 8004040:	1841      	adds	r1, r0, r1
 8004042:	6021      	str	r1, [r4, #0]
 8004044:	6062      	str	r2, [r4, #4]
 8004046:	605c      	str	r4, [r3, #4]
 8004048:	e7ca      	b.n	8003fe0 <_free_r+0x24>
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	20000470 	.word	0x20000470

08004050 <_read_r>:
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	0005      	movs	r5, r0
 8004054:	0008      	movs	r0, r1
 8004056:	0011      	movs	r1, r2
 8004058:	2200      	movs	r2, #0
 800405a:	4c06      	ldr	r4, [pc, #24]	; (8004074 <_read_r+0x24>)
 800405c:	6022      	str	r2, [r4, #0]
 800405e:	001a      	movs	r2, r3
 8004060:	f7fc fdb5 	bl	8000bce <_read>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d103      	bne.n	8004070 <_read_r+0x20>
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d000      	beq.n	8004070 <_read_r+0x20>
 800406e:	602b      	str	r3, [r5, #0]
 8004070:	bd70      	pop	{r4, r5, r6, pc}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	2000052c 	.word	0x2000052c

08004078 <_fstat_r>:
 8004078:	2300      	movs	r3, #0
 800407a:	b570      	push	{r4, r5, r6, lr}
 800407c:	4c06      	ldr	r4, [pc, #24]	; (8004098 <_fstat_r+0x20>)
 800407e:	0005      	movs	r5, r0
 8004080:	0008      	movs	r0, r1
 8004082:	0011      	movs	r1, r2
 8004084:	6023      	str	r3, [r4, #0]
 8004086:	f7fc fde5 	bl	8000c54 <_fstat>
 800408a:	1c43      	adds	r3, r0, #1
 800408c:	d103      	bne.n	8004096 <_fstat_r+0x1e>
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d000      	beq.n	8004096 <_fstat_r+0x1e>
 8004094:	602b      	str	r3, [r5, #0]
 8004096:	bd70      	pop	{r4, r5, r6, pc}
 8004098:	2000052c 	.word	0x2000052c

0800409c <_isatty_r>:
 800409c:	2300      	movs	r3, #0
 800409e:	b570      	push	{r4, r5, r6, lr}
 80040a0:	4c06      	ldr	r4, [pc, #24]	; (80040bc <_isatty_r+0x20>)
 80040a2:	0005      	movs	r5, r0
 80040a4:	0008      	movs	r0, r1
 80040a6:	6023      	str	r3, [r4, #0]
 80040a8:	f7fc fde2 	bl	8000c70 <_isatty>
 80040ac:	1c43      	adds	r3, r0, #1
 80040ae:	d103      	bne.n	80040b8 <_isatty_r+0x1c>
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d000      	beq.n	80040b8 <_isatty_r+0x1c>
 80040b6:	602b      	str	r3, [r5, #0]
 80040b8:	bd70      	pop	{r4, r5, r6, pc}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	2000052c 	.word	0x2000052c

080040c0 <_init>:
 80040c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c6:	bc08      	pop	{r3}
 80040c8:	469e      	mov	lr, r3
 80040ca:	4770      	bx	lr

080040cc <_fini>:
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d2:	bc08      	pop	{r3}
 80040d4:	469e      	mov	lr, r3
 80040d6:	4770      	bx	lr
